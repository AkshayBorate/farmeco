{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import { Button, ListGroup, Form, Row, Col } from \"react-bootstrap\";\n// import axios from \"axios\";\n// import \"./ProcessingStatus.css\";\n\n// function ProcessingStatus() {\n//   const [requests, setRequests] = useState([]);\n//   const [pickupDate, setPickupDate] = useState(\"\");\n\n//   useEffect(() => {\n//     fetchRequests();\n//   }, []);\n\n//   const fetchRequests = async () => {\n//     try {\n//       const response = await axios.get(\"/api/waste-requests\");\n//       setRequests(response.data);\n//     } catch (error) {\n//       console.error(\"Error fetching requests:\", error);\n//     }\n//   };\n\n//   const handleConfirmRequest = async (requestId) => {\n//     try {\n//       await axios.put(`/api/confirm-request/${requestId}`, { status: \"confirmed\", pickupDate });\n//       fetchRequests();\n//     } catch (error) {\n//       console.error(\"Error confirming request:\", error);\n//     }\n//   };\n\n//   const handleRejectRequest = async (requestId) => {\n//     try {\n//       await axios.put(`/api/reject-request/${requestId}`, { status: \"rejected\" });\n//       fetchRequests();\n//     } catch (error) {\n//       console.error(\"Error rejecting request:\", error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"container\">\n//     <div className=\"processing-status-container\">\n//       <h1>Processing Status</h1>\n//       <p>Track the status of ongoing waste processing.</p>\n\n//       <h3>Waste Requests</h3>\n//       <ListGroup>\n//         {requests.length === 0 ? (\n//           <ListGroup.Item>No requests available</ListGroup.Item>\n//         ) : (\n//           requests.map((request) => (\n//             <ListGroup.Item key={request.id}>\n//               <Row>\n//                 <Col md={6}>\n//                   <p>Type: {request.type}</p>\n//                   <p>Volume: {request.volume} tons</p>\n//                   <p>Source: {request.source}</p>\n//                   <p>Date: {request.date}</p>\n//                 </Col>\n//                 <Col md={6}>\n//                   {request.status !== \"confirmed\" && (\n//                     <>\n//                       <Button\n//                         variant=\"success\"\n//                         onClick={() => handleConfirmRequest(request.id)}\n//                       >\n//                         Confirm\n//                       </Button>\n//                       <Button\n//                         variant=\"danger\"\n//                         onClick={() => handleRejectRequest(request.id)}\n//                       >\n//                         Reject\n//                       </Button>\n//                     </>\n//                   )}\n//                   {request.status === \"confirmed\" && (\n//                     <p>Pickup Scheduled for: {pickupDate}</p>\n//                   )}\n//                 </Col>\n//               </Row>\n//               {request.status === \"confirmed\" && (\n//                 <Row className=\"mt-3\">\n//                   <Col md={12}>\n//                     <Form.Control\n//                       type=\"date\"\n//                       value={pickupDate}\n//                       onChange={(e) => setPickupDate(e.target.value)}\n//                       placeholder=\"Schedule Pickup Date\"\n//                     />\n//                   </Col>\n//                 </Row>\n//               )}\n//             </ListGroup.Item>\n//           ))\n//         )}\n//       </ListGroup>\n//     </div>\n//     </div>\n//   );\n// }\n\n// export default ProcessingStatus;\n\n// import React, { useState, useEffect } from \"react\";\n// import { Button, ListGroup, Form, Row, Col, Modal, Card } from \"react-bootstrap\";\n// import axios from \"axios\";\n// import \"./ProcessingStatus.css\";\n\n// function ProcessingStatus() {\n//   const [requests, setRequests] = useState([]);\n//   const [pickupDate, setPickupDate] = useState(\"\");\n//   const [driverName, setDriverName] = useState(\"\");\n//   const [additionalInfo, setAdditionalInfo] = useState(\"\");\n//   const [showScheduleModal, setShowScheduleModal] = useState(false);\n//   const [selectedRequest, setSelectedRequest] = useState(null);\n//   const [rejectReason, setRejectReason] = useState(\"\");\n//   const [showRejectModal, setShowRejectModal] = useState(false);\n\n//   useEffect(() => {\n//     // Mocking API data for testing\n//     const mockRequests = [\n//       {\n//         id: 1,\n//         type: \"Plastic\",\n//         volume: 5,\n//         source: \"Farmer A\",\n//         date: \"2024-12-10\",\n//         status: \"pending\",\n//       },\n//       {\n//         id: 2,\n//         type: \"Organic\",\n//         volume: 3,\n//         source: \"Farmer B\",\n//         date: \"2024-12-12\",\n//         status: \"pending\",\n//       },\n//       {\n//         id: 3,\n//         type: \"Glass\",\n//         volume: 2,\n//         source: \"Farmer C\",\n//         date: \"2024-12-11\",\n//         status: \"confirmed\",\n//       },\n//     ];\n//     setRequests(mockRequests);\n//   }, []);\n\n//   const handleConfirmRequest = async (requestId) => {\n//     try {\n//       setRequests((prevRequests) =>\n//         prevRequests.map((request) =>\n//           request.id === requestId\n//             ? { ...request, status: \"confirmed\" }\n//             : request\n//         )\n//       );\n//     } catch (error) {\n//       console.error(\"Error confirming request:\", error);\n//     }\n//   };\n\n//   const handleRejectRequest = (requestId) => {\n//     setSelectedRequest(requestId);\n//     setShowRejectModal(true);\n//   };\n\n//   const handleRejectSubmit = async () => {\n//     try {\n//       setRequests((prevRequests) =>\n//         prevRequests.map((request) =>\n//           request.id === selectedRequest\n//             ? { ...request, status: \"rejected\", rejectReason }\n//             : request\n//         )\n//       );\n//       setShowRejectModal(false);\n//       setRejectReason(\"\");\n//     } catch (error) {\n//       console.error(\"Error rejecting request:\", error);\n//     }\n//   };\n\n//   const handleSchedulePickup = (requestId) => {\n//     setSelectedRequest(requestId);\n//     setShowScheduleModal(true);\n//   };\n\n//   const handleScheduleSubmit = async () => {\n//     try {\n//       setRequests((prevRequests) =>\n//         prevRequests.map((request) =>\n//           request.id === selectedRequest\n//             ? {\n//                 ...request,\n//                 status: \"pickupScheduled\",\n//                 pickupDate,\n//                 driverName,\n//                 additionalInfo,\n//               }\n//             : request\n//         )\n//       );\n//       setShowScheduleModal(false);\n//       setPickupDate(\"\");\n//       setDriverName(\"\");\n//       setAdditionalInfo(\"\");\n//     } catch (error) {\n//       console.error(\"Error scheduling pickup:\", error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"container\">\n//     <div className=\"processing-status-container\">\n//       <h1>Processing Status</h1>\n//       <p>Track the status of ongoing waste processing.</p>\n\n//       <h3>Waste Requests</h3>\n//       <div className=\"requests-list\">\n//         {requests.length === 0 ? (\n//           <p>No requests available</p>\n//         ) : (\n//           requests.map((request) => (\n//             <Card key={request.id} className=\"request-card mb-3\">\n//               <Card.Body>\n//                 <Row>\n//                   <Col md={6}>\n//                     <p><strong>Type:</strong> {request.type}</p>\n//                     <p><strong>Volume:</strong> {request.volume} tons</p>\n//                     <p><strong>Source:</strong> {request.source}</p>\n//                     <p><strong>Date:</strong> {request.date}</p>\n//                   </Col>\n//                   <Col md={6}>\n//                     {request.status === \"pending\" && (\n//                       <>\n//                         <Button\n//                           variant=\"success\"\n//                           onClick={() => handleConfirmRequest(request.id)}\n//                           className=\"mr-2\"\n//                         >\n//                           Confirm\n//                         </Button>\n//                         <Button\n//                           variant=\"danger\"\n//                           onClick={() => handleRejectRequest(request.id)}\n//                         >\n//                           Reject\n//                         </Button>\n//                       </>\n//                     )}\n//                     {request.status === \"confirmed\" && (\n//                       <>\n//                         <p>Pickup Scheduled for: {request.pickupDate}</p>\n//                         <Button\n//                           variant=\"primary\"\n//                           onClick={() => handleSchedulePickup(request.id)}\n//                           className=\"mt-2\"\n//                         >\n//                           Schedule Pickup\n//                         </Button>\n//                       </>\n//                     )}\n//                     {request.status === \"pickupScheduled\" && (\n//                       <p>\n//                         Pickup scheduled for: {request.pickupDate}<br />\n//                         <strong>Driver Name:</strong> {request.driverName}<br />\n//                         <strong>Additional Info:</strong> {request.additionalInfo}\n//                       </p>\n//                     )}\n//                     {request.status === \"rejected\" && (\n//                       <p><strong>Reason for Rejection:</strong> {request.rejectReason}</p>\n//                     )}\n//                   </Col>\n//                 </Row>\n//               </Card.Body>\n//             </Card>\n//           ))\n//         )}\n//       </div>\n//       </div>\n\n//       <Modal show={showRejectModal} onHide={() => setShowRejectModal(false)}>\n//         <Modal.Header closeButton>\n//           <Modal.Title>Reject Reason</Modal.Title>\n//         </Modal.Header>\n//         <Modal.Body>\n//           <Form.Group>\n//             <Form.Label>Provide a reason for rejection:</Form.Label>\n//             <Form.Control\n//               as=\"textarea\"\n//               rows={3}\n//               value={rejectReason}\n//               onChange={(e) => setRejectReason(e.target.value)}\n//             />\n//           </Form.Group>\n//         </Modal.Body>\n//         <Modal.Footer>\n//           <Button variant=\"secondary\" onClick={() => setShowRejectModal(false)}>\n//             Close\n//           </Button>\n//           <Button variant=\"danger\" onClick={handleRejectSubmit}>\n//             Submit Rejection\n//           </Button>\n//         </Modal.Footer>\n//       </Modal>\n\n//       {/* Schedule Pickup Modal */}\n//       <Modal show={showScheduleModal} onHide={() => setShowScheduleModal(false)}>\n//         <Modal.Header closeButton>\n//           <Modal.Title>Schedule Pickup</Modal.Title>\n//         </Modal.Header>\n//         <Modal.Body>\n//           <Form.Group>\n//             <Form.Label>Pickup Date:</Form.Label>\n//             <Form.Control\n//               type=\"date\"\n//               value={pickupDate}\n//               onChange={(e) => setPickupDate(e.target.value)}\n//             />\n//           </Form.Group>\n//           <Form.Group>\n//             <Form.Label>Driver Name:</Form.Label>\n//             <Form.Control\n//               type=\"text\"\n//               value={driverName}\n//               onChange={(e) => setDriverName(e.target.value)}\n//               placeholder=\"Enter driver's name\"\n//             />\n//           </Form.Group>\n//           <Form.Group>\n//             <Form.Label>Additional Information:</Form.Label>\n//             <Form.Control\n//               as=\"textarea\"\n//               rows={3}\n//               value={additionalInfo}\n//               onChange={(e) => setAdditionalInfo(e.target.value)}\n//               placeholder=\"Enter any additional info\"\n//             />\n//           </Form.Group>\n//         </Modal.Body>\n//         <Modal.Footer>\n//           <Button variant=\"secondary\" onClick={() => setShowScheduleModal(false)}>\n//             Close\n//           </Button>\n//           <Button variant=\"primary\" onClick={handleScheduleSubmit}>\n//             Schedule Pickup\n//           </Button>\n//         </Modal.Footer>\n//       </Modal>\n//     </div>\n//   );\n// }\n\n// export default ProcessingStatus;\n\n// import React, { useState, useEffect } from \"react\";\n// import { Button, Row, Col, Modal, Card, Form } from \"react-bootstrap\";\n// import \"./ProcessingStatus.css\";\n\n// function ProcessingStatus() {\n//   const [requests, setRequests] = useState([]);\n//   const [pickupDate, setPickupDate] = useState(\"\");\n//   const [message, setMessage] = useState(\"\");\n//   const [rejectionMessage, setRejectionMessage] = useState(\"\");\n//   const [showScheduleModal, setShowScheduleModal] = useState(false);\n//   const [showRejectionModal, setShowRejectionModal] = useState(false);\n//   const [selectedRequest, setSelectedRequest] = useState(null);\n//   const [filter, setFilter] = useState(\"NEW\");\n\n//   // Fetch data from API\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const response = await fetch(\n//           \"http://localhost:8085/waste-details/orders\"\n//         );\n//         const data = await response.json();\n//         if (Array.isArray(data)) {\n//           setRequests(data);\n//         } else {\n//           console.error(\"Invalid data received from API\");\n//         }\n//       } catch (error) {\n//         console.error(\"Error fetching data:\", error);\n//       }\n//     };\n//     fetchData();\n//   }, []);\n\n//   // Open Schedule Modal for Confirm Request\n//   const handleConfirmRequest = (requestId) => {\n//     setSelectedRequest(requestId);\n//     setShowScheduleModal(true);\n//   };\n\n//   // Handle Schedule Pickup\n//   const handleSchedulePickup = async () => {\n//     const updatedData = {\n//       status: \"ACCEPTED\",\n//       pickupDate,\n//       message,\n//     };\n\n//     try {\n//       const response = await fetch(\n//         `http://localhost:8085/waste-details/update/${selectedRequest}`,\n//         {\n//           method: \"PUT\",\n//           headers: { \"Content-Type\": \"application/json\" },\n//           body: JSON.stringify(updatedData),\n//         }\n//       );\n\n//       if (response.ok) {\n//         setRequests((prevRequests) =>\n//           prevRequests.map((request) =>\n//             request.id === selectedRequest\n//               ? { ...request, ...updatedData }\n//               : request\n//           )\n//         );\n//         setShowScheduleModal(false);\n//       } else {\n//         console.error(\"Error updating request\");\n//       }\n//     } catch (error) {\n//       console.error(\"Error updating status:\", error);\n//     }\n//   };\n\n//   // Handle Collect Request with Confirmation Alert\n//   const handleCollectRequest = async (requestId) => {\n//     const isConfirmed = window.confirm(\n//       \"Are you sure you want to mark this request as collected?\"\n//     );\n//     if (!isConfirmed) return;\n\n//     const updatedData = {\n//       status: \"COLLECTED\",\n//     };\n\n//     try {\n//       const response = await fetch(\n//         `http://localhost:8085/waste-details/update/${requestId}`,\n//         {\n//           method: \"PUT\",\n//           headers: { \"Content-Type\": \"application/json\" },\n//           body: JSON.stringify(updatedData),\n//         }\n//       );\n\n//       if (response.ok) {\n//         setRequests((prevRequests) =>\n//           prevRequests.map((request) =>\n//             request.id === requestId ? { ...request, ...updatedData } : request\n//           )\n//         );\n//         alert(\"Request successfully marked as collected!\");\n//       } else {\n//         console.error(\"Error updating request to collected\");\n//       }\n//     } catch (error) {\n//       console.error(\"Error updating status:\", error);\n//     }\n//   };\n\n//   // Open Rejection Modal\n//   const handleRejectRequest = (requestId) => {\n//     setSelectedRequest(requestId);\n//     setShowRejectionModal(true);\n//   };\n\n//   // Handle Reject with Message\n//   const handleConfirmRejection = async () => {\n//     const updatedData = {\n//       status: \"REJECTED\",\n//       message: rejectionMessage,\n//     };\n\n//     try {\n//       const response = await fetch(\n//         `http://localhost:8085/waste-details/update/${selectedRequest}`,\n//         {\n//           method: \"PUT\",\n//           headers: { \"Content-Type\": \"application/json\" },\n//           body: JSON.stringify(updatedData),\n//         }\n//       );\n\n//       if (response.ok) {\n//         setRequests((prevRequests) =>\n//           prevRequests.map((request) =>\n//             request.id === selectedRequest\n//               ? { ...request, ...updatedData }\n//               : request\n//           )\n//         );\n//         setShowRejectionModal(false);\n//       } else {\n//         console.error(\"Error rejecting request\");\n//       }\n//     } catch (error) {\n//       console.error(\"Error rejecting request:\", error);\n//     }\n//   };\n\n//   // Filter Requests\n//   const filteredRequests = requests.filter((request) => {\n//     if (filter === \"ALL\") return true;\n//     if (filter === \"NEW\")\n//       return !request.status || request.status === \"PENDING\";\n//     if (filter === \"SCHEDULED\") return request.status === \"ACCEPTED\";\n//     if (filter === \"REJECTED\") return request.status === \"REJECTED\";\n//     if (filter === \"COLLECTED\") return request.status === \"COLLECTED\";\n//     return true;\n//   });\n\n//   return (\n//     <div className=\"container\">\n//       <div className=\"processing-status-container\">\n//         <h1>Processing Status</h1>\n//         <p>Track the status of ongoing waste processing.</p>\n\n//         <div className=\"filter-buttons mb-3\">\n//           {/* <Button variant=\"secondary\" onClick={() => setFilter(\"ALL\")}>All</Button> */}\n//           <Button\n//             variant=\"info\"\n//             onClick={() => setFilter(\"NEW\")}\n//             className=\"ms-2\"\n//           >\n//             New Requests\n//           </Button>\n//           <Button\n//             variant=\"success\"\n//             onClick={() => setFilter(\"SCHEDULED\")}\n//             className=\"ms-2\"\n//           >\n//             Scheduled\n//           </Button>\n//           <Button\n//             variant=\"danger\"\n//             onClick={() => setFilter(\"REJECTED\")}\n//             className=\"ms-2\"\n//           >\n//             Rejected\n//           </Button>\n//           <Button\n//             variant=\"primary\"\n//             onClick={() => setFilter(\"COLLECTED\")}\n//             className=\"ms-2\"\n//           >\n//             Collected\n//           </Button>\n//         </div>\n\n//         <h3>Waste Status</h3>\n//         <div className=\"requests-list\">\n//           {filteredRequests.length === 0 ? (\n//             <p>No requests available</p>\n//           ) : (\n//             filteredRequests.map((request) => (\n//               <Card key={request.id} className=\"request-card mb-3\">\n//                 <Card.Img\n//                   variant=\"top\"\n//                   src={request.imagePath}\n//                   alt={`${request.wasteType} image`}\n//                   className=\"card-image p-2 rounded-4\"\n//                 />\n//                 <Card.Body>\n//                   <Row>\n//                     <Col md={6}>\n//                       <p>\n//                         <strong>Name:</strong> {request.name}\n//                       </p>\n//                       <p>\n//                         <strong>Waste Type:</strong> {request.wasteType}\n//                       </p>\n//                       <p>\n//                         <strong>Address:</strong> {request.address}\n//                       </p>\n//                       <p>\n//                         <strong>Date Created:</strong>{\" \"}\n//                         {new Date(request.createdAt).toLocaleDateString()}\n//                       </p>\n//                       <p>\n//                         <strong>Date Pickup:</strong>{request.pickupDate}\n//                       </p>\n//                     </Col>\n//                     <Col md={6}>\n//                       {request.status === \"COLLECTED\" && (\n//                         <>\n//                           <p>\n//                             <strong>Waste ID:</strong> {request.id}\n//                           </p>{\" \"}\n//                           {/* Display Farmer ID */}\n//                           <p>\n//                             <strong>Status:</strong> {request.status}\n//                           </p>\n//                         </>\n//                       )}\n//                       {request.status === \"ACCEPTED\" && (\n//                         <>\n//                           <p><strong>Waste ID:</strong> {request.id}</p> \n//                             <strong>Status:</strong> {request.status}<br />\n//                             {/* <strong>Pickup Date:</strong> {request.pickupDate}<br /> */}\n//                             <strong>Message:</strong> {request.message}\n//                           <Button\n//                             variant=\"primary\"\n//                             onClick={async () => {\n//                               const updatedData = {\n//                                 status: \"COLLECTED\",\n//                               };\n\n//                               try {\n//                                 const response = await fetch(\n//                                   `http://localhost:8085/waste-details/updateOnly/${request.id}`,\n//                                   {\n//                                     method: \"PUT\",\n//                                     headers: {\n//                                       \"Content-Type\": \"application/json\",\n//                                     },\n//                                     body: JSON.stringify(updatedData),\n//                                   }\n//                                 );\n\n//                                 if (response.ok) {\n//                                   setRequests((prevRequests) =>\n//                                     prevRequests.map((req) =>\n//                                       req.id === request.id\n//                                         ? { ...req, status: \"COLLECTED\" }\n//                                         : req\n//                                     )\n//                                   );\n//                                   alert(\n//                                     \"Request successfully marked as collected!\"\n//                                   );\n//                                 } else {\n//                                   console.error(\n//                                     \"Error updating request to collected\"\n//                                   );\n//                                 }\n//                               } catch (error) {\n//                                 console.error(\"Error updating status:\", error);\n//                               }\n//                             }}\n//                             className=\"mt-2\"\n//                           >\n//                             Mark as Collected\n//                           </Button>\n//                         </>\n//                       )}\n//                       {request.status === \"REJECTED\" && (\n//                         <p>\n//                           <strong>Waste ID:</strong> {request.id}\n//                           <br />\n//                           <br />\n//                           <strong>Status:</strong> {request.status} -{\" \"}\n//                           {request.message}\n//                         </p>\n//                       )}\n//                       {request.status !== \"ACCEPTED\" &&\n//                         request.status !== \"REJECTED\" &&\n//                         request.status !== \"COLLECTED\" && (\n//                           <>\n//                             <Button\n//                               variant=\"success\"\n//                               onClick={() => handleConfirmRequest(request.id)}\n//                               className=\"mt-2\"\n//                             >\n//                               Confirm\n//                             </Button>\n//                             <Button\n//                               variant=\"danger\"\n//                               onClick={() => handleRejectRequest(request.id)}\n//                               className=\"mt-2 ms-2\"\n//                             >\n//                               Reject\n//                             </Button>\n//                           </>\n//                         )}\n//                     </Col>\n//                   </Row>\n//                 </Card.Body>\n//               </Card>\n//             ))\n//           )}\n//         </div>\n//       </div>\n\n//       {/* Schedule Pickup Modal */}\n//       <Modal\n//         show={showScheduleModal}\n//         onHide={() => setShowScheduleModal(false)}\n//       >\n//         <Modal.Header closeButton>\n//           <Modal.Title>Schedule Pickup</Modal.Title>\n//         </Modal.Header>\n//         <Modal.Body>\n//           <Form.Group>\n//             <Form.Label>Pickup Date:</Form.Label>\n//             <Form.Control\n//               type=\"date\"\n//               value={pickupDate}\n//               onChange={(e) => setPickupDate(e.target.value)}\n//             />\n//           </Form.Group>\n//           <Form.Group>\n//             <Form.Label>Additional Message:</Form.Label>\n//             <Form.Control\n//               as=\"textarea\"\n//               rows={3}\n//               value={message}\n//               onChange={(e) => setMessage(e.target.value)}\n//               placeholder=\"Enter any additional message\"\n//             />\n//           </Form.Group>\n//         </Modal.Body>\n//         <Modal.Footer>\n//           <Button\n//             variant=\"secondary\"\n//             onClick={() => setShowScheduleModal(false)}\n//           >\n//             Close\n//           </Button>\n//           <Button variant=\"primary\" onClick={handleSchedulePickup}>\n//             Schedule Pickup\n//           </Button>\n//         </Modal.Footer>\n//       </Modal>\n\n//       {/* Rejection Modal */}\n//       <Modal\n//         show={showRejectionModal}\n//         onHide={() => setShowRejectionModal(false)}\n//       >\n//         <Modal.Header closeButton>\n//           <Modal.Title>Rejection Reason</Modal.Title>\n//         </Modal.Header>\n//         <Modal.Body>\n//           <Form.Group>\n//             <Form.Label>Rejection Message:</Form.Label>\n//             <Form.Control\n//               as=\"textarea\"\n//               rows={3}\n//               value={rejectionMessage}\n//               onChange={(e) => setRejectionMessage(e.target.value)}\n//               placeholder=\"Enter rejection reason\"\n//             />\n//           </Form.Group>\n//         </Modal.Body>\n//         <Modal.Footer>\n//           <Button\n//             variant=\"secondary\"\n//             onClick={() => setShowRejectionModal(false)}\n//           >\n//             Close\n//           </Button>\n//           <Button variant=\"danger\" onClick={handleConfirmRejection}>\n//             Reject\n//           </Button>\n//         </Modal.Footer>\n//       </Modal>\n//     </div>\n//   );\n// }\n\n// export default ProcessingStatus;","map":{"version":3,"names":[],"sources":["C:/Users/Lenovo/Desktop/New folder/project/src/components/Employee/ProcessingStatus.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import { Button, ListGroup, Form, Row, Col } from \"react-bootstrap\";\r\n// import axios from \"axios\";\r\n// import \"./ProcessingStatus.css\";\r\n\r\n// function ProcessingStatus() {\r\n//   const [requests, setRequests] = useState([]);\r\n//   const [pickupDate, setPickupDate] = useState(\"\");\r\n\r\n//   useEffect(() => {\r\n//     fetchRequests();\r\n//   }, []);\r\n\r\n//   const fetchRequests = async () => {\r\n//     try {\r\n//       const response = await axios.get(\"/api/waste-requests\");\r\n//       setRequests(response.data);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching requests:\", error);\r\n//     }\r\n//   };\r\n\r\n//   const handleConfirmRequest = async (requestId) => {\r\n//     try {\r\n//       await axios.put(`/api/confirm-request/${requestId}`, { status: \"confirmed\", pickupDate });\r\n//       fetchRequests();\r\n//     } catch (error) {\r\n//       console.error(\"Error confirming request:\", error);\r\n//     }\r\n//   };\r\n\r\n//   const handleRejectRequest = async (requestId) => {\r\n//     try {\r\n//       await axios.put(`/api/reject-request/${requestId}`, { status: \"rejected\" });\r\n//       fetchRequests();\r\n//     } catch (error) {\r\n//       console.error(\"Error rejecting request:\", error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"container\">\r\n//     <div className=\"processing-status-container\">\r\n//       <h1>Processing Status</h1>\r\n//       <p>Track the status of ongoing waste processing.</p>\r\n\r\n//       <h3>Waste Requests</h3>\r\n//       <ListGroup>\r\n//         {requests.length === 0 ? (\r\n//           <ListGroup.Item>No requests available</ListGroup.Item>\r\n//         ) : (\r\n//           requests.map((request) => (\r\n//             <ListGroup.Item key={request.id}>\r\n//               <Row>\r\n//                 <Col md={6}>\r\n//                   <p>Type: {request.type}</p>\r\n//                   <p>Volume: {request.volume} tons</p>\r\n//                   <p>Source: {request.source}</p>\r\n//                   <p>Date: {request.date}</p>\r\n//                 </Col>\r\n//                 <Col md={6}>\r\n//                   {request.status !== \"confirmed\" && (\r\n//                     <>\r\n//                       <Button\r\n//                         variant=\"success\"\r\n//                         onClick={() => handleConfirmRequest(request.id)}\r\n//                       >\r\n//                         Confirm\r\n//                       </Button>\r\n//                       <Button\r\n//                         variant=\"danger\"\r\n//                         onClick={() => handleRejectRequest(request.id)}\r\n//                       >\r\n//                         Reject\r\n//                       </Button>\r\n//                     </>\r\n//                   )}\r\n//                   {request.status === \"confirmed\" && (\r\n//                     <p>Pickup Scheduled for: {pickupDate}</p>\r\n//                   )}\r\n//                 </Col>\r\n//               </Row>\r\n//               {request.status === \"confirmed\" && (\r\n//                 <Row className=\"mt-3\">\r\n//                   <Col md={12}>\r\n//                     <Form.Control\r\n//                       type=\"date\"\r\n//                       value={pickupDate}\r\n//                       onChange={(e) => setPickupDate(e.target.value)}\r\n//                       placeholder=\"Schedule Pickup Date\"\r\n//                     />\r\n//                   </Col>\r\n//                 </Row>\r\n//               )}\r\n//             </ListGroup.Item>\r\n//           ))\r\n//         )}\r\n//       </ListGroup>\r\n//     </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default ProcessingStatus;\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { Button, ListGroup, Form, Row, Col, Modal, Card } from \"react-bootstrap\";\r\n// import axios from \"axios\";\r\n// import \"./ProcessingStatus.css\";\r\n\r\n// function ProcessingStatus() {\r\n//   const [requests, setRequests] = useState([]);\r\n//   const [pickupDate, setPickupDate] = useState(\"\");\r\n//   const [driverName, setDriverName] = useState(\"\");\r\n//   const [additionalInfo, setAdditionalInfo] = useState(\"\");\r\n//   const [showScheduleModal, setShowScheduleModal] = useState(false);\r\n//   const [selectedRequest, setSelectedRequest] = useState(null);\r\n//   const [rejectReason, setRejectReason] = useState(\"\");\r\n//   const [showRejectModal, setShowRejectModal] = useState(false);\r\n\r\n//   useEffect(() => {\r\n//     // Mocking API data for testing\r\n//     const mockRequests = [\r\n//       {\r\n//         id: 1,\r\n//         type: \"Plastic\",\r\n//         volume: 5,\r\n//         source: \"Farmer A\",\r\n//         date: \"2024-12-10\",\r\n//         status: \"pending\",\r\n//       },\r\n//       {\r\n//         id: 2,\r\n//         type: \"Organic\",\r\n//         volume: 3,\r\n//         source: \"Farmer B\",\r\n//         date: \"2024-12-12\",\r\n//         status: \"pending\",\r\n//       },\r\n//       {\r\n//         id: 3,\r\n//         type: \"Glass\",\r\n//         volume: 2,\r\n//         source: \"Farmer C\",\r\n//         date: \"2024-12-11\",\r\n//         status: \"confirmed\",\r\n//       },\r\n//     ];\r\n//     setRequests(mockRequests);\r\n//   }, []);\r\n\r\n//   const handleConfirmRequest = async (requestId) => {\r\n//     try {\r\n//       setRequests((prevRequests) =>\r\n//         prevRequests.map((request) =>\r\n//           request.id === requestId\r\n//             ? { ...request, status: \"confirmed\" }\r\n//             : request\r\n//         )\r\n//       );\r\n//     } catch (error) {\r\n//       console.error(\"Error confirming request:\", error);\r\n//     }\r\n//   };\r\n\r\n//   const handleRejectRequest = (requestId) => {\r\n//     setSelectedRequest(requestId);\r\n//     setShowRejectModal(true);\r\n//   };\r\n\r\n//   const handleRejectSubmit = async () => {\r\n//     try {\r\n//       setRequests((prevRequests) =>\r\n//         prevRequests.map((request) =>\r\n//           request.id === selectedRequest\r\n//             ? { ...request, status: \"rejected\", rejectReason }\r\n//             : request\r\n//         )\r\n//       );\r\n//       setShowRejectModal(false);\r\n//       setRejectReason(\"\");\r\n//     } catch (error) {\r\n//       console.error(\"Error rejecting request:\", error);\r\n//     }\r\n//   };\r\n\r\n//   const handleSchedulePickup = (requestId) => {\r\n//     setSelectedRequest(requestId);\r\n//     setShowScheduleModal(true);\r\n//   };\r\n\r\n//   const handleScheduleSubmit = async () => {\r\n//     try {\r\n//       setRequests((prevRequests) =>\r\n//         prevRequests.map((request) =>\r\n//           request.id === selectedRequest\r\n//             ? {\r\n//                 ...request,\r\n//                 status: \"pickupScheduled\",\r\n//                 pickupDate,\r\n//                 driverName,\r\n//                 additionalInfo,\r\n//               }\r\n//             : request\r\n//         )\r\n//       );\r\n//       setShowScheduleModal(false);\r\n//       setPickupDate(\"\");\r\n//       setDriverName(\"\");\r\n//       setAdditionalInfo(\"\");\r\n//     } catch (error) {\r\n//       console.error(\"Error scheduling pickup:\", error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"container\">\r\n//     <div className=\"processing-status-container\">\r\n//       <h1>Processing Status</h1>\r\n//       <p>Track the status of ongoing waste processing.</p>\r\n\r\n//       <h3>Waste Requests</h3>\r\n//       <div className=\"requests-list\">\r\n//         {requests.length === 0 ? (\r\n//           <p>No requests available</p>\r\n//         ) : (\r\n//           requests.map((request) => (\r\n//             <Card key={request.id} className=\"request-card mb-3\">\r\n//               <Card.Body>\r\n//                 <Row>\r\n//                   <Col md={6}>\r\n//                     <p><strong>Type:</strong> {request.type}</p>\r\n//                     <p><strong>Volume:</strong> {request.volume} tons</p>\r\n//                     <p><strong>Source:</strong> {request.source}</p>\r\n//                     <p><strong>Date:</strong> {request.date}</p>\r\n//                   </Col>\r\n//                   <Col md={6}>\r\n//                     {request.status === \"pending\" && (\r\n//                       <>\r\n//                         <Button\r\n//                           variant=\"success\"\r\n//                           onClick={() => handleConfirmRequest(request.id)}\r\n//                           className=\"mr-2\"\r\n//                         >\r\n//                           Confirm\r\n//                         </Button>\r\n//                         <Button\r\n//                           variant=\"danger\"\r\n//                           onClick={() => handleRejectRequest(request.id)}\r\n//                         >\r\n//                           Reject\r\n//                         </Button>\r\n//                       </>\r\n//                     )}\r\n//                     {request.status === \"confirmed\" && (\r\n//                       <>\r\n//                         <p>Pickup Scheduled for: {request.pickupDate}</p>\r\n//                         <Button\r\n//                           variant=\"primary\"\r\n//                           onClick={() => handleSchedulePickup(request.id)}\r\n//                           className=\"mt-2\"\r\n//                         >\r\n//                           Schedule Pickup\r\n//                         </Button>\r\n//                       </>\r\n//                     )}\r\n//                     {request.status === \"pickupScheduled\" && (\r\n//                       <p>\r\n//                         Pickup scheduled for: {request.pickupDate}<br />\r\n//                         <strong>Driver Name:</strong> {request.driverName}<br />\r\n//                         <strong>Additional Info:</strong> {request.additionalInfo}\r\n//                       </p>\r\n//                     )}\r\n//                     {request.status === \"rejected\" && (\r\n//                       <p><strong>Reason for Rejection:</strong> {request.rejectReason}</p>\r\n//                     )}\r\n//                   </Col>\r\n//                 </Row>\r\n//               </Card.Body>\r\n//             </Card>\r\n//           ))\r\n//         )}\r\n//       </div>\r\n//       </div>\r\n\r\n//       <Modal show={showRejectModal} onHide={() => setShowRejectModal(false)}>\r\n//         <Modal.Header closeButton>\r\n//           <Modal.Title>Reject Reason</Modal.Title>\r\n//         </Modal.Header>\r\n//         <Modal.Body>\r\n//           <Form.Group>\r\n//             <Form.Label>Provide a reason for rejection:</Form.Label>\r\n//             <Form.Control\r\n//               as=\"textarea\"\r\n//               rows={3}\r\n//               value={rejectReason}\r\n//               onChange={(e) => setRejectReason(e.target.value)}\r\n//             />\r\n//           </Form.Group>\r\n//         </Modal.Body>\r\n//         <Modal.Footer>\r\n//           <Button variant=\"secondary\" onClick={() => setShowRejectModal(false)}>\r\n//             Close\r\n//           </Button>\r\n//           <Button variant=\"danger\" onClick={handleRejectSubmit}>\r\n//             Submit Rejection\r\n//           </Button>\r\n//         </Modal.Footer>\r\n//       </Modal>\r\n\r\n//       {/* Schedule Pickup Modal */}\r\n//       <Modal show={showScheduleModal} onHide={() => setShowScheduleModal(false)}>\r\n//         <Modal.Header closeButton>\r\n//           <Modal.Title>Schedule Pickup</Modal.Title>\r\n//         </Modal.Header>\r\n//         <Modal.Body>\r\n//           <Form.Group>\r\n//             <Form.Label>Pickup Date:</Form.Label>\r\n//             <Form.Control\r\n//               type=\"date\"\r\n//               value={pickupDate}\r\n//               onChange={(e) => setPickupDate(e.target.value)}\r\n//             />\r\n//           </Form.Group>\r\n//           <Form.Group>\r\n//             <Form.Label>Driver Name:</Form.Label>\r\n//             <Form.Control\r\n//               type=\"text\"\r\n//               value={driverName}\r\n//               onChange={(e) => setDriverName(e.target.value)}\r\n//               placeholder=\"Enter driver's name\"\r\n//             />\r\n//           </Form.Group>\r\n//           <Form.Group>\r\n//             <Form.Label>Additional Information:</Form.Label>\r\n//             <Form.Control\r\n//               as=\"textarea\"\r\n//               rows={3}\r\n//               value={additionalInfo}\r\n//               onChange={(e) => setAdditionalInfo(e.target.value)}\r\n//               placeholder=\"Enter any additional info\"\r\n//             />\r\n//           </Form.Group>\r\n//         </Modal.Body>\r\n//         <Modal.Footer>\r\n//           <Button variant=\"secondary\" onClick={() => setShowScheduleModal(false)}>\r\n//             Close\r\n//           </Button>\r\n//           <Button variant=\"primary\" onClick={handleScheduleSubmit}>\r\n//             Schedule Pickup\r\n//           </Button>\r\n//         </Modal.Footer>\r\n//       </Modal>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default ProcessingStatus;\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { Button, Row, Col, Modal, Card, Form } from \"react-bootstrap\";\r\n// import \"./ProcessingStatus.css\";\r\n\r\n// function ProcessingStatus() {\r\n//   const [requests, setRequests] = useState([]);\r\n//   const [pickupDate, setPickupDate] = useState(\"\");\r\n//   const [message, setMessage] = useState(\"\");\r\n//   const [rejectionMessage, setRejectionMessage] = useState(\"\");\r\n//   const [showScheduleModal, setShowScheduleModal] = useState(false);\r\n//   const [showRejectionModal, setShowRejectionModal] = useState(false);\r\n//   const [selectedRequest, setSelectedRequest] = useState(null);\r\n//   const [filter, setFilter] = useState(\"NEW\");\r\n\r\n//   // Fetch data from API\r\n//   useEffect(() => {\r\n//     const fetchData = async () => {\r\n//       try {\r\n//         const response = await fetch(\r\n//           \"http://localhost:8085/waste-details/orders\"\r\n//         );\r\n//         const data = await response.json();\r\n//         if (Array.isArray(data)) {\r\n//           setRequests(data);\r\n//         } else {\r\n//           console.error(\"Invalid data received from API\");\r\n//         }\r\n//       } catch (error) {\r\n//         console.error(\"Error fetching data:\", error);\r\n//       }\r\n//     };\r\n//     fetchData();\r\n//   }, []);\r\n\r\n//   // Open Schedule Modal for Confirm Request\r\n//   const handleConfirmRequest = (requestId) => {\r\n//     setSelectedRequest(requestId);\r\n//     setShowScheduleModal(true);\r\n//   };\r\n\r\n//   // Handle Schedule Pickup\r\n//   const handleSchedulePickup = async () => {\r\n//     const updatedData = {\r\n//       status: \"ACCEPTED\",\r\n//       pickupDate,\r\n//       message,\r\n//     };\r\n\r\n//     try {\r\n//       const response = await fetch(\r\n//         `http://localhost:8085/waste-details/update/${selectedRequest}`,\r\n//         {\r\n//           method: \"PUT\",\r\n//           headers: { \"Content-Type\": \"application/json\" },\r\n//           body: JSON.stringify(updatedData),\r\n//         }\r\n//       );\r\n\r\n//       if (response.ok) {\r\n//         setRequests((prevRequests) =>\r\n//           prevRequests.map((request) =>\r\n//             request.id === selectedRequest\r\n//               ? { ...request, ...updatedData }\r\n//               : request\r\n//           )\r\n//         );\r\n//         setShowScheduleModal(false);\r\n//       } else {\r\n//         console.error(\"Error updating request\");\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"Error updating status:\", error);\r\n//     }\r\n//   };\r\n\r\n//   // Handle Collect Request with Confirmation Alert\r\n//   const handleCollectRequest = async (requestId) => {\r\n//     const isConfirmed = window.confirm(\r\n//       \"Are you sure you want to mark this request as collected?\"\r\n//     );\r\n//     if (!isConfirmed) return;\r\n\r\n//     const updatedData = {\r\n//       status: \"COLLECTED\",\r\n//     };\r\n\r\n//     try {\r\n//       const response = await fetch(\r\n//         `http://localhost:8085/waste-details/update/${requestId}`,\r\n//         {\r\n//           method: \"PUT\",\r\n//           headers: { \"Content-Type\": \"application/json\" },\r\n//           body: JSON.stringify(updatedData),\r\n//         }\r\n//       );\r\n\r\n//       if (response.ok) {\r\n//         setRequests((prevRequests) =>\r\n//           prevRequests.map((request) =>\r\n//             request.id === requestId ? { ...request, ...updatedData } : request\r\n//           )\r\n//         );\r\n//         alert(\"Request successfully marked as collected!\");\r\n//       } else {\r\n//         console.error(\"Error updating request to collected\");\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"Error updating status:\", error);\r\n//     }\r\n//   };\r\n\r\n//   // Open Rejection Modal\r\n//   const handleRejectRequest = (requestId) => {\r\n//     setSelectedRequest(requestId);\r\n//     setShowRejectionModal(true);\r\n//   };\r\n\r\n//   // Handle Reject with Message\r\n//   const handleConfirmRejection = async () => {\r\n//     const updatedData = {\r\n//       status: \"REJECTED\",\r\n//       message: rejectionMessage,\r\n//     };\r\n\r\n//     try {\r\n//       const response = await fetch(\r\n//         `http://localhost:8085/waste-details/update/${selectedRequest}`,\r\n//         {\r\n//           method: \"PUT\",\r\n//           headers: { \"Content-Type\": \"application/json\" },\r\n//           body: JSON.stringify(updatedData),\r\n//         }\r\n//       );\r\n\r\n//       if (response.ok) {\r\n//         setRequests((prevRequests) =>\r\n//           prevRequests.map((request) =>\r\n//             request.id === selectedRequest\r\n//               ? { ...request, ...updatedData }\r\n//               : request\r\n//           )\r\n//         );\r\n//         setShowRejectionModal(false);\r\n//       } else {\r\n//         console.error(\"Error rejecting request\");\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"Error rejecting request:\", error);\r\n//     }\r\n//   };\r\n\r\n//   // Filter Requests\r\n//   const filteredRequests = requests.filter((request) => {\r\n//     if (filter === \"ALL\") return true;\r\n//     if (filter === \"NEW\")\r\n//       return !request.status || request.status === \"PENDING\";\r\n//     if (filter === \"SCHEDULED\") return request.status === \"ACCEPTED\";\r\n//     if (filter === \"REJECTED\") return request.status === \"REJECTED\";\r\n//     if (filter === \"COLLECTED\") return request.status === \"COLLECTED\";\r\n//     return true;\r\n//   });\r\n\r\n//   return (\r\n//     <div className=\"container\">\r\n//       <div className=\"processing-status-container\">\r\n//         <h1>Processing Status</h1>\r\n//         <p>Track the status of ongoing waste processing.</p>\r\n\r\n//         <div className=\"filter-buttons mb-3\">\r\n//           {/* <Button variant=\"secondary\" onClick={() => setFilter(\"ALL\")}>All</Button> */}\r\n//           <Button\r\n//             variant=\"info\"\r\n//             onClick={() => setFilter(\"NEW\")}\r\n//             className=\"ms-2\"\r\n//           >\r\n//             New Requests\r\n//           </Button>\r\n//           <Button\r\n//             variant=\"success\"\r\n//             onClick={() => setFilter(\"SCHEDULED\")}\r\n//             className=\"ms-2\"\r\n//           >\r\n//             Scheduled\r\n//           </Button>\r\n//           <Button\r\n//             variant=\"danger\"\r\n//             onClick={() => setFilter(\"REJECTED\")}\r\n//             className=\"ms-2\"\r\n//           >\r\n//             Rejected\r\n//           </Button>\r\n//           <Button\r\n//             variant=\"primary\"\r\n//             onClick={() => setFilter(\"COLLECTED\")}\r\n//             className=\"ms-2\"\r\n//           >\r\n//             Collected\r\n//           </Button>\r\n//         </div>\r\n\r\n//         <h3>Waste Status</h3>\r\n//         <div className=\"requests-list\">\r\n//           {filteredRequests.length === 0 ? (\r\n//             <p>No requests available</p>\r\n//           ) : (\r\n//             filteredRequests.map((request) => (\r\n//               <Card key={request.id} className=\"request-card mb-3\">\r\n//                 <Card.Img\r\n//                   variant=\"top\"\r\n//                   src={request.imagePath}\r\n//                   alt={`${request.wasteType} image`}\r\n//                   className=\"card-image p-2 rounded-4\"\r\n//                 />\r\n//                 <Card.Body>\r\n//                   <Row>\r\n//                     <Col md={6}>\r\n//                       <p>\r\n//                         <strong>Name:</strong> {request.name}\r\n//                       </p>\r\n//                       <p>\r\n//                         <strong>Waste Type:</strong> {request.wasteType}\r\n//                       </p>\r\n//                       <p>\r\n//                         <strong>Address:</strong> {request.address}\r\n//                       </p>\r\n//                       <p>\r\n//                         <strong>Date Created:</strong>{\" \"}\r\n//                         {new Date(request.createdAt).toLocaleDateString()}\r\n//                       </p>\r\n//                       <p>\r\n//                         <strong>Date Pickup:</strong>{request.pickupDate}\r\n//                       </p>\r\n//                     </Col>\r\n//                     <Col md={6}>\r\n//                       {request.status === \"COLLECTED\" && (\r\n//                         <>\r\n//                           <p>\r\n//                             <strong>Waste ID:</strong> {request.id}\r\n//                           </p>{\" \"}\r\n//                           {/* Display Farmer ID */}\r\n//                           <p>\r\n//                             <strong>Status:</strong> {request.status}\r\n//                           </p>\r\n//                         </>\r\n//                       )}\r\n//                       {request.status === \"ACCEPTED\" && (\r\n//                         <>\r\n//                           <p><strong>Waste ID:</strong> {request.id}</p> \r\n//                             <strong>Status:</strong> {request.status}<br />\r\n//                             {/* <strong>Pickup Date:</strong> {request.pickupDate}<br /> */}\r\n//                             <strong>Message:</strong> {request.message}\r\n//                           <Button\r\n//                             variant=\"primary\"\r\n//                             onClick={async () => {\r\n//                               const updatedData = {\r\n//                                 status: \"COLLECTED\",\r\n//                               };\r\n\r\n//                               try {\r\n//                                 const response = await fetch(\r\n//                                   `http://localhost:8085/waste-details/updateOnly/${request.id}`,\r\n//                                   {\r\n//                                     method: \"PUT\",\r\n//                                     headers: {\r\n//                                       \"Content-Type\": \"application/json\",\r\n//                                     },\r\n//                                     body: JSON.stringify(updatedData),\r\n//                                   }\r\n//                                 );\r\n\r\n//                                 if (response.ok) {\r\n//                                   setRequests((prevRequests) =>\r\n//                                     prevRequests.map((req) =>\r\n//                                       req.id === request.id\r\n//                                         ? { ...req, status: \"COLLECTED\" }\r\n//                                         : req\r\n//                                     )\r\n//                                   );\r\n//                                   alert(\r\n//                                     \"Request successfully marked as collected!\"\r\n//                                   );\r\n//                                 } else {\r\n//                                   console.error(\r\n//                                     \"Error updating request to collected\"\r\n//                                   );\r\n//                                 }\r\n//                               } catch (error) {\r\n//                                 console.error(\"Error updating status:\", error);\r\n//                               }\r\n//                             }}\r\n//                             className=\"mt-2\"\r\n//                           >\r\n//                             Mark as Collected\r\n//                           </Button>\r\n//                         </>\r\n//                       )}\r\n//                       {request.status === \"REJECTED\" && (\r\n//                         <p>\r\n//                           <strong>Waste ID:</strong> {request.id}\r\n//                           <br />\r\n//                           <br />\r\n//                           <strong>Status:</strong> {request.status} -{\" \"}\r\n//                           {request.message}\r\n//                         </p>\r\n//                       )}\r\n//                       {request.status !== \"ACCEPTED\" &&\r\n//                         request.status !== \"REJECTED\" &&\r\n//                         request.status !== \"COLLECTED\" && (\r\n//                           <>\r\n//                             <Button\r\n//                               variant=\"success\"\r\n//                               onClick={() => handleConfirmRequest(request.id)}\r\n//                               className=\"mt-2\"\r\n//                             >\r\n//                               Confirm\r\n//                             </Button>\r\n//                             <Button\r\n//                               variant=\"danger\"\r\n//                               onClick={() => handleRejectRequest(request.id)}\r\n//                               className=\"mt-2 ms-2\"\r\n//                             >\r\n//                               Reject\r\n//                             </Button>\r\n//                           </>\r\n//                         )}\r\n//                     </Col>\r\n//                   </Row>\r\n//                 </Card.Body>\r\n//               </Card>\r\n//             ))\r\n//           )}\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* Schedule Pickup Modal */}\r\n//       <Modal\r\n//         show={showScheduleModal}\r\n//         onHide={() => setShowScheduleModal(false)}\r\n//       >\r\n//         <Modal.Header closeButton>\r\n//           <Modal.Title>Schedule Pickup</Modal.Title>\r\n//         </Modal.Header>\r\n//         <Modal.Body>\r\n//           <Form.Group>\r\n//             <Form.Label>Pickup Date:</Form.Label>\r\n//             <Form.Control\r\n//               type=\"date\"\r\n//               value={pickupDate}\r\n//               onChange={(e) => setPickupDate(e.target.value)}\r\n//             />\r\n//           </Form.Group>\r\n//           <Form.Group>\r\n//             <Form.Label>Additional Message:</Form.Label>\r\n//             <Form.Control\r\n//               as=\"textarea\"\r\n//               rows={3}\r\n//               value={message}\r\n//               onChange={(e) => setMessage(e.target.value)}\r\n//               placeholder=\"Enter any additional message\"\r\n//             />\r\n//           </Form.Group>\r\n//         </Modal.Body>\r\n//         <Modal.Footer>\r\n//           <Button\r\n//             variant=\"secondary\"\r\n//             onClick={() => setShowScheduleModal(false)}\r\n//           >\r\n//             Close\r\n//           </Button>\r\n//           <Button variant=\"primary\" onClick={handleSchedulePickup}>\r\n//             Schedule Pickup\r\n//           </Button>\r\n//         </Modal.Footer>\r\n//       </Modal>\r\n\r\n//       {/* Rejection Modal */}\r\n//       <Modal\r\n//         show={showRejectionModal}\r\n//         onHide={() => setShowRejectionModal(false)}\r\n//       >\r\n//         <Modal.Header closeButton>\r\n//           <Modal.Title>Rejection Reason</Modal.Title>\r\n//         </Modal.Header>\r\n//         <Modal.Body>\r\n//           <Form.Group>\r\n//             <Form.Label>Rejection Message:</Form.Label>\r\n//             <Form.Control\r\n//               as=\"textarea\"\r\n//               rows={3}\r\n//               value={rejectionMessage}\r\n//               onChange={(e) => setRejectionMessage(e.target.value)}\r\n//               placeholder=\"Enter rejection reason\"\r\n//             />\r\n//           </Form.Group>\r\n//         </Modal.Body>\r\n//         <Modal.Footer>\r\n//           <Button\r\n//             variant=\"secondary\"\r\n//             onClick={() => setShowRejectionModal(false)}\r\n//           >\r\n//             Close\r\n//           </Button>\r\n//           <Button variant=\"danger\" onClick={handleConfirmRejection}>\r\n//             Reject\r\n//           </Button>\r\n//         </Modal.Footer>\r\n//       </Modal>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default ProcessingStatus;\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}