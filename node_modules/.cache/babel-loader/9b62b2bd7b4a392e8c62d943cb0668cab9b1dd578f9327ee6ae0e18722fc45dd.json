{"ast":null,"code":"// import React, { useState } from \"react\";\n// import { useLocation } from \"react-router-dom\";\n// import { loadStripe } from \"@stripe/stripe-js\";\n// import { Elements, useStripe, useElements, CardElement } from \"@stripe/react-stripe-js\";\n// import axios from \"axios\";\n// import \"./PaymentPage.css\";\n\n// const stripePromise = loadStripe(\"your-publishable-key-here\");\n\n// const CheckoutForm = ({ amount }) => {\n//   const stripe = useStripe();\n//   const elements = useElements();\n//   const [loading, setLoading] = useState(false);\n//   const [message, setMessage] = useState(\"\");\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     setLoading(true);\n\n//     if (!stripe || !elements) {\n//       setMessage(\"Stripe is not ready yet.\");\n//       setLoading(false);\n//       return;\n//     }\n\n//     const cardElement = elements.getElement(CardElement);\n\n//     try {\n//       const { data } = await axios.post(\"http://localhost:5000/create-payment-intent\", { amount });\n//       const result = await stripe.confirmCardPayment(data.clientSecret, {\n//         payment_method: { card: cardElement },\n//       });\n\n//       if (result.error) {\n//         setMessage(`Payment failed: ${result.error.message}`);\n//       } else if (result.paymentIntent.status === \"succeeded\") {\n//         setMessage(\"Payment successful! Thank you for your purchase.\");\n//       }\n//     } catch {\n//       setMessage(\"An error occurred during the payment process. Please try again.\");\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//     <form className=\"payment-form\" onSubmit={handleSubmit}>\n//       <CardElement />\n//       <button type=\"submit\" disabled={!stripe || loading}>\n//         {loading ? \"Processing...\" : `Pay $${amount}`}\n//       </button>\n//       {message && (\n//         <p className={message.includes(\"successful\") ? \"success\" : \"error\"}>{message}</p>\n//       )}\n//     </form>\n//   );\n// };\n\n// const PaymentPage = () => {\n//   const location = useLocation();\n//   const { amount } = location.state || { amount: 0 };\n\n//   if (!amount || amount <= 0) {\n//     return (\n//       <div className=\"payment-page\">\n//         <h1>Error</h1>\n//         <p>Invalid payment amount. Please go back and try again.</p>\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div className=\"payment-page\">\n//       <h1>Payment Page</h1>\n//       <p>You are about to pay <strong>${amount}</strong></p>\n//       <Elements stripe={stripePromise}>\n//         <CheckoutForm amount={amount} />\n//       </Elements>\n//     </div>\n//   );\n// };\n\n// export default PaymentPage;","map":{"version":3,"names":[],"sources":["C:/Users/Lenovo/Desktop/New folder/project/src/components/pricing/PaymentPage.js"],"sourcesContent":["// import React, { useState } from \"react\";\r\n// import { useLocation } from \"react-router-dom\";\r\n// import { loadStripe } from \"@stripe/stripe-js\";\r\n// import { Elements, useStripe, useElements, CardElement } from \"@stripe/react-stripe-js\";\r\n// import axios from \"axios\";\r\n// import \"./PaymentPage.css\";\r\n\r\n// const stripePromise = loadStripe(\"your-publishable-key-here\");\r\n\r\n// const CheckoutForm = ({ amount }) => {\r\n//   const stripe = useStripe();\r\n//   const elements = useElements();\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [message, setMessage] = useState(\"\");\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     setLoading(true);\r\n\r\n//     if (!stripe || !elements) {\r\n//       setMessage(\"Stripe is not ready yet.\");\r\n//       setLoading(false);\r\n//       return;\r\n//     }\r\n\r\n//     const cardElement = elements.getElement(CardElement);\r\n\r\n//     try {\r\n//       const { data } = await axios.post(\"http://localhost:5000/create-payment-intent\", { amount });\r\n//       const result = await stripe.confirmCardPayment(data.clientSecret, {\r\n//         payment_method: { card: cardElement },\r\n//       });\r\n\r\n//       if (result.error) {\r\n//         setMessage(`Payment failed: ${result.error.message}`);\r\n//       } else if (result.paymentIntent.status === \"succeeded\") {\r\n//         setMessage(\"Payment successful! Thank you for your purchase.\");\r\n//       }\r\n//     } catch {\r\n//       setMessage(\"An error occurred during the payment process. Please try again.\");\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <form className=\"payment-form\" onSubmit={handleSubmit}>\r\n//       <CardElement />\r\n//       <button type=\"submit\" disabled={!stripe || loading}>\r\n//         {loading ? \"Processing...\" : `Pay $${amount}`}\r\n//       </button>\r\n//       {message && (\r\n//         <p className={message.includes(\"successful\") ? \"success\" : \"error\"}>{message}</p>\r\n//       )}\r\n//     </form>\r\n//   );\r\n// };\r\n\r\n// const PaymentPage = () => {\r\n//   const location = useLocation();\r\n//   const { amount } = location.state || { amount: 0 };\r\n\r\n//   if (!amount || amount <= 0) {\r\n//     return (\r\n//       <div className=\"payment-page\">\r\n//         <h1>Error</h1>\r\n//         <p>Invalid payment amount. Please go back and try again.</p>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   return (\r\n//     <div className=\"payment-page\">\r\n//       <h1>Payment Page</h1>\r\n//       <p>You are about to pay <strong>${amount}</strong></p>\r\n//       <Elements stripe={stripePromise}>\r\n//         <CheckoutForm amount={amount} />\r\n//       </Elements>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default PaymentPage;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}