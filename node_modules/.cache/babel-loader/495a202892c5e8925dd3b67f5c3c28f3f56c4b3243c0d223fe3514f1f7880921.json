{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\New folder\\\\project\\\\src\\\\components\\\\Employee\\\\ProcessingStatus.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import { Button, ListGroup, Form, Row, Col } from \"react-bootstrap\";\n// import axios from \"axios\";\n// import \"./ProcessingStatus.css\";\n\n// function ProcessingStatus() {\n//   const [requests, setRequests] = useState([]);\n//   const [pickupDate, setPickupDate] = useState(\"\");\n\n//   useEffect(() => {\n//     fetchRequests();\n//   }, []);\n\n//   const fetchRequests = async () => {\n//     try {\n//       const response = await axios.get(\"/api/waste-requests\");\n//       setRequests(response.data);\n//     } catch (error) {\n//       console.error(\"Error fetching requests:\", error);\n//     }\n//   };\n\n//   const handleConfirmRequest = async (requestId) => {\n//     try {\n//       await axios.put(`/api/confirm-request/${requestId}`, { status: \"confirmed\", pickupDate });\n//       fetchRequests();\n//     } catch (error) {\n//       console.error(\"Error confirming request:\", error);\n//     }\n//   };\n\n//   const handleRejectRequest = async (requestId) => {\n//     try {\n//       await axios.put(`/api/reject-request/${requestId}`, { status: \"rejected\" });\n//       fetchRequests();\n//     } catch (error) {\n//       console.error(\"Error rejecting request:\", error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"container\">\n//     <div className=\"processing-status-container\">\n//       <h1>Processing Status</h1>\n//       <p>Track the status of ongoing waste processing.</p>\n\n//       <h3>Waste Requests</h3>\n//       <ListGroup>\n//         {requests.length === 0 ? (\n//           <ListGroup.Item>No requests available</ListGroup.Item>\n//         ) : (\n//           requests.map((request) => (\n//             <ListGroup.Item key={request.id}>\n//               <Row>\n//                 <Col md={6}>\n//                   <p>Type: {request.type}</p>\n//                   <p>Volume: {request.volume} tons</p>\n//                   <p>Source: {request.source}</p>\n//                   <p>Date: {request.date}</p>\n//                 </Col>\n//                 <Col md={6}>\n//                   {request.status !== \"confirmed\" && (\n//                     <>\n//                       <Button\n//                         variant=\"success\"\n//                         onClick={() => handleConfirmRequest(request.id)}\n//                       >\n//                         Confirm\n//                       </Button>\n//                       <Button\n//                         variant=\"danger\"\n//                         onClick={() => handleRejectRequest(request.id)}\n//                       >\n//                         Reject\n//                       </Button>\n//                     </>\n//                   )}\n//                   {request.status === \"confirmed\" && (\n//                     <p>Pickup Scheduled for: {pickupDate}</p>\n//                   )}\n//                 </Col>\n//               </Row>\n//               {request.status === \"confirmed\" && (\n//                 <Row className=\"mt-3\">\n//                   <Col md={12}>\n//                     <Form.Control\n//                       type=\"date\"\n//                       value={pickupDate}\n//                       onChange={(e) => setPickupDate(e.target.value)}\n//                       placeholder=\"Schedule Pickup Date\"\n//                     />\n//                   </Col>\n//                 </Row>\n//               )}\n//             </ListGroup.Item>\n//           ))\n//         )}\n//       </ListGroup>\n//     </div>\n//     </div>\n//   );\n// }\n\n// export default ProcessingStatus;\n\n// import React, { useState, useEffect } from \"react\";\n// import { Button, ListGroup, Form, Row, Col, Modal, Card } from \"react-bootstrap\";\n// import axios from \"axios\";\n// import \"./ProcessingStatus.css\";\n\n// function ProcessingStatus() {\n//   const [requests, setRequests] = useState([]);\n//   const [pickupDate, setPickupDate] = useState(\"\");\n//   const [driverName, setDriverName] = useState(\"\");\n//   const [additionalInfo, setAdditionalInfo] = useState(\"\");\n//   const [showScheduleModal, setShowScheduleModal] = useState(false);\n//   const [selectedRequest, setSelectedRequest] = useState(null);\n//   const [rejectReason, setRejectReason] = useState(\"\");\n//   const [showRejectModal, setShowRejectModal] = useState(false);\n\n//   useEffect(() => {\n//     // Mocking API data for testing\n//     const mockRequests = [\n//       {\n//         id: 1,\n//         type: \"Plastic\",\n//         volume: 5,\n//         source: \"Farmer A\",\n//         date: \"2024-12-10\",\n//         status: \"pending\",\n//       },\n//       {\n//         id: 2,\n//         type: \"Organic\",\n//         volume: 3,\n//         source: \"Farmer B\",\n//         date: \"2024-12-12\",\n//         status: \"pending\",\n//       },\n//       {\n//         id: 3,\n//         type: \"Glass\",\n//         volume: 2,\n//         source: \"Farmer C\",\n//         date: \"2024-12-11\",\n//         status: \"confirmed\",\n//       },\n//     ];\n//     setRequests(mockRequests);\n//   }, []);\n\n//   const handleConfirmRequest = async (requestId) => {\n//     try {\n//       setRequests((prevRequests) =>\n//         prevRequests.map((request) =>\n//           request.id === requestId\n//             ? { ...request, status: \"confirmed\" }\n//             : request\n//         )\n//       );\n//     } catch (error) {\n//       console.error(\"Error confirming request:\", error);\n//     }\n//   };\n\n//   const handleRejectRequest = (requestId) => {\n//     setSelectedRequest(requestId);\n//     setShowRejectModal(true);\n//   };\n\n//   const handleRejectSubmit = async () => {\n//     try {\n//       setRequests((prevRequests) =>\n//         prevRequests.map((request) =>\n//           request.id === selectedRequest\n//             ? { ...request, status: \"rejected\", rejectReason }\n//             : request\n//         )\n//       );\n//       setShowRejectModal(false);\n//       setRejectReason(\"\");\n//     } catch (error) {\n//       console.error(\"Error rejecting request:\", error);\n//     }\n//   };\n\n//   const handleSchedulePickup = (requestId) => {\n//     setSelectedRequest(requestId);\n//     setShowScheduleModal(true);\n//   };\n\n//   const handleScheduleSubmit = async () => {\n//     try {\n//       setRequests((prevRequests) =>\n//         prevRequests.map((request) =>\n//           request.id === selectedRequest\n//             ? {\n//                 ...request,\n//                 status: \"pickupScheduled\",\n//                 pickupDate,\n//                 driverName,\n//                 additionalInfo,\n//               }\n//             : request\n//         )\n//       );\n//       setShowScheduleModal(false);\n//       setPickupDate(\"\");\n//       setDriverName(\"\");\n//       setAdditionalInfo(\"\");\n//     } catch (error) {\n//       console.error(\"Error scheduling pickup:\", error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"container\">\n//     <div className=\"processing-status-container\">\n//       <h1>Processing Status</h1>\n//       <p>Track the status of ongoing waste processing.</p>\n\n//       <h3>Waste Requests</h3>\n//       <div className=\"requests-list\">\n//         {requests.length === 0 ? (\n//           <p>No requests available</p>\n//         ) : (\n//           requests.map((request) => (\n//             <Card key={request.id} className=\"request-card mb-3\">\n//               <Card.Body>\n//                 <Row>\n//                   <Col md={6}>\n//                     <p><strong>Type:</strong> {request.type}</p>\n//                     <p><strong>Volume:</strong> {request.volume} tons</p>\n//                     <p><strong>Source:</strong> {request.source}</p>\n//                     <p><strong>Date:</strong> {request.date}</p>\n//                   </Col>\n//                   <Col md={6}>\n//                     {request.status === \"pending\" && (\n//                       <>\n//                         <Button\n//                           variant=\"success\"\n//                           onClick={() => handleConfirmRequest(request.id)}\n//                           className=\"mr-2\"\n//                         >\n//                           Confirm\n//                         </Button>\n//                         <Button\n//                           variant=\"danger\"\n//                           onClick={() => handleRejectRequest(request.id)}\n//                         >\n//                           Reject\n//                         </Button>\n//                       </>\n//                     )}\n//                     {request.status === \"confirmed\" && (\n//                       <>\n//                         <p>Pickup Scheduled for: {request.pickupDate}</p>\n//                         <Button\n//                           variant=\"primary\"\n//                           onClick={() => handleSchedulePickup(request.id)}\n//                           className=\"mt-2\"\n//                         >\n//                           Schedule Pickup\n//                         </Button>\n//                       </>\n//                     )}\n//                     {request.status === \"pickupScheduled\" && (\n//                       <p>\n//                         Pickup scheduled for: {request.pickupDate}<br />\n//                         <strong>Driver Name:</strong> {request.driverName}<br />\n//                         <strong>Additional Info:</strong> {request.additionalInfo}\n//                       </p>\n//                     )}\n//                     {request.status === \"rejected\" && (\n//                       <p><strong>Reason for Rejection:</strong> {request.rejectReason}</p>\n//                     )}\n//                   </Col>\n//                 </Row>\n//               </Card.Body>\n//             </Card>\n//           ))\n//         )}\n//       </div>\n//       </div>\n\n//       <Modal show={showRejectModal} onHide={() => setShowRejectModal(false)}>\n//         <Modal.Header closeButton>\n//           <Modal.Title>Reject Reason</Modal.Title>\n//         </Modal.Header>\n//         <Modal.Body>\n//           <Form.Group>\n//             <Form.Label>Provide a reason for rejection:</Form.Label>\n//             <Form.Control\n//               as=\"textarea\"\n//               rows={3}\n//               value={rejectReason}\n//               onChange={(e) => setRejectReason(e.target.value)}\n//             />\n//           </Form.Group>\n//         </Modal.Body>\n//         <Modal.Footer>\n//           <Button variant=\"secondary\" onClick={() => setShowRejectModal(false)}>\n//             Close\n//           </Button>\n//           <Button variant=\"danger\" onClick={handleRejectSubmit}>\n//             Submit Rejection\n//           </Button>\n//         </Modal.Footer>\n//       </Modal>\n\n//       {/* Schedule Pickup Modal */}\n//       <Modal show={showScheduleModal} onHide={() => setShowScheduleModal(false)}>\n//         <Modal.Header closeButton>\n//           <Modal.Title>Schedule Pickup</Modal.Title>\n//         </Modal.Header>\n//         <Modal.Body>\n//           <Form.Group>\n//             <Form.Label>Pickup Date:</Form.Label>\n//             <Form.Control\n//               type=\"date\"\n//               value={pickupDate}\n//               onChange={(e) => setPickupDate(e.target.value)}\n//             />\n//           </Form.Group>\n//           <Form.Group>\n//             <Form.Label>Driver Name:</Form.Label>\n//             <Form.Control\n//               type=\"text\"\n//               value={driverName}\n//               onChange={(e) => setDriverName(e.target.value)}\n//               placeholder=\"Enter driver's name\"\n//             />\n//           </Form.Group>\n//           <Form.Group>\n//             <Form.Label>Additional Information:</Form.Label>\n//             <Form.Control\n//               as=\"textarea\"\n//               rows={3}\n//               value={additionalInfo}\n//               onChange={(e) => setAdditionalInfo(e.target.value)}\n//               placeholder=\"Enter any additional info\"\n//             />\n//           </Form.Group>\n//         </Modal.Body>\n//         <Modal.Footer>\n//           <Button variant=\"secondary\" onClick={() => setShowScheduleModal(false)}>\n//             Close\n//           </Button>\n//           <Button variant=\"primary\" onClick={handleScheduleSubmit}>\n//             Schedule Pickup\n//           </Button>\n//         </Modal.Footer>\n//       </Modal>\n//     </div>\n//   );\n// }\n\n// export default ProcessingStatus;\n\nimport React, { useState, useEffect } from \"react\";\nimport { Button, Row, Col, Modal, Card, Form } from \"react-bootstrap\";\nimport img1 from './img1.jpg';\nimport img2 from './img2.jpg';\nimport \"./ProcessingStatus.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ProcessingStatus() {\n  _s();\n  const [requests, setRequests] = useState([]);\n  const [pickupDate, setPickupDate] = useState(\"\");\n  const [driverName, setDriverName] = useState(\"\");\n  const [additionalInfo, setAdditionalInfo] = useState(\"\");\n  const [showScheduleModal, setShowScheduleModal] = useState(false);\n  const [selectedRequest, setSelectedRequest] = useState(null);\n  const [rejectReason, setRejectReason] = useState(\"\");\n  const [showRejectModal, setShowRejectModal] = useState(false);\n  useEffect(() => {\n    const mockRequests = [{\n      id: 1,\n      type: \"Plastic\",\n      volume: 5,\n      source: \"Green Valley Farms\",\n      date: \"2024-12-10\",\n      status: \"pending\",\n      image: img1 // Imported image\n    }, {\n      id: 2,\n      type: \"Organic\",\n      volume: 3,\n      source: \"Sunnydale Orchards\",\n      date: \"2024-12-12\",\n      status: \"pending\",\n      image: img1 // Imported image\n    }, {\n      id: 3,\n      type: \"Glass\",\n      volume: 2,\n      source: \"Evergreen Plantation\",\n      date: \"2024-12-11\",\n      status: \"confirmed\",\n      image: img2 // Imported image\n    }];\n    setRequests(mockRequests);\n  }, []);\n  const handleConfirmRequest = async requestId => {\n    setRequests(prevRequests => prevRequests.map(request => request.id === requestId ? {\n      ...request,\n      status: \"confirmed\"\n    } : request));\n  };\n  const handleRejectRequest = requestId => {\n    setSelectedRequest(requestId);\n    setShowRejectModal(true);\n  };\n  const handleRejectSubmit = async () => {\n    setRequests(prevRequests => prevRequests.map(request => request.id === selectedRequest ? {\n      ...request,\n      status: \"rejected\",\n      rejectReason\n    } : request));\n    setShowRejectModal(false);\n    setRejectReason(\"\");\n  };\n  const handleSchedulePickup = requestId => {\n    setSelectedRequest(requestId);\n    setShowScheduleModal(true);\n  };\n  const handleScheduleSubmit = async () => {\n    setRequests(prevRequests => prevRequests.map(request => request.id === selectedRequest ? {\n      ...request,\n      status: \"pickupScheduled\",\n      pickupDate,\n      driverName,\n      additionalInfo\n    } : request));\n    setShowScheduleModal(false);\n    setPickupDate(\"\");\n    setDriverName(\"\");\n    setAdditionalInfo(\"\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"processing-status-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Processing Status\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Track the status of ongoing waste processing.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 471,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Waste Requests\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 473,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"requests-list\",\n        children: requests.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No requests available\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 476,\n          columnNumber: 13\n        }, this) : requests.map(request => /*#__PURE__*/_jsxDEV(Card, {\n          className: \"request-card mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(Card.Img, {\n            variant: \"top\",\n            src: request.image,\n            alt: `${request.type} image`,\n            className: \"card-image p-5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 480,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n            children: /*#__PURE__*/_jsxDEV(Row, {\n              children: [/*#__PURE__*/_jsxDEV(Col, {\n                md: 6,\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Type:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 489,\n                    columnNumber: 26\n                  }, this), \" \", request.type]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 489,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Volume:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 490,\n                    columnNumber: 26\n                  }, this), \" \", request.volume, \" tons\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 490,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Source:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 491,\n                    columnNumber: 26\n                  }, this), \" \", request.source]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 491,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Date:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 492,\n                    columnNumber: 26\n                  }, this), \" \", request.date]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 492,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 488,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 6,\n                children: [request.status === \"pending\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(Button, {\n                    variant: \"success\",\n                    onClick: () => handleConfirmRequest(request.id),\n                    className: \"mr-2\",\n                    children: \"Confirm\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 497,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(Button, {\n                    variant: \"danger\",\n                    onClick: () => handleRejectRequest(request.id),\n                    children: \"Reject\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 504,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true), request.status === \"confirmed\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [\"Pickup Scheduled for: \", request.pickupDate]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 514,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(Button, {\n                    variant: \"primary\",\n                    onClick: () => handleSchedulePickup(request.id),\n                    className: \"mt-2\",\n                    children: \"Schedule Pickup\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 515,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true), request.status === \"pickupScheduled\" && /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Pickup scheduled for: \", request.pickupDate, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 526,\n                    columnNumber: 69\n                  }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Driver Name:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 527,\n                    columnNumber: 27\n                  }, this), \" \", request.driverName, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 527,\n                    columnNumber: 77\n                  }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Additional Info:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 528,\n                    columnNumber: 27\n                  }, this), \" \", request.additionalInfo]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 525,\n                  columnNumber: 25\n                }, this), request.status === \"rejected\" && /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Reason for Rejection:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 532,\n                    columnNumber: 28\n                  }, this), \" \", request.rejectReason]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 532,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 494,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 487,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 486,\n            columnNumber: 17\n          }, this)]\n        }, request.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 479,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 474,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 469,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      show: showRejectModal,\n      onHide: () => setShowRejectModal(false),\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: \"Reject Reason\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 546,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 545,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: /*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Provide a reason for rejection:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 550,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            as: \"textarea\",\n            rows: 3,\n            value: rejectReason,\n            onChange: e => setRejectReason(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 551,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 549,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 548,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"secondary\",\n          onClick: () => setShowRejectModal(false),\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 560,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"danger\",\n          onClick: handleRejectSubmit,\n          children: \"Submit Rejection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 563,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 559,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 544,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      show: showScheduleModal,\n      onHide: () => setShowScheduleModal(false),\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: \"Schedule Pickup\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 572,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 571,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Pickup Date:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 576,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"date\",\n            value: pickupDate,\n            onChange: e => setPickupDate(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 577,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 575,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Driver Name:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 584,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            value: driverName,\n            onChange: e => setDriverName(e.target.value),\n            placeholder: \"Enter driver's name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 585,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 583,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Additional Information:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 593,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            as: \"textarea\",\n            rows: 3,\n            value: additionalInfo,\n            onChange: e => setAdditionalInfo(e.target.value),\n            placeholder: \"Enter any additional info\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 594,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 592,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 574,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"secondary\",\n          onClick: () => setShowScheduleModal(false),\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 604,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          onClick: handleScheduleSubmit,\n          children: \"Schedule Pickup\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 607,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 603,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 570,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 468,\n    columnNumber: 5\n  }, this);\n}\n_s(ProcessingStatus, \"vgKUS7RSxPD8FZm09o5sJxQsGqA=\");\n_c = ProcessingStatus;\nexport default ProcessingStatus;\nvar _c;\n$RefreshReg$(_c, \"ProcessingStatus\");","map":{"version":3,"names":["React","useState","useEffect","Button","Row","Col","Modal","Card","Form","img1","img2","jsxDEV","_jsxDEV","Fragment","_Fragment","ProcessingStatus","_s","requests","setRequests","pickupDate","setPickupDate","driverName","setDriverName","additionalInfo","setAdditionalInfo","showScheduleModal","setShowScheduleModal","selectedRequest","setSelectedRequest","rejectReason","setRejectReason","showRejectModal","setShowRejectModal","mockRequests","id","type","volume","source","date","status","image","handleConfirmRequest","requestId","prevRequests","map","request","handleRejectRequest","handleRejectSubmit","handleSchedulePickup","handleScheduleSubmit","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","Img","variant","src","alt","Body","md","onClick","show","onHide","Header","closeButton","Title","Group","Label","Control","as","rows","value","onChange","e","target","Footer","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/Lenovo/Desktop/New folder/project/src/components/Employee/ProcessingStatus.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import { Button, ListGroup, Form, Row, Col } from \"react-bootstrap\";\r\n// import axios from \"axios\";\r\n// import \"./ProcessingStatus.css\";\r\n\r\n// function ProcessingStatus() {\r\n//   const [requests, setRequests] = useState([]);\r\n//   const [pickupDate, setPickupDate] = useState(\"\");\r\n\r\n//   useEffect(() => {\r\n//     fetchRequests();\r\n//   }, []);\r\n\r\n//   const fetchRequests = async () => {\r\n//     try {\r\n//       const response = await axios.get(\"/api/waste-requests\");\r\n//       setRequests(response.data);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching requests:\", error);\r\n//     }\r\n//   };\r\n\r\n//   const handleConfirmRequest = async (requestId) => {\r\n//     try {\r\n//       await axios.put(`/api/confirm-request/${requestId}`, { status: \"confirmed\", pickupDate });\r\n//       fetchRequests();\r\n//     } catch (error) {\r\n//       console.error(\"Error confirming request:\", error);\r\n//     }\r\n//   };\r\n\r\n//   const handleRejectRequest = async (requestId) => {\r\n//     try {\r\n//       await axios.put(`/api/reject-request/${requestId}`, { status: \"rejected\" });\r\n//       fetchRequests();\r\n//     } catch (error) {\r\n//       console.error(\"Error rejecting request:\", error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"container\">\r\n//     <div className=\"processing-status-container\">\r\n//       <h1>Processing Status</h1>\r\n//       <p>Track the status of ongoing waste processing.</p>\r\n\r\n//       <h3>Waste Requests</h3>\r\n//       <ListGroup>\r\n//         {requests.length === 0 ? (\r\n//           <ListGroup.Item>No requests available</ListGroup.Item>\r\n//         ) : (\r\n//           requests.map((request) => (\r\n//             <ListGroup.Item key={request.id}>\r\n//               <Row>\r\n//                 <Col md={6}>\r\n//                   <p>Type: {request.type}</p>\r\n//                   <p>Volume: {request.volume} tons</p>\r\n//                   <p>Source: {request.source}</p>\r\n//                   <p>Date: {request.date}</p>\r\n//                 </Col>\r\n//                 <Col md={6}>\r\n//                   {request.status !== \"confirmed\" && (\r\n//                     <>\r\n//                       <Button\r\n//                         variant=\"success\"\r\n//                         onClick={() => handleConfirmRequest(request.id)}\r\n//                       >\r\n//                         Confirm\r\n//                       </Button>\r\n//                       <Button\r\n//                         variant=\"danger\"\r\n//                         onClick={() => handleRejectRequest(request.id)}\r\n//                       >\r\n//                         Reject\r\n//                       </Button>\r\n//                     </>\r\n//                   )}\r\n//                   {request.status === \"confirmed\" && (\r\n//                     <p>Pickup Scheduled for: {pickupDate}</p>\r\n//                   )}\r\n//                 </Col>\r\n//               </Row>\r\n//               {request.status === \"confirmed\" && (\r\n//                 <Row className=\"mt-3\">\r\n//                   <Col md={12}>\r\n//                     <Form.Control\r\n//                       type=\"date\"\r\n//                       value={pickupDate}\r\n//                       onChange={(e) => setPickupDate(e.target.value)}\r\n//                       placeholder=\"Schedule Pickup Date\"\r\n//                     />\r\n//                   </Col>\r\n//                 </Row>\r\n//               )}\r\n//             </ListGroup.Item>\r\n//           ))\r\n//         )}\r\n//       </ListGroup>\r\n//     </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default ProcessingStatus;\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { Button, ListGroup, Form, Row, Col, Modal, Card } from \"react-bootstrap\";\r\n// import axios from \"axios\";\r\n// import \"./ProcessingStatus.css\";\r\n\r\n// function ProcessingStatus() {\r\n//   const [requests, setRequests] = useState([]);\r\n//   const [pickupDate, setPickupDate] = useState(\"\");\r\n//   const [driverName, setDriverName] = useState(\"\");\r\n//   const [additionalInfo, setAdditionalInfo] = useState(\"\");\r\n//   const [showScheduleModal, setShowScheduleModal] = useState(false);\r\n//   const [selectedRequest, setSelectedRequest] = useState(null);\r\n//   const [rejectReason, setRejectReason] = useState(\"\");\r\n//   const [showRejectModal, setShowRejectModal] = useState(false);\r\n\r\n//   useEffect(() => {\r\n//     // Mocking API data for testing\r\n//     const mockRequests = [\r\n//       {\r\n//         id: 1,\r\n//         type: \"Plastic\",\r\n//         volume: 5,\r\n//         source: \"Farmer A\",\r\n//         date: \"2024-12-10\",\r\n//         status: \"pending\",\r\n//       },\r\n//       {\r\n//         id: 2,\r\n//         type: \"Organic\",\r\n//         volume: 3,\r\n//         source: \"Farmer B\",\r\n//         date: \"2024-12-12\",\r\n//         status: \"pending\",\r\n//       },\r\n//       {\r\n//         id: 3,\r\n//         type: \"Glass\",\r\n//         volume: 2,\r\n//         source: \"Farmer C\",\r\n//         date: \"2024-12-11\",\r\n//         status: \"confirmed\",\r\n//       },\r\n//     ];\r\n//     setRequests(mockRequests);\r\n//   }, []);\r\n\r\n//   const handleConfirmRequest = async (requestId) => {\r\n//     try {\r\n//       setRequests((prevRequests) =>\r\n//         prevRequests.map((request) =>\r\n//           request.id === requestId\r\n//             ? { ...request, status: \"confirmed\" }\r\n//             : request\r\n//         )\r\n//       );\r\n//     } catch (error) {\r\n//       console.error(\"Error confirming request:\", error);\r\n//     }\r\n//   };\r\n\r\n//   const handleRejectRequest = (requestId) => {\r\n//     setSelectedRequest(requestId);\r\n//     setShowRejectModal(true);\r\n//   };\r\n\r\n//   const handleRejectSubmit = async () => {\r\n//     try {\r\n//       setRequests((prevRequests) =>\r\n//         prevRequests.map((request) =>\r\n//           request.id === selectedRequest\r\n//             ? { ...request, status: \"rejected\", rejectReason }\r\n//             : request\r\n//         )\r\n//       );\r\n//       setShowRejectModal(false);\r\n//       setRejectReason(\"\");\r\n//     } catch (error) {\r\n//       console.error(\"Error rejecting request:\", error);\r\n//     }\r\n//   };\r\n\r\n//   const handleSchedulePickup = (requestId) => {\r\n//     setSelectedRequest(requestId);\r\n//     setShowScheduleModal(true);\r\n//   };\r\n\r\n//   const handleScheduleSubmit = async () => {\r\n//     try {\r\n//       setRequests((prevRequests) =>\r\n//         prevRequests.map((request) =>\r\n//           request.id === selectedRequest\r\n//             ? {\r\n//                 ...request,\r\n//                 status: \"pickupScheduled\",\r\n//                 pickupDate,\r\n//                 driverName,\r\n//                 additionalInfo,\r\n//               }\r\n//             : request\r\n//         )\r\n//       );\r\n//       setShowScheduleModal(false);\r\n//       setPickupDate(\"\");\r\n//       setDriverName(\"\");\r\n//       setAdditionalInfo(\"\");\r\n//     } catch (error) {\r\n//       console.error(\"Error scheduling pickup:\", error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"container\">\r\n//     <div className=\"processing-status-container\">\r\n//       <h1>Processing Status</h1>\r\n//       <p>Track the status of ongoing waste processing.</p>\r\n\r\n//       <h3>Waste Requests</h3>\r\n//       <div className=\"requests-list\">\r\n//         {requests.length === 0 ? (\r\n//           <p>No requests available</p>\r\n//         ) : (\r\n//           requests.map((request) => (\r\n//             <Card key={request.id} className=\"request-card mb-3\">\r\n//               <Card.Body>\r\n//                 <Row>\r\n//                   <Col md={6}>\r\n//                     <p><strong>Type:</strong> {request.type}</p>\r\n//                     <p><strong>Volume:</strong> {request.volume} tons</p>\r\n//                     <p><strong>Source:</strong> {request.source}</p>\r\n//                     <p><strong>Date:</strong> {request.date}</p>\r\n//                   </Col>\r\n//                   <Col md={6}>\r\n//                     {request.status === \"pending\" && (\r\n//                       <>\r\n//                         <Button\r\n//                           variant=\"success\"\r\n//                           onClick={() => handleConfirmRequest(request.id)}\r\n//                           className=\"mr-2\"\r\n//                         >\r\n//                           Confirm\r\n//                         </Button>\r\n//                         <Button\r\n//                           variant=\"danger\"\r\n//                           onClick={() => handleRejectRequest(request.id)}\r\n//                         >\r\n//                           Reject\r\n//                         </Button>\r\n//                       </>\r\n//                     )}\r\n//                     {request.status === \"confirmed\" && (\r\n//                       <>\r\n//                         <p>Pickup Scheduled for: {request.pickupDate}</p>\r\n//                         <Button\r\n//                           variant=\"primary\"\r\n//                           onClick={() => handleSchedulePickup(request.id)}\r\n//                           className=\"mt-2\"\r\n//                         >\r\n//                           Schedule Pickup\r\n//                         </Button>\r\n//                       </>\r\n//                     )}\r\n//                     {request.status === \"pickupScheduled\" && (\r\n//                       <p>\r\n//                         Pickup scheduled for: {request.pickupDate}<br />\r\n//                         <strong>Driver Name:</strong> {request.driverName}<br />\r\n//                         <strong>Additional Info:</strong> {request.additionalInfo}\r\n//                       </p>\r\n//                     )}\r\n//                     {request.status === \"rejected\" && (\r\n//                       <p><strong>Reason for Rejection:</strong> {request.rejectReason}</p>\r\n//                     )}\r\n//                   </Col>\r\n//                 </Row>\r\n//               </Card.Body>\r\n//             </Card>\r\n//           ))\r\n//         )}\r\n//       </div>\r\n//       </div>\r\n\r\n      \r\n//       <Modal show={showRejectModal} onHide={() => setShowRejectModal(false)}>\r\n//         <Modal.Header closeButton>\r\n//           <Modal.Title>Reject Reason</Modal.Title>\r\n//         </Modal.Header>\r\n//         <Modal.Body>\r\n//           <Form.Group>\r\n//             <Form.Label>Provide a reason for rejection:</Form.Label>\r\n//             <Form.Control\r\n//               as=\"textarea\"\r\n//               rows={3}\r\n//               value={rejectReason}\r\n//               onChange={(e) => setRejectReason(e.target.value)}\r\n//             />\r\n//           </Form.Group>\r\n//         </Modal.Body>\r\n//         <Modal.Footer>\r\n//           <Button variant=\"secondary\" onClick={() => setShowRejectModal(false)}>\r\n//             Close\r\n//           </Button>\r\n//           <Button variant=\"danger\" onClick={handleRejectSubmit}>\r\n//             Submit Rejection\r\n//           </Button>\r\n//         </Modal.Footer>\r\n//       </Modal>\r\n\r\n//       {/* Schedule Pickup Modal */}\r\n//       <Modal show={showScheduleModal} onHide={() => setShowScheduleModal(false)}>\r\n//         <Modal.Header closeButton>\r\n//           <Modal.Title>Schedule Pickup</Modal.Title>\r\n//         </Modal.Header>\r\n//         <Modal.Body>\r\n//           <Form.Group>\r\n//             <Form.Label>Pickup Date:</Form.Label>\r\n//             <Form.Control\r\n//               type=\"date\"\r\n//               value={pickupDate}\r\n//               onChange={(e) => setPickupDate(e.target.value)}\r\n//             />\r\n//           </Form.Group>\r\n//           <Form.Group>\r\n//             <Form.Label>Driver Name:</Form.Label>\r\n//             <Form.Control\r\n//               type=\"text\"\r\n//               value={driverName}\r\n//               onChange={(e) => setDriverName(e.target.value)}\r\n//               placeholder=\"Enter driver's name\"\r\n//             />\r\n//           </Form.Group>\r\n//           <Form.Group>\r\n//             <Form.Label>Additional Information:</Form.Label>\r\n//             <Form.Control\r\n//               as=\"textarea\"\r\n//               rows={3}\r\n//               value={additionalInfo}\r\n//               onChange={(e) => setAdditionalInfo(e.target.value)}\r\n//               placeholder=\"Enter any additional info\"\r\n//             />\r\n//           </Form.Group>\r\n//         </Modal.Body>\r\n//         <Modal.Footer>\r\n//           <Button variant=\"secondary\" onClick={() => setShowScheduleModal(false)}>\r\n//             Close\r\n//           </Button>\r\n//           <Button variant=\"primary\" onClick={handleScheduleSubmit}>\r\n//             Schedule Pickup\r\n//           </Button>\r\n//         </Modal.Footer>\r\n//       </Modal>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default ProcessingStatus;\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Button, Row, Col, Modal, Card, Form } from \"react-bootstrap\";\r\nimport img1 from './img1.jpg'; \r\nimport img2 from './img2.jpg'; \r\nimport \"./ProcessingStatus.css\";\r\n\r\nfunction ProcessingStatus() {\r\n  const [requests, setRequests] = useState([]);\r\n  const [pickupDate, setPickupDate] = useState(\"\");\r\n  const [driverName, setDriverName] = useState(\"\");\r\n  const [additionalInfo, setAdditionalInfo] = useState(\"\");\r\n  const [showScheduleModal, setShowScheduleModal] = useState(false);\r\n  const [selectedRequest, setSelectedRequest] = useState(null);\r\n  const [rejectReason, setRejectReason] = useState(\"\");\r\n  const [showRejectModal, setShowRejectModal] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const mockRequests = [\r\n      {\r\n        id: 1,\r\n        type: \"Plastic\",\r\n        volume: 5,\r\n        source: \"Green Valley Farms\",\r\n        date: \"2024-12-10\",\r\n        status: \"pending\",\r\n        image: img1, // Imported image\r\n      },\r\n      {\r\n        id: 2,\r\n        type: \"Organic\",\r\n        volume: 3,\r\n        source: \"Sunnydale Orchards\",\r\n        date: \"2024-12-12\",\r\n        status: \"pending\",\r\n        image: img1, // Imported image\r\n      },\r\n      {\r\n        id: 3,\r\n        type: \"Glass\",\r\n        volume: 2,\r\n        source: \"Evergreen Plantation\",\r\n        date: \"2024-12-11\",\r\n        status: \"confirmed\",\r\n        image: img2, // Imported image\r\n      },\r\n    ];\r\n    setRequests(mockRequests);\r\n  }, []);\r\n\r\n  const handleConfirmRequest = async (requestId) => {\r\n    setRequests((prevRequests) =>\r\n      prevRequests.map((request) =>\r\n        request.id === requestId\r\n          ? { ...request, status: \"confirmed\" }\r\n          : request\r\n      )\r\n    );\r\n  };\r\n\r\n  const handleRejectRequest = (requestId) => {\r\n    setSelectedRequest(requestId);\r\n    setShowRejectModal(true);\r\n  };\r\n\r\n  const handleRejectSubmit = async () => {\r\n    setRequests((prevRequests) =>\r\n      prevRequests.map((request) =>\r\n        request.id === selectedRequest\r\n          ? { ...request, status: \"rejected\", rejectReason }\r\n          : request\r\n      )\r\n    );\r\n    setShowRejectModal(false);\r\n    setRejectReason(\"\");\r\n  };\r\n\r\n  const handleSchedulePickup = (requestId) => {\r\n    setSelectedRequest(requestId);\r\n    setShowScheduleModal(true);\r\n  };\r\n\r\n  const handleScheduleSubmit = async () => {\r\n    setRequests((prevRequests) =>\r\n      prevRequests.map((request) =>\r\n        request.id === selectedRequest\r\n          ? {\r\n              ...request,\r\n              status: \"pickupScheduled\",\r\n              pickupDate,\r\n              driverName,\r\n              additionalInfo,\r\n            }\r\n          : request\r\n      )\r\n    );\r\n    setShowScheduleModal(false);\r\n    setPickupDate(\"\");\r\n    setDriverName(\"\");\r\n    setAdditionalInfo(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"processing-status-container\">\r\n        <h1>Processing Status</h1>\r\n        <p>Track the status of ongoing waste processing.</p>\r\n\r\n        <h3>Waste Requests</h3>\r\n        <div className=\"requests-list\">\r\n          {requests.length === 0 ? (\r\n            <p>No requests available</p>\r\n          ) : (\r\n            requests.map((request) => (\r\n              <Card key={request.id} className=\"request-card mb-3\">\r\n                <Card.Img\r\n                  variant=\"top\"\r\n                  src={request.image}\r\n                  alt={`${request.type} image`}\r\n                  className=\"card-image p-5\"\r\n                />\r\n                <Card.Body>\r\n                  <Row>\r\n                    <Col md={6}>\r\n                      <p><strong>Type:</strong> {request.type}</p>\r\n                      <p><strong>Volume:</strong> {request.volume} tons</p>\r\n                      <p><strong>Source:</strong> {request.source}</p>\r\n                      <p><strong>Date:</strong> {request.date}</p>\r\n                    </Col>\r\n                    <Col md={6}>\r\n                      {request.status === \"pending\" && (\r\n                        <>\r\n                          <Button\r\n                            variant=\"success\"\r\n                            onClick={() => handleConfirmRequest(request.id)}\r\n                            className=\"mr-2\"\r\n                          >\r\n                            Confirm\r\n                          </Button>\r\n                          <Button\r\n                            variant=\"danger\"\r\n                            onClick={() => handleRejectRequest(request.id)}\r\n                          >\r\n                            Reject\r\n                          </Button>\r\n                        </>\r\n                      )}\r\n                      {request.status === \"confirmed\" && (\r\n                        <>\r\n                          <p>Pickup Scheduled for: {request.pickupDate}</p>\r\n                          <Button\r\n                            variant=\"primary\"\r\n                            onClick={() => handleSchedulePickup(request.id)}\r\n                            className=\"mt-2\"\r\n                          >\r\n                            Schedule Pickup\r\n                          </Button>\r\n                        </>\r\n                      )}\r\n                      {request.status === \"pickupScheduled\" && (\r\n                        <p>\r\n                          Pickup scheduled for: {request.pickupDate}<br />\r\n                          <strong>Driver Name:</strong> {request.driverName}<br />\r\n                          <strong>Additional Info:</strong> {request.additionalInfo}\r\n                        </p>\r\n                      )}\r\n                      {request.status === \"rejected\" && (\r\n                        <p><strong>Reason for Rejection:</strong> {request.rejectReason}</p>\r\n                      )}\r\n                    </Col>\r\n                  </Row>\r\n                </Card.Body>\r\n              </Card>\r\n            ))\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Reject Reason Modal */}\r\n      <Modal show={showRejectModal} onHide={() => setShowRejectModal(false)}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Reject Reason</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form.Group>\r\n            <Form.Label>Provide a reason for rejection:</Form.Label>\r\n            <Form.Control\r\n              as=\"textarea\"\r\n              rows={3}\r\n              value={rejectReason}\r\n              onChange={(e) => setRejectReason(e.target.value)}\r\n            />\r\n          </Form.Group>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={() => setShowRejectModal(false)}>\r\n            Close\r\n          </Button>\r\n          <Button variant=\"danger\" onClick={handleRejectSubmit}>\r\n            Submit Rejection\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n\r\n      {/* Schedule Pickup Modal */}\r\n      <Modal show={showScheduleModal} onHide={() => setShowScheduleModal(false)}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Schedule Pickup</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form.Group>\r\n            <Form.Label>Pickup Date:</Form.Label>\r\n            <Form.Control\r\n              type=\"date\"\r\n              value={pickupDate}\r\n              onChange={(e) => setPickupDate(e.target.value)}\r\n            />\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label>Driver Name:</Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              value={driverName}\r\n              onChange={(e) => setDriverName(e.target.value)}\r\n              placeholder=\"Enter driver's name\"\r\n            />\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label>Additional Information:</Form.Label>\r\n            <Form.Control\r\n              as=\"textarea\"\r\n              rows={3}\r\n              value={additionalInfo}\r\n              onChange={(e) => setAdditionalInfo(e.target.value)}\r\n              placeholder=\"Enter any additional info\"\r\n            />\r\n          </Form.Group>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={() => setShowScheduleModal(false)}>\r\n            Close\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={handleScheduleSubmit}>\r\n            Schedule Pickup\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProcessingStatus;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAKA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}