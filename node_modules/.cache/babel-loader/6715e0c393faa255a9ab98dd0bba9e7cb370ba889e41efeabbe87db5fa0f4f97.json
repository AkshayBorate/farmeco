{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\New folder\\\\project\\\\src\\\\components\\\\login\\\\Signup.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import { Link, useNavigate } from \"react-router-dom\";\n// import \"./Signup.css\";\n\n// export default function SignupPage() {\n//     const [errorMessage, setErrorMessage] = useState(\"\");\n//     const [fullName, setFullName] = useState(\"\");\n//     const [email, setEmail] = useState(\"\");\n//     const [mobileNo, setMobile] = useState(\"\");\n//     const [birthdate, setDateOfBirth] = useState(\"\");\n//     const [password, setPassword] = useState(\"\");\n//     const [confirmPassword, setConfirmPassword] = useState(\"\");\n//     const navigate = useNavigate();\n\n//     const handleSignupSuccess = (event) => {\n//         event.preventDefault();\n//         setErrorMessage(\"\");\n\n//         if (!fullName.trim() || !email.trim() || !mobileNo.trim() || !birthdate.trim() || !password.trim() || !confirmPassword.trim()) {\n//             setErrorMessage(\"All fields are required!\");\n//             return;\n//         }\n\n//         if (!/^[a-zA-Z]+(?: [a-zA-Z]+)*$/.test(fullName)) {\n//             setErrorMessage(\"Full Name must contain only letters and spaces.\");\n//             return;\n//         }\n\n//         if (!/^[6-9][0-9]{9}$/.test(mobileNo)) {\n//             setErrorMessage(\"Mobile Number must be a valid 10-digit number starting with 6-9.\");\n//             return;\n//         }\n\n//         if (!/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/.test(email)) {\n//             setErrorMessage(\"Invalid email format. Please use a correct format like example@mail.com.\");\n//             return;\n//         }\n\n//         if (!/^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$])[A-Za-z0-9@#$]{6,12}$/.test(password)) {\n//             setErrorMessage(\n//                 \"Password must be 6-12 characters long and include at least one digit, one lowercase letter, one uppercase letter, and one special character (@, #, $).\"\n//             );\n//             return;\n//         }\n\n//         if (password !== confirmPassword) {\n//             setErrorMessage(\"Passwords do not match. Please re-enter.\");\n//             return;\n//         }\n\n//         const datas = {\n//             name: fullName,\n//             email: email,\n//             mobileNo: mobileNo,\n//             birthdate: birthdate,\n//             password: password,\n//         };\n\n//         console.log(\"Data being sent to server:\", datas);\n\n//         fetch(\"http://localhost:8085/api/farmers/addUser\", {\n//             method: \"POST\",\n//             headers: {\n//                 \"Content-Type\": \"application/json\",\n//             },\n//             body: JSON.stringify(datas),\n//             credentials: \"same-origin\",\n//         })\n//             .then((response) => {\n//                 console.log(\"Response received:\", response);\n//                 if (response.status === 409) {\n//                     return response.text().then((text) => {\n//                         throw new Error(text || \"User already exists! MobileNo or Email\");\n//                     });\n//                 }\n//                 if (!response.ok) {\n//                     throw new Error(`User already exists! MobileNo or Email`);\n//                 }\n//                 return response.json();\n//             })\n//             .then((data) => {\n//                 console.log(\"User added:\", data);\n//                 alert(\"User added successfully!\");\n//                 navigate(\"/logins\");\n//             })\n//             .catch((error) => {\n//                 console.error(\"Error:\", error);\n//                 setErrorMessage(error.message);\n//             });\n//     };\n\n//     return (\n//         <>\n//             <div className=\"signup-wrapper\">\n//                 <div className=\"signup-card\">\n//                     <Link to=\"/loginc\" className=\"signup-link\">\n//                         Back\n//                     </Link>\n//                     <br />\n//                     <h2 className=\"signup-header\">Create an Account</h2>\n//                     <form className=\"signup-form\" onSubmit={handleSignupSuccess}>\n//                         {errorMessage && <p className=\"signup-error-message\">{errorMessage}</p>}\n//                         <input\n//                             className=\"signup-input-field\"\n//                             type=\"text\"\n//                             placeholder=\"Full Name\"\n//                             value={fullName}\n//                             onChange={(e) => setFullName(e.target.value)}\n//                             required\n//                         />\n//                         <input\n//                             className=\"signup-input-field\"\n//                             type=\"email\"\n//                             placeholder=\"Email\"\n//                             value={email}\n//                             onChange={(e) => setEmail(e.target.value)}\n//                             required\n//                         />\n//                         <input\n//                             className=\"signup-input-field\"\n//                             type=\"tel\"\n//                             placeholder=\"Mobile Number\"\n//                             value={mobileNo}\n//                             onChange={(e) => setMobile(e.target.value)}\n//                             required\n//                         />\n\n//                         <input\n//                             className=\"signup-input-field\"\n//                             type=\"date\"\n//                             placeholder=\"Birth Date\"\n//                             value={birthdate}\n//                             onChange={(e) => setDateOfBirth(e.target.value)}\n//                             required\n//                         />\n//                         <input\n//                             className=\"signup-input-field\"\n//                             type=\"password\"\n//                             placeholder=\"Password\"\n//                             value={password}\n//                             onChange={(e) => setPassword(e.target.value)}\n//                             required\n//                         />\n//                         <input\n//                             className=\"signup-input-field\"\n//                             type=\"password\"\n//                             placeholder=\"Confirm Password\"\n//                             value={confirmPassword}\n//                             onChange={(e) => setConfirmPassword(e.target.value)}\n//                             required\n//                         />\n//                         <button type=\"submit\" className=\"signup-btn\">\n//                             Sign Up\n//                         </button>\n//                     </form>\n//                     <div className=\"signup-footer\">\n//                         <p>\n//                             Already have an account?{\" \"}\n//                             <Link to=\"/logins\" className=\"signup-link\">\n//                                 Sign In\n//                             </Link>\n//                         </p>\n//                     </div>\n//                 </div>\n//             </div>\n//         </>\n//     );\n// }\n\n// import React, { useState } from \"react\";\n// import { Link, useNavigate } from \"react-router-dom\";\n// import \"./Signup.css\";\n\n// export default function SignupPage() {\n//   const [errorMessage, setErrorMessage] = useState(\"\");\n//   const [fullName, setFullName] = useState(\"\");\n//   const [email, setEmail] = useState(\"\");\n//   const [mobileNo, setMobile] = useState(\"\");\n//   const [birthdate, setDateOfBirth] = useState(\"\");\n//   const [password, setPassword] = useState(\"\");\n//   const [confirmPassword, setConfirmPassword] = useState(\"\");\n//   const navigate = useNavigate();\n\n//   const handleSignupSuccess = async (event) => {\n//     event.preventDefault();\n//     setErrorMessage(\"\");\n\n//     if (!fullName.trim() || !email.trim() || !mobileNo.trim() || !birthdate.trim() || !password.trim() || !confirmPassword.trim()) {\n//       setErrorMessage(\"All fields are required!\");\n//       return;\n//     }\n\n//     if (!/^[a-zA-Z]+(?: [a-zA-Z]+)*$/.test(fullName)) {\n//       setErrorMessage(\"Full Name must contain only letters and spaces.\");\n//       return;\n//     }\n\n//     if (!/^[6-9][0-9]{9}$/.test(mobileNo)) {\n//       setErrorMessage(\"Mobile Number must be a valid 10-digit number starting with 6-9.\");\n//       return;\n//     }\n\n//     if (!/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/.test(email)) {\n//       setErrorMessage(\"Invalid email format. Please use a correct format like example@mail.com.\");\n//       return;\n//     }\n\n//     if (!/^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$])[A-Za-z0-9@#$]{6,12}$/.test(password)) {\n//       setErrorMessage(\n//         \"Password must be 6-12 characters long and include at least one digit, one lowercase letter, one uppercase letter, and one special character (@, #, $).\"\n//       );\n//       return;\n//     }\n\n//     if (password !== confirmPassword) {\n//       setErrorMessage(\"Passwords do not match. Please re-enter.\");\n//       return;\n//     }\n\n//     const userData = {\n//       name: fullName,\n//       email: email,\n//       mobileNo: mobileNo,\n//       birthdate: birthdate,\n//       password: password, // No manual encryption, backend handles it\n//     };\n\n//     try {\n//       const response = await fetch(\"http://localhost:8085/api/farmers/addUser\", {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify(userData),\n//       });\n\n//       if (response.status === 409) {\n//         const message = await response.text();\n//         throw new Error(message || \"User already exists! MobileNo or Email\");\n//       }\n\n//       if (!response.ok) {\n//         throw new Error(\"Failed to create account. Please try again.\");\n//       }\n\n//       alert(\"User added successfully!\");\n//       navigate(\"/logins\");\n//     } catch (error) {\n//       setErrorMessage(error.message);\n//     }\n//   };\n\n//   return (\n//     <>\n//       <div className=\"signup-wrapper\">\n//         <div className=\"signup-card\">\n//           <Link to=\"/loginc\" className=\"signup-link\">Back</Link>\n//           <br />\n//           <h2 className=\"signup-header\">Create an Account</h2>\n//           <form className=\"signup-form\" onSubmit={handleSignupSuccess}>\n//             {errorMessage && <p className=\"signup-error-message\">{errorMessage}</p>}\n//             <input\n//               className=\"signup-input-field\"\n//               type=\"text\"\n//               placeholder=\"Full Name\"\n//               value={fullName}\n//               onChange={(e) => setFullName(e.target.value)}\n//               required\n//             />\n//             <input\n//               className=\"signup-input-field\"\n//               type=\"email\"\n//               placeholder=\"Email\"\n//               value={email}\n//               onChange={(e) => setEmail(e.target.value)}\n//               required\n//             />\n//             <input\n//               className=\"signup-input-field\"\n//               type=\"tel\"\n//               placeholder=\"Mobile Number\"\n//               value={mobileNo}\n//               onChange={(e) => setMobile(e.target.value)}\n//               required\n//             />\n//             <input\n//               className=\"signup-input-field\"\n//               type=\"date\"\n//               placeholder=\"Birth Date\"\n//               value={birthdate}\n//               onChange={(e) => setDateOfBirth(e.target.value)}\n//               required\n//             />\n//             <input\n//               className=\"signup-input-field\"\n//               type=\"password\"\n//               placeholder=\"Password\"\n//               value={password}\n//               onChange={(e) => setPassword(e.target.value)}\n//               required\n//             />\n//             <input\n//               className=\"signup-input-field\"\n//               type=\"password\"\n//               placeholder=\"Confirm Password\"\n//               value={confirmPassword}\n//               onChange={(e) => setConfirmPassword(e.target.value)}\n//               required\n//             />\n//             <button type=\"submit\" className=\"signup-btn\">Sign Up</button>\n//           </form>\n//           <div className=\"signup-footer\">\n//             <p>\n//               Already have an account?{\" \"}\n//               <Link to=\"/logins\" className=\"signup-link\">Sign In</Link>\n//             </p>\n//           </div>\n//         </div>\n//       </div>\n//     </>\n//   );\n// }\n\n// import React, { useState } from \"react\";\n// import { Link, useNavigate } from \"react-router-dom\";\n// import \"./Signup.css\";\n\n// export default function SignupPage() {\n//   const [errorMessage, setErrorMessage] = useState(\"\");\n//   const [fullName, setFullName] = useState(\"\");\n//   const [email, setEmail] = useState(\"\");\n//   const [mobileNo, setMobile] = useState(\"\");\n//   const [birthdate, setDateOfBirth] = useState(\"\");\n//   const [password, setPassword] = useState(\"\");\n//   const [confirmPassword, setConfirmPassword] = useState(\"\");\n//   const [otp, setOtp] = useState(\"\");\n//   const [showOtpField, setShowOtpField] = useState(false);\n//   const navigate = useNavigate();\n\n//   const handleSignupSuccess = async (event) => {\n//     event.preventDefault();\n//     setErrorMessage(\"\");\n\n//     if (!fullName.trim() || !email.trim() || !mobileNo.trim() || !birthdate.trim() || !password.trim() || !confirmPassword.trim()) {\n//       setErrorMessage(\"All fields are required!\");\n//       return;\n//     }\n\n//     if (!/^[a-zA-Z]+(?: [a-zA-Z]+)*$/.test(fullName)) {\n//       setErrorMessage(\"Full Name must contain only letters and spaces.\");\n//       return;\n//     }\n\n//     if (!/^[6-9][0-9]{9}$/.test(mobileNo)) {\n//       setErrorMessage(\"Mobile Number must be a valid 10-digit number starting with 6-9.\");\n//       return;\n//     }\n\n//     if (!/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/.test(email)) {\n//       setErrorMessage(\"Invalid email format. Please use a correct format like example@mail.com.\");\n//       return;\n//     }\n\n//     if (!/^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$])[A-Za-z0-9@#$]{6,12}$/.test(password)) {\n//       setErrorMessage(\n//         \"Password must be 6-12 characters long and include at least one digit, one lowercase letter, one uppercase letter, and one special character (@, #, $).\"\n//       );\n//       return;\n//     }\n\n//     if (password !== confirmPassword) {\n//       setErrorMessage(\"Passwords do not match. Please re-enter.\");\n//       return;\n//     }\n\n//     const userData = {\n//       name: fullName,\n//       email: email,\n//       mobileNo: mobileNo,\n//       birthdate: birthdate,\n//       password: password,\n//     };\n\n//     try {\n//       const response = await fetch(\"http://localhost:8085/api/farmers/addUser\", {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify(userData),\n//       });\n\n//       if (response.status === 409) {\n//         const message = await response.text();\n//         throw new Error(message || \"User already exists! MobileNo or Email\");\n//       }\n\n//       if (!response.ok) {\n//         throw new Error(\"Failed to create account. Please try again.\");\n//       }\n\n//       alert(\"User added successfully! Please verify OTP sent to your email.\");\n//       setShowOtpField(true);\n//     } catch (error) {\n//       setErrorMessage(error.message);\n//     }\n//   };\n\n//   const handleOtpVerification = async (event) => {\n//     event.preventDefault();\n//     setErrorMessage(\"\");\n\n//     if (!otp.trim()) {\n//       setErrorMessage(\"Please enter the OTP.\");\n//       return;\n//     }\n\n//     try {\n//       const response = await fetch(\"http://localhost:8085/api/farmers/verify\", {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify({ email, otp }),\n//       });\n\n//       if (!response.ok) {\n//         throw new Error(\"Invalid OTP. Please try again.\");\n//       }\n\n//       alert(\"Account verified successfully!\");\n//       navigate(\"/logins\");\n//     } catch (error) {\n//       setErrorMessage(error.message);\n//     }\n//   };\n\n//   return (\n//     <>\n//       <div className=\"signup-wrapper\">\n//         <div className=\"signup-card\">\n//           <Link to=\"/loginc\" className=\"signup-link\">Back</Link>\n//           <br />\n//           <h2 className=\"signup-header\">Create an Account</h2>\n//           {!showOtpField ? (\n//             <form className=\"signup-form\" onSubmit={handleSignupSuccess}>\n//               {errorMessage && <p className=\"signup-error-message\">{errorMessage}</p>}\n//               <input\n//                 className=\"signup-input-field\"\n//                 type=\"text\"\n//                 placeholder=\"Full Name\"\n//                 value={fullName}\n//                 onChange={(e) => setFullName(e.target.value)}\n//                 required\n//               />\n//               <input\n//                 className=\"signup-input-field\"\n//                 type=\"email\"\n//                 placeholder=\"Email\"\n//                 value={email}\n//                 onChange={(e) => setEmail(e.target.value)}\n//                 required\n//               />\n//               <input\n//                 className=\"signup-input-field\"\n//                 type=\"tel\"\n//                 placeholder=\"Mobile Number\"\n//                 value={mobileNo}\n//                 onChange={(e) => setMobile(e.target.value)}\n//                 required\n//               />\n//               <input\n//                 className=\"signup-input-field\"\n//                 type=\"date\"\n//                 placeholder=\"Birth Date\"\n//                 value={birthdate}\n//                 onChange={(e) => setDateOfBirth(e.target.value)}\n//                 required\n//               />\n//               <input\n//                 className=\"signup-input-field\"\n//                 type=\"password\"\n//                 placeholder=\"Password\"\n//                 value={password}\n//                 onChange={(e) => setPassword(e.target.value)}\n//                 required\n//               />\n//               <input\n//                 className=\"signup-input-field\"\n//                 type=\"password\"\n//                 placeholder=\"Confirm Password\"\n//                 value={confirmPassword}\n//                 onChange={(e) => setConfirmPassword(e.target.value)}\n//                 required\n//               />\n//               <button type=\"submit\" className=\"signup-btn\">Sign Up</button>\n//             </form>\n//           ) : (\n//             <form className=\"signup-form\" onSubmit={handleOtpVerification}>\n//               {errorMessage && <p className=\"signup-error-message\">{errorMessage}</p>}\n//               <input\n//                 className=\"signup-input-field\"\n//                 type=\"text\"\n//                 placeholder=\"Enter OTP\"\n//                 value={otp}\n//                 onChange={(e) => setOtp(e.target.value)}\n//                 required\n//               />\n//               <button type=\"submit\" className=\"signup-btn\">Verify OTP</button>\n//             </form>\n//           )}\n//           <div className=\"signup-footer\">\n//             <p>\n//               Already have an account? {\" \"}\n//               <Link to=\"/logins\" className=\"signup-link\">Sign In</Link>\n//             </p>\n//           </div>\n//         </div>\n//       </div>\n//     </>\n//   );\n// }\n\nimport React, { useState } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport \"./Signup.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function SignupPage() {\n  _s();\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [fullName, setFullName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [mobileNo, setMobile] = useState(\"\");\n  const [birthdate, setDateOfBirth] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [otpSent, setOtpSent] = useState(false);\n  const [otp, setOtp] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const navigate = useNavigate();\n  const handleSignupSuccess = async event => {\n    event.preventDefault();\n    setErrorMessage(\"\");\n    if (!fullName.trim() || !email.trim() || !mobileNo.trim() || !birthdate.trim() || !password.trim() || !confirmPassword.trim()) {\n      setErrorMessage(\"All fields are required!\");\n      return;\n    }\n    if (!/^[a-zA-Z]+(?: [a-zA-Z]+)*$/.test(fullName)) {\n      setErrorMessage(\"Full Name must contain only letters and spaces.\");\n      return;\n    }\n    if (!/^[6-9][0-9]{9}$/.test(mobileNo)) {\n      setErrorMessage(\"Mobile Number must be a valid 10-digit number starting with 6-9.\");\n      return;\n    }\n    if (!/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/.test(email)) {\n      setErrorMessage(\"Invalid email format. Please use a correct format like example@mail.com.\");\n      return;\n    }\n    if (!/^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$])[A-Za-z0-9@#$]{6,12}$/.test(password)) {\n      setErrorMessage(\"Password must be 6-12 characters long and include at least one digit, one lowercase letter, one uppercase letter, and one special character (@, #, $).\");\n      return;\n    }\n    if (password !== confirmPassword) {\n      setErrorMessage(\"Passwords do not match. Please re-enter.\");\n      return;\n    }\n    const userData = {\n      name: fullName,\n      email: email,\n      mobileNo: mobileNo,\n      birthdate: birthdate,\n      password: password\n    };\n    try {\n      setLoading(true);\n      const response = await fetch(\"http://localhost:8085/api/farmers/addUser\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to send OTP. Please try again.\");\n      }\n      alert(\"OTP sent to your email. Please enter it to complete registration.\");\n      setOtpSent(true);\n    } catch (error) {\n      setErrorMessage(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleOtpVerification = async event => {\n    event.preventDefault();\n    setErrorMessage(\"\");\n    if (!otp.trim()) {\n      setErrorMessage(\"Please enter the OTP.\");\n      return;\n    }\n    const verificationData = {\n      email,\n      otp\n    };\n    try {\n      setLoading(true);\n      const response = await fetch(\"http://localhost:8085/api/farmers/verify-otp\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(verificationData)\n      });\n      if (!response.ok) {\n        throw new Error(\"OTP verification failed. Please try again.\");\n      }\n      alert(\"User added successfully!\");\n      navigate(\"/logins\");\n    } catch (error) {\n      setErrorMessage(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"signup-wrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"signup-card\",\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: \"/loginc\",\n        className: \"signup-link\",\n        children: \"Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 646,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"signup-header\",\n        children: \"Create an Account\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 647,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"signup-form\",\n        onSubmit: otpSent ? handleOtpVerification : handleSignupSuccess,\n        children: [errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"signup-error-message\",\n          children: errorMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 649,\n          columnNumber: 28\n        }, this), !otpSent && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"signup-input-field\",\n            type: \"text\",\n            placeholder: \"Full Name\",\n            value: fullName,\n            onChange: e => setFullName(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 652,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"signup-input-field\",\n            type: \"email\",\n            placeholder: \"Email\",\n            value: email,\n            onChange: e => setEmail(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 660,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"signup-input-field\",\n            type: \"tel\",\n            placeholder: \"Mobile Number\",\n            value: mobileNo,\n            onChange: e => setMobile(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 668,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"signup-input-field\",\n            type: \"date\",\n            placeholder: \"Birth Date\",\n            value: birthdate,\n            onChange: e => setDateOfBirth(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 676,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"signup-input-field\",\n            type: \"password\",\n            placeholder: \"Password\",\n            value: password,\n            onChange: e => setPassword(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 684,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"signup-input-field\",\n            type: \"password\",\n            placeholder: \"Confirm Password\",\n            value: confirmPassword,\n            onChange: e => setConfirmPassword(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 692,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true), otpSent && /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"signup-input-field\",\n          type: \"text\",\n          placeholder: \"Enter OTP\",\n          value: otp,\n          onChange: e => setOtp(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 703,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"signup-btn\",\n          disabled: loading,\n          children: loading ? \"Processing...\" : otpSent ? \"Verify OTP\" : \"Sign Up\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 712,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 648,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"signup-footer\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Already have an account? \", /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/logins\",\n            className: \"signup-link\",\n            children: \"Sign In\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 718,\n            columnNumber: 38\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 717,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 716,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 645,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 644,\n    columnNumber: 5\n  }, this);\n}\n_s(SignupPage, \"27Yztp0TXgPbqLgzkHP/ALktAsA=\", false, function () {\n  return [useNavigate];\n});\n_c = SignupPage;\nvar _c;\n$RefreshReg$(_c, \"SignupPage\");","map":{"version":3,"names":["React","useState","Link","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","SignupPage","_s","errorMessage","setErrorMessage","fullName","setFullName","email","setEmail","mobileNo","setMobile","birthdate","setDateOfBirth","password","setPassword","confirmPassword","setConfirmPassword","otpSent","setOtpSent","otp","setOtp","loading","setLoading","navigate","handleSignupSuccess","event","preventDefault","trim","test","userData","name","response","fetch","method","headers","body","JSON","stringify","ok","Error","alert","error","message","handleOtpVerification","verificationData","className","children","to","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","value","onChange","e","target","required","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Lenovo/Desktop/New folder/project/src/components/login/Signup.js"],"sourcesContent":["// import React, { useState } from \"react\";\r\n// import { Link, useNavigate } from \"react-router-dom\";\r\n// import \"./Signup.css\";\r\n\r\n// export default function SignupPage() {\r\n//     const [errorMessage, setErrorMessage] = useState(\"\");\r\n//     const [fullName, setFullName] = useState(\"\");\r\n//     const [email, setEmail] = useState(\"\");\r\n//     const [mobileNo, setMobile] = useState(\"\");\r\n//     const [birthdate, setDateOfBirth] = useState(\"\");\r\n//     const [password, setPassword] = useState(\"\");\r\n//     const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n//     const navigate = useNavigate();\r\n\r\n//     const handleSignupSuccess = (event) => {\r\n//         event.preventDefault();\r\n//         setErrorMessage(\"\");\r\n\r\n//         if (!fullName.trim() || !email.trim() || !mobileNo.trim() || !birthdate.trim() || !password.trim() || !confirmPassword.trim()) {\r\n//             setErrorMessage(\"All fields are required!\");\r\n//             return;\r\n//         }\r\n\r\n//         if (!/^[a-zA-Z]+(?: [a-zA-Z]+)*$/.test(fullName)) {\r\n//             setErrorMessage(\"Full Name must contain only letters and spaces.\");\r\n//             return;\r\n//         }\r\n\r\n//         if (!/^[6-9][0-9]{9}$/.test(mobileNo)) {\r\n//             setErrorMessage(\"Mobile Number must be a valid 10-digit number starting with 6-9.\");\r\n//             return;\r\n//         }\r\n\r\n//         if (!/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/.test(email)) {\r\n//             setErrorMessage(\"Invalid email format. Please use a correct format like example@mail.com.\");\r\n//             return;\r\n//         }\r\n\r\n//         if (!/^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$])[A-Za-z0-9@#$]{6,12}$/.test(password)) {\r\n//             setErrorMessage(\r\n//                 \"Password must be 6-12 characters long and include at least one digit, one lowercase letter, one uppercase letter, and one special character (@, #, $).\"\r\n//             );\r\n//             return;\r\n//         }\r\n\r\n//         if (password !== confirmPassword) {\r\n//             setErrorMessage(\"Passwords do not match. Please re-enter.\");\r\n//             return;\r\n//         }\r\n\r\n//         const datas = {\r\n//             name: fullName,\r\n//             email: email,\r\n//             mobileNo: mobileNo,\r\n//             birthdate: birthdate,\r\n//             password: password,\r\n//         };\r\n\r\n//         console.log(\"Data being sent to server:\", datas);\r\n\r\n//         fetch(\"http://localhost:8085/api/farmers/addUser\", {\r\n//             method: \"POST\",\r\n//             headers: {\r\n//                 \"Content-Type\": \"application/json\",\r\n//             },\r\n//             body: JSON.stringify(datas),\r\n//             credentials: \"same-origin\",\r\n//         })\r\n//             .then((response) => {\r\n//                 console.log(\"Response received:\", response);\r\n//                 if (response.status === 409) {\r\n//                     return response.text().then((text) => {\r\n//                         throw new Error(text || \"User already exists! MobileNo or Email\");\r\n//                     });\r\n//                 }\r\n//                 if (!response.ok) {\r\n//                     throw new Error(`User already exists! MobileNo or Email`);\r\n//                 }\r\n//                 return response.json();\r\n//             })\r\n//             .then((data) => {\r\n//                 console.log(\"User added:\", data);\r\n//                 alert(\"User added successfully!\");\r\n//                 navigate(\"/logins\");\r\n//             })\r\n//             .catch((error) => {\r\n//                 console.error(\"Error:\", error);\r\n//                 setErrorMessage(error.message);\r\n//             });\r\n//     };\r\n\r\n//     return (\r\n//         <>\r\n//             <div className=\"signup-wrapper\">\r\n//                 <div className=\"signup-card\">\r\n//                     <Link to=\"/loginc\" className=\"signup-link\">\r\n//                         Back\r\n//                     </Link>\r\n//                     <br />\r\n//                     <h2 className=\"signup-header\">Create an Account</h2>\r\n//                     <form className=\"signup-form\" onSubmit={handleSignupSuccess}>\r\n//                         {errorMessage && <p className=\"signup-error-message\">{errorMessage}</p>}\r\n//                         <input\r\n//                             className=\"signup-input-field\"\r\n//                             type=\"text\"\r\n//                             placeholder=\"Full Name\"\r\n//                             value={fullName}\r\n//                             onChange={(e) => setFullName(e.target.value)}\r\n//                             required\r\n//                         />\r\n//                         <input\r\n//                             className=\"signup-input-field\"\r\n//                             type=\"email\"\r\n//                             placeholder=\"Email\"\r\n//                             value={email}\r\n//                             onChange={(e) => setEmail(e.target.value)}\r\n//                             required\r\n//                         />\r\n//                         <input\r\n//                             className=\"signup-input-field\"\r\n//                             type=\"tel\"\r\n//                             placeholder=\"Mobile Number\"\r\n//                             value={mobileNo}\r\n//                             onChange={(e) => setMobile(e.target.value)}\r\n//                             required\r\n//                         />\r\n                        \r\n//                         <input\r\n//                             className=\"signup-input-field\"\r\n//                             type=\"date\"\r\n//                             placeholder=\"Birth Date\"\r\n//                             value={birthdate}\r\n//                             onChange={(e) => setDateOfBirth(e.target.value)}\r\n//                             required\r\n//                         />\r\n//                         <input\r\n//                             className=\"signup-input-field\"\r\n//                             type=\"password\"\r\n//                             placeholder=\"Password\"\r\n//                             value={password}\r\n//                             onChange={(e) => setPassword(e.target.value)}\r\n//                             required\r\n//                         />\r\n//                         <input\r\n//                             className=\"signup-input-field\"\r\n//                             type=\"password\"\r\n//                             placeholder=\"Confirm Password\"\r\n//                             value={confirmPassword}\r\n//                             onChange={(e) => setConfirmPassword(e.target.value)}\r\n//                             required\r\n//                         />\r\n//                         <button type=\"submit\" className=\"signup-btn\">\r\n//                             Sign Up\r\n//                         </button>\r\n//                     </form>\r\n//                     <div className=\"signup-footer\">\r\n//                         <p>\r\n//                             Already have an account?{\" \"}\r\n//                             <Link to=\"/logins\" className=\"signup-link\">\r\n//                                 Sign In\r\n//                             </Link>\r\n//                         </p>\r\n//                     </div>\r\n//                 </div>\r\n//             </div>\r\n//         </>\r\n//     );\r\n// }\r\n\r\n\r\n\r\n// import React, { useState } from \"react\";\r\n// import { Link, useNavigate } from \"react-router-dom\";\r\n// import \"./Signup.css\";\r\n\r\n// export default function SignupPage() {\r\n//   const [errorMessage, setErrorMessage] = useState(\"\");\r\n//   const [fullName, setFullName] = useState(\"\");\r\n//   const [email, setEmail] = useState(\"\");\r\n//   const [mobileNo, setMobile] = useState(\"\");\r\n//   const [birthdate, setDateOfBirth] = useState(\"\");\r\n//   const [password, setPassword] = useState(\"\");\r\n//   const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n//   const navigate = useNavigate();\r\n\r\n//   const handleSignupSuccess = async (event) => {\r\n//     event.preventDefault();\r\n//     setErrorMessage(\"\");\r\n\r\n//     if (!fullName.trim() || !email.trim() || !mobileNo.trim() || !birthdate.trim() || !password.trim() || !confirmPassword.trim()) {\r\n//       setErrorMessage(\"All fields are required!\");\r\n//       return;\r\n//     }\r\n\r\n//     if (!/^[a-zA-Z]+(?: [a-zA-Z]+)*$/.test(fullName)) {\r\n//       setErrorMessage(\"Full Name must contain only letters and spaces.\");\r\n//       return;\r\n//     }\r\n\r\n//     if (!/^[6-9][0-9]{9}$/.test(mobileNo)) {\r\n//       setErrorMessage(\"Mobile Number must be a valid 10-digit number starting with 6-9.\");\r\n//       return;\r\n//     }\r\n\r\n//     if (!/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/.test(email)) {\r\n//       setErrorMessage(\"Invalid email format. Please use a correct format like example@mail.com.\");\r\n//       return;\r\n//     }\r\n\r\n//     if (!/^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$])[A-Za-z0-9@#$]{6,12}$/.test(password)) {\r\n//       setErrorMessage(\r\n//         \"Password must be 6-12 characters long and include at least one digit, one lowercase letter, one uppercase letter, and one special character (@, #, $).\"\r\n//       );\r\n//       return;\r\n//     }\r\n\r\n//     if (password !== confirmPassword) {\r\n//       setErrorMessage(\"Passwords do not match. Please re-enter.\");\r\n//       return;\r\n//     }\r\n\r\n//     const userData = {\r\n//       name: fullName,\r\n//       email: email,\r\n//       mobileNo: mobileNo,\r\n//       birthdate: birthdate,\r\n//       password: password, // No manual encryption, backend handles it\r\n//     };\r\n\r\n//     try {\r\n//       const response = await fetch(\"http://localhost:8085/api/farmers/addUser\", {\r\n//         method: \"POST\",\r\n//         headers: {\r\n//           \"Content-Type\": \"application/json\",\r\n//         },\r\n//         body: JSON.stringify(userData),\r\n//       });\r\n\r\n//       if (response.status === 409) {\r\n//         const message = await response.text();\r\n//         throw new Error(message || \"User already exists! MobileNo or Email\");\r\n//       }\r\n\r\n//       if (!response.ok) {\r\n//         throw new Error(\"Failed to create account. Please try again.\");\r\n//       }\r\n\r\n//       alert(\"User added successfully!\");\r\n//       navigate(\"/logins\");\r\n//     } catch (error) {\r\n//       setErrorMessage(error.message);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       <div className=\"signup-wrapper\">\r\n//         <div className=\"signup-card\">\r\n//           <Link to=\"/loginc\" className=\"signup-link\">Back</Link>\r\n//           <br />\r\n//           <h2 className=\"signup-header\">Create an Account</h2>\r\n//           <form className=\"signup-form\" onSubmit={handleSignupSuccess}>\r\n//             {errorMessage && <p className=\"signup-error-message\">{errorMessage}</p>}\r\n//             <input\r\n//               className=\"signup-input-field\"\r\n//               type=\"text\"\r\n//               placeholder=\"Full Name\"\r\n//               value={fullName}\r\n//               onChange={(e) => setFullName(e.target.value)}\r\n//               required\r\n//             />\r\n//             <input\r\n//               className=\"signup-input-field\"\r\n//               type=\"email\"\r\n//               placeholder=\"Email\"\r\n//               value={email}\r\n//               onChange={(e) => setEmail(e.target.value)}\r\n//               required\r\n//             />\r\n//             <input\r\n//               className=\"signup-input-field\"\r\n//               type=\"tel\"\r\n//               placeholder=\"Mobile Number\"\r\n//               value={mobileNo}\r\n//               onChange={(e) => setMobile(e.target.value)}\r\n//               required\r\n//             />\r\n//             <input\r\n//               className=\"signup-input-field\"\r\n//               type=\"date\"\r\n//               placeholder=\"Birth Date\"\r\n//               value={birthdate}\r\n//               onChange={(e) => setDateOfBirth(e.target.value)}\r\n//               required\r\n//             />\r\n//             <input\r\n//               className=\"signup-input-field\"\r\n//               type=\"password\"\r\n//               placeholder=\"Password\"\r\n//               value={password}\r\n//               onChange={(e) => setPassword(e.target.value)}\r\n//               required\r\n//             />\r\n//             <input\r\n//               className=\"signup-input-field\"\r\n//               type=\"password\"\r\n//               placeholder=\"Confirm Password\"\r\n//               value={confirmPassword}\r\n//               onChange={(e) => setConfirmPassword(e.target.value)}\r\n//               required\r\n//             />\r\n//             <button type=\"submit\" className=\"signup-btn\">Sign Up</button>\r\n//           </form>\r\n//           <div className=\"signup-footer\">\r\n//             <p>\r\n//               Already have an account?{\" \"}\r\n//               <Link to=\"/logins\" className=\"signup-link\">Sign In</Link>\r\n//             </p>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     </>\r\n//   );\r\n// }\r\n\r\n\r\n// import React, { useState } from \"react\";\r\n// import { Link, useNavigate } from \"react-router-dom\";\r\n// import \"./Signup.css\";\r\n\r\n// export default function SignupPage() {\r\n//   const [errorMessage, setErrorMessage] = useState(\"\");\r\n//   const [fullName, setFullName] = useState(\"\");\r\n//   const [email, setEmail] = useState(\"\");\r\n//   const [mobileNo, setMobile] = useState(\"\");\r\n//   const [birthdate, setDateOfBirth] = useState(\"\");\r\n//   const [password, setPassword] = useState(\"\");\r\n//   const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n//   const [otp, setOtp] = useState(\"\");\r\n//   const [showOtpField, setShowOtpField] = useState(false);\r\n//   const navigate = useNavigate();\r\n\r\n//   const handleSignupSuccess = async (event) => {\r\n//     event.preventDefault();\r\n//     setErrorMessage(\"\");\r\n\r\n//     if (!fullName.trim() || !email.trim() || !mobileNo.trim() || !birthdate.trim() || !password.trim() || !confirmPassword.trim()) {\r\n//       setErrorMessage(\"All fields are required!\");\r\n//       return;\r\n//     }\r\n\r\n//     if (!/^[a-zA-Z]+(?: [a-zA-Z]+)*$/.test(fullName)) {\r\n//       setErrorMessage(\"Full Name must contain only letters and spaces.\");\r\n//       return;\r\n//     }\r\n\r\n//     if (!/^[6-9][0-9]{9}$/.test(mobileNo)) {\r\n//       setErrorMessage(\"Mobile Number must be a valid 10-digit number starting with 6-9.\");\r\n//       return;\r\n//     }\r\n\r\n//     if (!/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/.test(email)) {\r\n//       setErrorMessage(\"Invalid email format. Please use a correct format like example@mail.com.\");\r\n//       return;\r\n//     }\r\n\r\n//     if (!/^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$])[A-Za-z0-9@#$]{6,12}$/.test(password)) {\r\n//       setErrorMessage(\r\n//         \"Password must be 6-12 characters long and include at least one digit, one lowercase letter, one uppercase letter, and one special character (@, #, $).\"\r\n//       );\r\n//       return;\r\n//     }\r\n\r\n//     if (password !== confirmPassword) {\r\n//       setErrorMessage(\"Passwords do not match. Please re-enter.\");\r\n//       return;\r\n//     }\r\n\r\n//     const userData = {\r\n//       name: fullName,\r\n//       email: email,\r\n//       mobileNo: mobileNo,\r\n//       birthdate: birthdate,\r\n//       password: password,\r\n//     };\r\n\r\n//     try {\r\n//       const response = await fetch(\"http://localhost:8085/api/farmers/addUser\", {\r\n//         method: \"POST\",\r\n//         headers: {\r\n//           \"Content-Type\": \"application/json\",\r\n//         },\r\n//         body: JSON.stringify(userData),\r\n//       });\r\n\r\n//       if (response.status === 409) {\r\n//         const message = await response.text();\r\n//         throw new Error(message || \"User already exists! MobileNo or Email\");\r\n//       }\r\n\r\n//       if (!response.ok) {\r\n//         throw new Error(\"Failed to create account. Please try again.\");\r\n//       }\r\n\r\n//       alert(\"User added successfully! Please verify OTP sent to your email.\");\r\n//       setShowOtpField(true);\r\n//     } catch (error) {\r\n//       setErrorMessage(error.message);\r\n//     }\r\n//   };\r\n\r\n//   const handleOtpVerification = async (event) => {\r\n//     event.preventDefault();\r\n//     setErrorMessage(\"\");\r\n\r\n//     if (!otp.trim()) {\r\n//       setErrorMessage(\"Please enter the OTP.\");\r\n//       return;\r\n//     }\r\n\r\n//     try {\r\n//       const response = await fetch(\"http://localhost:8085/api/farmers/verify\", {\r\n//         method: \"POST\",\r\n//         headers: {\r\n//           \"Content-Type\": \"application/json\",\r\n//         },\r\n//         body: JSON.stringify({ email, otp }),\r\n//       });\r\n\r\n//       if (!response.ok) {\r\n//         throw new Error(\"Invalid OTP. Please try again.\");\r\n//       }\r\n\r\n//       alert(\"Account verified successfully!\");\r\n//       navigate(\"/logins\");\r\n//     } catch (error) {\r\n//       setErrorMessage(error.message);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       <div className=\"signup-wrapper\">\r\n//         <div className=\"signup-card\">\r\n//           <Link to=\"/loginc\" className=\"signup-link\">Back</Link>\r\n//           <br />\r\n//           <h2 className=\"signup-header\">Create an Account</h2>\r\n//           {!showOtpField ? (\r\n//             <form className=\"signup-form\" onSubmit={handleSignupSuccess}>\r\n//               {errorMessage && <p className=\"signup-error-message\">{errorMessage}</p>}\r\n//               <input\r\n//                 className=\"signup-input-field\"\r\n//                 type=\"text\"\r\n//                 placeholder=\"Full Name\"\r\n//                 value={fullName}\r\n//                 onChange={(e) => setFullName(e.target.value)}\r\n//                 required\r\n//               />\r\n//               <input\r\n//                 className=\"signup-input-field\"\r\n//                 type=\"email\"\r\n//                 placeholder=\"Email\"\r\n//                 value={email}\r\n//                 onChange={(e) => setEmail(e.target.value)}\r\n//                 required\r\n//               />\r\n//               <input\r\n//                 className=\"signup-input-field\"\r\n//                 type=\"tel\"\r\n//                 placeholder=\"Mobile Number\"\r\n//                 value={mobileNo}\r\n//                 onChange={(e) => setMobile(e.target.value)}\r\n//                 required\r\n//               />\r\n//               <input\r\n//                 className=\"signup-input-field\"\r\n//                 type=\"date\"\r\n//                 placeholder=\"Birth Date\"\r\n//                 value={birthdate}\r\n//                 onChange={(e) => setDateOfBirth(e.target.value)}\r\n//                 required\r\n//               />\r\n//               <input\r\n//                 className=\"signup-input-field\"\r\n//                 type=\"password\"\r\n//                 placeholder=\"Password\"\r\n//                 value={password}\r\n//                 onChange={(e) => setPassword(e.target.value)}\r\n//                 required\r\n//               />\r\n//               <input\r\n//                 className=\"signup-input-field\"\r\n//                 type=\"password\"\r\n//                 placeholder=\"Confirm Password\"\r\n//                 value={confirmPassword}\r\n//                 onChange={(e) => setConfirmPassword(e.target.value)}\r\n//                 required\r\n//               />\r\n//               <button type=\"submit\" className=\"signup-btn\">Sign Up</button>\r\n//             </form>\r\n//           ) : (\r\n//             <form className=\"signup-form\" onSubmit={handleOtpVerification}>\r\n//               {errorMessage && <p className=\"signup-error-message\">{errorMessage}</p>}\r\n//               <input\r\n//                 className=\"signup-input-field\"\r\n//                 type=\"text\"\r\n//                 placeholder=\"Enter OTP\"\r\n//                 value={otp}\r\n//                 onChange={(e) => setOtp(e.target.value)}\r\n//                 required\r\n//               />\r\n//               <button type=\"submit\" className=\"signup-btn\">Verify OTP</button>\r\n//             </form>\r\n//           )}\r\n//           <div className=\"signup-footer\">\r\n//             <p>\r\n//               Already have an account? {\" \"}\r\n//               <Link to=\"/logins\" className=\"signup-link\">Sign In</Link>\r\n//             </p>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     </>\r\n//   );\r\n// }\r\n\r\n\r\n\r\nimport React, { useState } from \"react\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport \"./Signup.css\";\r\n\r\nexport default function SignupPage() {\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n  const [fullName, setFullName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [mobileNo, setMobile] = useState(\"\");\r\n  const [birthdate, setDateOfBirth] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n  const [otpSent, setOtpSent] = useState(false);\r\n  const [otp, setOtp] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const handleSignupSuccess = async (event) => {\r\n    event.preventDefault();\r\n    setErrorMessage(\"\");\r\n\r\n    if (!fullName.trim() || !email.trim() || !mobileNo.trim() || !birthdate.trim() || !password.trim() || !confirmPassword.trim()) {\r\n      setErrorMessage(\"All fields are required!\");\r\n      return;\r\n    }\r\n\r\n    if (!/^[a-zA-Z]+(?: [a-zA-Z]+)*$/.test(fullName)) {\r\n      setErrorMessage(\"Full Name must contain only letters and spaces.\");\r\n      return;\r\n    }\r\n\r\n    if (!/^[6-9][0-9]{9}$/.test(mobileNo)) {\r\n      setErrorMessage(\"Mobile Number must be a valid 10-digit number starting with 6-9.\");\r\n      return;\r\n    }\r\n\r\n    if (!/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/.test(email)) {\r\n      setErrorMessage(\"Invalid email format. Please use a correct format like example@mail.com.\");\r\n      return;\r\n    }\r\n\r\n    if (!/^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$])[A-Za-z0-9@#$]{6,12}$/.test(password)) {\r\n      setErrorMessage(\r\n        \"Password must be 6-12 characters long and include at least one digit, one lowercase letter, one uppercase letter, and one special character (@, #, $).\"\r\n      );\r\n      return;\r\n    }\r\n\r\n    if (password !== confirmPassword) {\r\n      setErrorMessage(\"Passwords do not match. Please re-enter.\");\r\n      return;\r\n    }\r\n\r\n    const userData = {\r\n      name: fullName,\r\n      email: email,\r\n      mobileNo: mobileNo,\r\n      birthdate: birthdate,\r\n      password: password,\r\n    };\r\n\r\n    try {\r\n      setLoading(true);\r\n      const response = await fetch(\"http://localhost:8085/api/farmers/addUser\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ email }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Failed to send OTP. Please try again.\");\r\n      }\r\n\r\n      alert(\"OTP sent to your email. Please enter it to complete registration.\");\r\n      setOtpSent(true);\r\n    } catch (error) {\r\n      setErrorMessage(error.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleOtpVerification = async (event) => {\r\n    event.preventDefault();\r\n    setErrorMessage(\"\");\r\n\r\n    if (!otp.trim()) {\r\n      setErrorMessage(\"Please enter the OTP.\");\r\n      return;\r\n    }\r\n\r\n    const verificationData = { email, otp };\r\n\r\n    try {\r\n      setLoading(true);\r\n      const response = await fetch(\"http://localhost:8085/api/farmers/verify-otp\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(verificationData),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"OTP verification failed. Please try again.\");\r\n      }\r\n\r\n      alert(\"User added successfully!\");\r\n      navigate(\"/logins\");\r\n    } catch (error) {\r\n      setErrorMessage(error.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"signup-wrapper\">\r\n      <div className=\"signup-card\">\r\n        <Link to=\"/loginc\" className=\"signup-link\">Back</Link>\r\n        <h2 className=\"signup-header\">Create an Account</h2>\r\n        <form className=\"signup-form\" onSubmit={otpSent ? handleOtpVerification : handleSignupSuccess}>\r\n          {errorMessage && <p className=\"signup-error-message\">{errorMessage}</p>}\r\n          {!otpSent && (\r\n            <>\r\n              <input\r\n                className=\"signup-input-field\"\r\n                type=\"text\"\r\n                placeholder=\"Full Name\"\r\n                value={fullName}\r\n                onChange={(e) => setFullName(e.target.value)}\r\n                required\r\n              />\r\n              <input\r\n                className=\"signup-input-field\"\r\n                type=\"email\"\r\n                placeholder=\"Email\"\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n                required\r\n              />\r\n              <input\r\n                className=\"signup-input-field\"\r\n                type=\"tel\"\r\n                placeholder=\"Mobile Number\"\r\n                value={mobileNo}\r\n                onChange={(e) => setMobile(e.target.value)}\r\n                required\r\n              />\r\n              <input\r\n                className=\"signup-input-field\"\r\n                type=\"date\"\r\n                placeholder=\"Birth Date\"\r\n                value={birthdate}\r\n                onChange={(e) => setDateOfBirth(e.target.value)}\r\n                required\r\n              />\r\n              <input\r\n                className=\"signup-input-field\"\r\n                type=\"password\"\r\n                placeholder=\"Password\"\r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n                required\r\n              />\r\n              <input\r\n                className=\"signup-input-field\"\r\n                type=\"password\"\r\n                placeholder=\"Confirm Password\"\r\n                value={confirmPassword}\r\n                onChange={(e) => setConfirmPassword(e.target.value)}\r\n                required\r\n              />\r\n            </>\r\n          )}\r\n          {otpSent && (\r\n            <input\r\n              className=\"signup-input-field\"\r\n              type=\"text\"\r\n              placeholder=\"Enter OTP\"\r\n              value={otp}\r\n              onChange={(e) => setOtp(e.target.value)}\r\n              required\r\n            />\r\n          )}\r\n          <button type=\"submit\" className=\"signup-btn\" disabled={loading}>\r\n            {loading ? \"Processing...\" : otpSent ? \"Verify OTP\" : \"Sign Up\"}\r\n          </button>\r\n        </form>\r\n        <div className=\"signup-footer\">\r\n          <p>\r\n            Already have an account? <Link to=\"/logins\" className=\"signup-link\">Sign In</Link>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}