{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\New folder\\\\project\\\\src\\\\components\\\\customer\\\\MarketplaceBuyWaste.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// function MarketplaceBuyWaste() {\n//   const [orders, setOrders] = useState([]);\n//   const [error, setError] = useState(null);\n//   const [loading, setLoading] = useState(true);\n//   const [message, setMessage] = useState(null); // Add a message state\n\n//   useEffect(() => {\n//     const fetchOrders = async () => {\n//       setLoading(true);\n//       try {\n//         const response = await axios.get('http://localhost:8085/waste-details/orders');\n\n//         if (response.data && response.data.message === \"No orders found\") {\n//           setMessage(\"No orders found\"); // Set the message\n//           setOrders([]); // Clear any existing orders\n//         } else {\n//           setOrders(response.data);\n//         }\n\n//       } catch (err) {\n//         setError(err);\n//         console.error(\"Error fetching orders:\", err);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchOrders();\n//   }, []);\n\n//   if (loading) {\n//     return <div>Loading...</div>;\n//   }\n\n//   if (error) {\n//     return <div>Error: {error.message}</div>;\n//   }\n\n//   if (message) { // Display the message if it's set\n//     return (\n//       <div className=\"order-history\">\n//         <h2>Farmer Order History</h2>\n//         <p>{message}</p> {/* Display the no orders message */}\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div className=\"order-history\">\n//       <h2>Waste Market Place</h2>\n//       <div className=\"card-container\">\n//         {orders.map(order => (\n//           <div className=\"order-card\" key={order.farmerid}>\n//             <div className=\"d-flex justify-content-center align-items-center\">\n//               {order.imagePath ? (\n//                 <img src={`http://localhost:8085/uploads/${order.imagePath}`} alt=\"Waste Image\" height=\"150px\" width=\"200px\" />\n//               ) : (\n//                 <div>No Image Available</div>\n//               )}\n//             </div>\n//             <p><strong>Name:</strong> {order.name}</p>\n//             <p><strong>Email:</strong> {order.email}</p>\n//             <p><strong>Waste Type:</strong> {order.wasteType}</p>\n//             <p><strong>Mobile No:</strong> {order.mobileNo}</p>\n//             <p><strong>Address:</strong> {order.address}</p>\n//             <p><strong>Price:</strong> {order.price}</p>\n\n//             <button type=\"button\" className=\"btn btn-danger\">Invoice</button>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default MarketplaceBuyWaste;\n\n// import React, { useEffect, useState } from \"react\";\n// import axios from \"axios\";\n\n// const MarketplaceBuyWaste = () => {\n//     const [loading, setLoading] = useState(false);\n//     const [paymentSuccess, setPaymentSuccess] = useState(false);\n//     const [orders, setOrders] = useState([]);\n//     const [error, setError] = useState(null);\n//     const [message, setMessage] = useState(null);\n\n//     useEffect(() => {\n//         const fetchOrders = async () => {\n//             setLoading(true);\n//             try {\n//                 const response = await axios.get('http://localhost:8085/marketplace/orders');\n\n//                 if (response.data && response.data.message === \"No orders found\") {\n//                     setMessage(\"No orders found\");\n//                     setOrders([]);\n//                 } else {\n//                     setOrders(response.data);\n//                 }\n\n//             } catch (err) {\n//                 setError(err);\n//                 console.error(\"Error fetching orders:\", err);\n//             } finally {\n//                 setLoading(false);\n//             }\n//         };\n\n//         fetchOrders();\n\n//         const loadRazorpay = async () => {\n//             const script = document.createElement(\"script\");\n//             script.src = \"https://checkout.razorpay.com/v1/checkout.js\";\n//             script.async = true;\n//             document.body.appendChild(script);\n\n//             script.onload = () => {\n//                 console.log(\"Razorpay loaded successfully\");\n//             };\n\n//             script.onerror = () => {\n//                 console.error(\"Failed to load Razorpay\");\n//             };\n//         };\n\n//         loadRazorpay();\n//     }, []);\n\n//     const handleBuyClick = async (order) => {\n//         const amount = order.price;\n\n//         setLoading(true);\n//         try {\n//             const { data } = await axios.post(\"http://localhost:8085/api/payment/create-order\", { amount });\n\n//             if (data.status === \"error\") {\n//                 alert(data.message || \"Failed to create order\");\n//                 setLoading(false);\n//                 return;\n//             }\n\n//             if (!data.orderId) {\n//                 alert(\"Failed to create order. Order ID missing.\");\n//                 setLoading(false);\n//                 return;\n//             }\n\n//             const options = {\n//                 key: \"rzp_test_nos2BlazNsLY8Y\", // Replace with your actual key\n//                 amount: amount * 100,\n//                 currency: \"INR\",\n//                 name: \"Your Company\",\n//                 description: `Payment for â‚¹${amount}`,\n//                 order_id: data.orderId,\n//                 handler: async function (response) {\n//                     try {\n//                         const verificationData = {\n//                             orderId: response.razorpay_order_id,\n//                             paymentId: response.razorpay_payment_id,\n//                             amount: amount,\n//                             //add farmer id here\n//                         };\n\n//                         const verificationResponse = await axios.post(\"http://localhost:8085/api/payment/verify-payment\", verificationData);\n\n//                         if (verificationResponse.data.status === \"success\") {\n//                             alert(\"Payment Successful!\");\n//                             setPaymentSuccess(true);\n//                         } else {\n//                             alert(\"Payment verification failed.\");\n//                         }\n//                     } catch (verificationError) {\n//                         console.error(\"Payment verification error:\", verificationError);\n//                         alert(\"Payment verification failed.\");\n//                     } finally {\n//                         setLoading(false);\n//                     }\n//                 },\n//                 prefill: {\n//                     name: \"John Doe\",\n//                     email: \"johndoe@example.com\",\n//                     contact: \"9876543210\",\n//                 },\n//                 theme: { color: \"#3399cc\" },\n//             };\n\n//             const razorpayInstance = new window.Razorpay(options);\n//             razorpayInstance.open();\n\n//         } catch (error) {\n//             console.error(\"Payment failed:\", error);\n//             alert(\"Payment initiation failed\");\n//             setLoading(false);\n//         }\n//     };\n\n//     return (\n//         <div>\n//             <div className=\"order-history\">\n//                 <h2>Waste Market Place</h2>\n//                 <div className=\"card-container\">\n//                     {orders.map(order => (\n//                         <div className=\"order-card\" key={order.farmerid}>\n//                             <div className=\"d-flex justify-content-center align-items-center\">\n//                                 {order.imagePath ? (\n//                                     <img src={`http://localhost:8085/uploads/${order.imagePath}`} alt=\"Waste Image\" height=\"150px\" width=\"200px\" />\n//                                 ) : (\n//                                     <div>No Image Available</div>\n//                                 )}\n//                             </div>\n//                             <p><strong>Name:</strong> {order.name}</p>\n//                             <p><strong>Email:</strong> {order.email}</p>\n//                             <p><strong>Waste Type:</strong> {order.wasteType}</p>\n//                             <p><strong>Mobile No:</strong> {order.mobileNo}</p>\n//                             <p><strong>Address:</strong> {order.address}</p>\n//                             <p><strong>Price:</strong> {order.price}</p>\n\n//                             <button\n//                                 type=\"button\"\n//                                 className=\"btn btn-danger\"\n//                                 onClick={() => handleBuyClick(order)}\n//                                 disabled={loading}\n//                             >\n//                                 {loading ? \"Processing...\" : \"Buy\"}\n//                             </button>\n//                         </div>\n//                     ))}\n//                 </div>\n//             </div>\n\n//             {paymentSuccess && <p style={{ color: \"green\" }}>Payment completed successfully!</p>}\n//         </div>\n//     );\n// };\n\n// export default MarketplaceBuyWaste;\n\n// import React, { useEffect, useState } from \"react\";\n// import axios from \"axios\";\n\n// const MarketplaceBuyWaste = () => {\n//     const [loading, setLoading] = useState(false);\n//     const [paymentSuccess, setPaymentSuccess] = useState(false);\n//     const [orders, setOrders] = useState([]);\n//     const [error, setError] = useState(null);\n//     const [message, setMessage] = useState(null);\n\n//     useEffect(() => {\n//         const fetchOrders = async () => {\n//             setLoading(true);\n//             try {\n//                 const response = await axios.get('http://localhost:8085/marketplace/orders');\n//                 if (response.data && response.data.message === \"No orders found\") {\n//                     setMessage(\"No orders found\");\n//                     setOrders([]);\n//                 } else {\n//                     setOrders(response.data);\n//                 }\n//             } catch (err) {\n//                 setError(err);\n//                 console.error(\"Error fetching orders:\", err);\n//             } finally {\n//                 setLoading(false);\n//             }\n//         };\n\n//         fetchOrders();\n//         loadRazorpay();\n//     }, []);\n\n//     const loadRazorpay = () => {\n//         const script = document.createElement(\"script\");\n//         script.src = \"https://checkout.razorpay.com/v1/checkout.js\";\n//         script.async = true;\n//         document.body.appendChild(script);\n\n//         script.onload = () => console.log(\"Razorpay loaded successfully\");\n//         script.onerror = () => console.error(\"Failed to load Razorpay\");\n//     };\n\n//     const updateOrderStatus = async (orderId) => {\n//         try {\n//             await axios.put(`http://localhost:8085/marketplace/update/${orderId}`, { isSold: true });\n//             alert(\"Order status updated successfully!\");\n//             setOrders(prevOrders => prevOrders.map(order => order.id === orderId ? { ...order, isSold: true } : order));\n//         } catch (error) {\n//             console.error(\"Error updating order status:\", error);\n//             alert(\"Failed to update order status\");\n//         }\n//     };\n\n//     const handleBuyClick = async (order) => {\n//         const amount = order.price;\n//         setLoading(true);\n//         try {\n//             const { data } = await axios.post(\"http://localhost:8085/api/payment/create-order\", { amount });\n\n//             if (!data.orderId) {\n//                 alert(\"Failed to create order. Order ID missing.\");\n//                 setLoading(false);\n//                 return;\n//             }\n\n//             const options = {\n//                 key: \"rzp_test_nos2BlazNsLY8Y\",\n//                 amount: amount * 100,\n//                 currency: \"INR\",\n//                 name: \"Your Company\",\n//                 description: `Payment for â‚¹${amount}`,\n//                 order_id: data.orderId,\n//                 handler: async function (response) {\n//                     try {\n//                         const verificationData = {\n//                             orderId: response.razorpay_order_id,\n//                             paymentId: response.razorpay_payment_id,\n//                             amount: amount,\n//                         };\n\n//                         const verificationResponse = await axios.post(\"http://localhost:8085/api/payment/verify-payment\", verificationData);\n\n//                         if (verificationResponse.data.status === \"success\") {\n//                             alert(\"Payment Successful!\");\n//                             setPaymentSuccess(true);\n//                             await updateOrderStatus(order.id); // Update isSold after successful payment\n//                         } else {\n//                             alert(\"Payment verification failed.\");\n//                         }\n//                     } catch (verificationError) {\n//                         console.error(\"Payment verification error:\", verificationError);\n//                         alert(\"Payment verification failed.\");\n//                     } finally {\n//                         setLoading(false);\n//                     }\n//                 },\n//                 prefill: {\n//                     name: \"John Doe\",\n//                     email: \"johndoe@example.com\",\n//                     contact: \"9876543210\",\n//                 },\n//                 theme: { color: \"#3399cc\" },\n//             };\n\n//             const razorpayInstance = new window.Razorpay(options);\n//             razorpayInstance.open();\n//         } catch (error) {\n//             console.error(\"Payment failed:\", error);\n//             alert(\"Payment initiation failed\");\n//             setLoading(false);\n//         }\n//     };\n\n//     return (\n//         <div>\n//             <div className=\"order-history\">\n//                 <h2>Waste Market Place</h2>\n//                 <div className=\"card-container\">\n//                     {orders.map(order => (\n//                         <div className=\"order-card\" key={order.id}>\n//                             <div className=\"d-flex justify-content-center align-items-center\">\n//                                 {order.imagePath ? (\n//                                     <img src={`http://localhost:8085/uploads/${order.imagePath}`} alt=\"Waste\" height=\"150px\" width=\"200px\" />\n//                                 ) : (\n//                                     <div>No Image Available</div>\n//                                 )}\n//                             </div>\n//                             <p><strong>Name:</strong> {order.name}</p>\n//                             <p><strong>Email:</strong> {order.email}</p>\n//                             <p><strong>Waste Type:</strong> {order.wasteType}</p>\n//                             <p><strong>Mobile No:</strong> {order.mobileNo}</p>\n//                             <p><strong>Address:</strong> {order.address}</p>\n//                             <p><strong>Price:</strong> {order.price}</p>\n//                             {order.isSold ? (\n//                                 <p style={{ color: \"green\" }}>Sold</p>\n//                             ) : (\n//                                 <button\n//                                     type=\"button\"\n//                                     className=\"btn btn-danger\"\n//                                     onClick={() => handleBuyClick(order)}\n//                                     disabled={loading}\n//                                 >\n//                                     {loading ? \"Processing...\" : \"Buy\"}\n//                                 </button>\n//                             )}\n//                         </div>\n//                     ))}\n//                 </div>\n//             </div>\n\n//             {paymentSuccess && <p style={{ color: \"green\" }}>Payment completed successfully!</p>}\n//         </div>\n//     );\n// };\n\n// export default MarketplaceBuyWaste;\n\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MarketplaceBuyWaste = () => {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const [paymentSuccess, setPaymentSuccess] = useState(false);\n  const [orders, setOrders] = useState([]);\n  const [error, setError] = useState(null);\n  const [message, setMessage] = useState(null);\n  useEffect(() => {\n    fetchOrders();\n    loadRazorpay();\n  }, []);\n  const fetchOrders = async () => {\n    setLoading(true);\n    try {\n      const response = await axios.get('http://localhost:8085/marketplace/orders');\n      if (response.data && response.data.message === \"No orders found\") {\n        setMessage(\"No orders found\");\n        setOrders([]);\n      } else {\n        setOrders(response.data);\n      }\n    } catch (err) {\n      setError(err);\n      console.error(\"Error fetching orders:\", err);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const loadRazorpay = () => {\n    const script = document.createElement(\"script\");\n    script.src = \"https://checkout.razorpay.com/v1/checkout.js\";\n    script.async = true;\n    document.body.appendChild(script);\n    script.onload = () => console.log(\"Razorpay loaded successfully\");\n    script.onerror = () => console.error(\"Failed to load Razorpay\");\n  };\n  const updateOrderStatus = async orderId => {\n    try {\n      await axios.put(`http://localhost:8085/marketplace/update/${orderId}`, {\n        isSold: true\n      });\n      alert(\"Order status updated successfully!\");\n      fetchOrders(); // Automatically refresh orders\n    } catch (error) {\n      console.error(\"Error updating order status:\", error);\n      alert(\"Failed to update order status\");\n    }\n  };\n  const handleBuyClick = async order => {\n    const amount = order.price;\n    setLoading(true);\n    try {\n      const {\n        data\n      } = await axios.post(\"http://localhost:8085/api/payment/create-order\", {\n        amount\n      });\n      if (!data.orderId) {\n        alert(\"Failed to create order. Order ID missing.\");\n        setLoading(false);\n        return;\n      }\n      const options = {\n        key: \"rzp_test_nos2BlazNsLY8Y\",\n        amount: amount * 100,\n        currency: \"INR\",\n        name: \"Your Company\",\n        description: `Payment for â‚¹${amount}`,\n        order_id: data.orderId,\n        handler: async function (response) {\n          try {\n            const verificationData = {\n              orderId: response.razorpay_order_id,\n              paymentId: response.razorpay_payment_id,\n              amount: amount\n            };\n            const verificationResponse = await axios.post(\"http://localhost:8085/api/payment/verify-payment\", verificationData);\n            if (verificationResponse.data.status === \"success\") {\n              alert(\"Payment Successful!\");\n              setPaymentSuccess(true);\n              await updateOrderStatus(order.id); // Update isSold after successful payment and refresh orders\n            } else {\n              alert(\"Payment verification failed.\");\n            }\n          } catch (verificationError) {\n            console.error(\"Payment verification error:\", verificationError);\n            alert(\"Payment verification failed.\");\n          } finally {\n            setLoading(false);\n          }\n        },\n        prefill: {\n          name: \"John Doe\",\n          email: \"johndoe@example.com\",\n          contact: \"9876543210\"\n        },\n        theme: {\n          color: \"#3399cc\"\n        }\n      };\n      const razorpayInstance = new window.Razorpay(options);\n      razorpayInstance.open();\n    } catch (error) {\n      console.error(\"Payment failed:\", error);\n      alert(\"Payment initiation failed\");\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"order-history\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Waste Market Place\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 526,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-container\",\n        children: orders.map(order => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"order-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"d-flex justify-content-center align-items-center\",\n            children: order.imagePath ? /*#__PURE__*/_jsxDEV(\"img\", {\n              src: `http://localhost:8085/uploads/${order.imagePath}`,\n              alt: \"Waste\",\n              height: \"150px\",\n              width: \"200px\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 532,\n              columnNumber: 37\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"No Image Available\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 534,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 530,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Name:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 537,\n              columnNumber: 32\n            }, this), \" \", order.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 537,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Email:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 538,\n              columnNumber: 32\n            }, this), \" \", order.email]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 538,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Waste Type:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 539,\n              columnNumber: 32\n            }, this), \" \", order.wasteType]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 539,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Mobile No:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 540,\n              columnNumber: 32\n            }, this), \" \", order.mobileNo]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 540,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Address:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 541,\n              columnNumber: 32\n            }, this), \" \", order.address]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 541,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Price:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 542,\n              columnNumber: 32\n            }, this), \" \", order.price]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 542,\n            columnNumber: 29\n          }, this), order.isSold ? /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              color: \"green\"\n            },\n            children: \"Sold\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 544,\n            columnNumber: 33\n          }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"btn btn-danger\",\n            onClick: () => handleBuyClick(order),\n            disabled: loading,\n            children: loading ? \"Processing...\" : \"Buy\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 546,\n            columnNumber: 33\n          }, this)]\n        }, order.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 529,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 527,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 525,\n      columnNumber: 13\n    }, this), paymentSuccess && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"green\"\n      },\n      children: \"Payment completed successfully!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 560,\n      columnNumber: 32\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 524,\n    columnNumber: 9\n  }, this);\n};\n_s(MarketplaceBuyWaste, \"t4Bhm2ZyphVnntuTl0p32VJXLT4=\");\n_c = MarketplaceBuyWaste;\nexport default MarketplaceBuyWaste;\n\n// import React, { useEffect, useState } from \"react\";\n// import axios from \"axios\";\n\n// const MarketplaceBuyWaste = () => {\n//     const [loadingOrderId, setLoadingOrderId] = useState(null);\n//     const [paymentSuccess, setPaymentSuccess] = useState(false);\n//     const [orders, setOrders] = useState([]);\n//     const [error, setError] = useState(null);\n//     const [message, setMessage] = useState(null);\n\n//     useEffect(() => {\n//         fetchOrders();\n//         loadRazorpay();\n//     }, []);\n\n//     const fetchOrders = async () => {\n//         try {\n//             const response = await axios.get('http://localhost:8085/marketplace/orders');\n//             if (response.data && response.data.message === \"No orders found\") {\n//                 setMessage(\"No orders found\");\n//                 setOrders([]);\n//             } else {\n//                 setOrders(response.data);\n//             }\n//         } catch (err) {\n//             setError(err);\n//             console.error(\"Error fetching orders:\", err);\n//         }\n//     };\n\n//     const loadRazorpay = () => {\n//         const script = document.createElement(\"script\");\n//         script.src = \"https://checkout.razorpay.com/v1/checkout.js\";\n//         script.async = true;\n//         document.body.appendChild(script);\n//     };\n\n//     const updateOrderStatus = async (orderId) => {\n//         try {\n//             await axios.put(`http://localhost:8085/marketplace/update/${orderId}`, { isSold: true });\n//             alert(\"Order status updated successfully!\");\n//             fetchOrders();\n//         } catch (error) {\n//             console.error(\"Error updating order status:\", error);\n//             alert(\"Failed to update order status\");\n//         }\n//     };\n\n//     const handleBuyClick = async (order) => {\n//         setLoadingOrderId(order.id);\n//         try {\n//             const { data } = await axios.post(\"http://localhost:8085/api/payment/create-order\", { amount: order.price,\n//                 orderId: order.id \n\n//              });\n\n//             if (!data.orderId) {\n//                 alert(\"Failed to create order. Order ID missing.\");\n//                 setLoadingOrderId(null);\n//                 return;\n//             }\n\n//             const options = {\n//                 key: \"rzp_test_nos2BlazNsLY8Y\",\n//                 amount: order.price * 100,\n//                 currency: \"INR\",\n//                 name: \"Your Company\",\n//                 description: `Payment for â‚¹${order.price}`,\n//                 order_id: data.orderId,\n\n//                 handler: async function (response) {\n//                     try {\n//                         const verificationData = {\n//                             orderId: response.razorpay_order_id,\n//                             paymentId: response.razorpay_payment_id,\n//                             amount: order.price,\n//                             sellWasteId: order.id \n//                         };\n\n//                         const verificationResponse = await axios.post(\"http://localhost:8085/api/payment/verify-payment\", verificationData);\n\n//                         if (verificationResponse.data.status === \"success\") {\n//                             alert(\"Payment Successful!\");\n//                             setPaymentSuccess(true);\n//                             await updateOrderStatus(order.id);\n//                         } else {\n//                             alert(\"Payment verification failed.\");\n//                         }\n//                     } catch (verificationError) {\n//                         console.error(\"Payment verification error:\", verificationError);\n//                         alert(\"Payment verification failed.\");\n//                     } finally {\n//                         setLoadingOrderId(null);\n//                     }\n//                 },\n//                 prefill: {\n//                     name: \"Akshay Borate\",\n//                     email: \"akshayb@gmail.com\",\n//                     contact: \"9112959661\",\n//                 },\n//                 theme: { color: \"#3399cc\" },\n//             };\n\n//             const razorpayInstance = new window.Razorpay(options);\n//             razorpayInstance.open();\n//         } catch (error) {\n//             console.error(\"Payment failed:\", error);\n//             alert(\"Payment initiation failed\");\n//             setLoadingOrderId(null);\n//         }\n//     };\n\n//     return (\n//         <div>\n//             <div className=\"order-history\">\n//                 <h2>Waste Market Place</h2>\n//                 <div className=\"card-container\">\n//                     {orders.map(order => (\n//                         <div className=\"order-card\" key={order.id}>\n//                             <div className=\"d-flex justify-content-center align-items-center\">\n//                                 {order.imagePath ? (\n//                                     <img src={`http://localhost:8085/uploads/${order.imagePath}`} alt=\"Waste\" height=\"150px\" width=\"200px\" />\n//                                 ) : (\n//                                     <div>No Image Available</div>\n//                                 )}\n//                             </div>\n//                             <p><strong>Name:</strong> {order.name}</p>\n//                             <p><strong>Email:</strong> {order.email}</p>\n//                             <p><strong>Waste Type:</strong> {order.wasteType}</p>\n//                             <p><strong>Mobile No:</strong> {order.mobileNo}</p>\n//                             <p><strong>Address:</strong> {order.address}</p>\n//                             <p><strong>Price:</strong> {order.price}</p>\n//                             {order.isSold ? (\n//                                 <p style={{ color: \"green\" }}>Sold</p>\n//                             ) : (\n//                                 <button\n//                                     type=\"button\"\n//                                     className=\"btn btn-danger\"\n//                                     onClick={() => handleBuyClick(order)}\n//                                     disabled={loadingOrderId === order.id}\n//                                 >\n//                                     {loadingOrderId === order.id ? \"Processing...\" : \"Buy\"}\n//                                 </button>\n//                             )}\n//                         </div>\n//                     ))}\n//                 </div>\n//             </div>\n\n//         </div>\n//     );\n// };\n\n// export default MarketplaceBuyWaste;\n\n// import React, { useEffect, useState } from \"react\";\n// import axios from \"axios\";\n\n// const MarketplaceBuyWaste = () => {\n//     const [loadingOrderId, setLoadingOrderId] = useState(null);\n//     const [paymentSuccess, setPaymentSuccess] = useState(false);\n//     const [orders, setOrders] = useState([]);\n//     const [error, setError] = useState(null);\n//     const [message, setMessage] = useState(null);\n\n//     useEffect(() => {\n//         fetchOrders();\n//         loadRazorpay();\n//     }, []);\n\n//     const fetchOrders = async () => {\n//         try {\n//             const response = await axios.get('http://localhost:8085/marketplace/orders');\n//             if (response.data && response.data.message === \"No orders found\") {\n//                 setMessage(\"No orders found\");\n//                 setOrders([]);\n//             } else {\n//                 setOrders(response.data);\n//             }\n//         } catch (err) {\n//             setError(err);\n//             console.error(\"Error fetching orders:\", err);\n//         }\n//     };\n\n//     const loadRazorpay = () => {\n//         const script = document.createElement(\"script\");\n//         script.src = \"https://checkout.razorpay.com/v1/checkout.js\";\n//         script.async = true;\n//         document.body.appendChild(script);\n//     };\n\n//     // const updateOrderStatus = async (orderId) => {\n//     //     try {\n//     //         await axios.put(`http://localhost:8085/marketplace/update/${orderId}`);\n//     //         alert(\"Order status updated successfully!\");\n//     //         fetchOrders();\n//     //     } catch (error) {\n//     //         console.error(\"Error updating order status:\", error);\n//     //         alert(\"Failed to update order status\");\n//     //     }\n//     // };\n\n//     const updateOrderStatus = async (orderId) => {\n//         try {\n//             const response = await axios.put(`http://localhost:8085/marketplace/update/${orderId}`);\n//             console.log(\"Update response:\", response.data);\n//             alert(\"Order status updated successfully!\");\n//             fetchOrders(); // Refresh orders\n//         } catch (error) {\n//             console.error(\"Error updating order status:\", error.response?.data || error.message);\n//             alert(\"Failed to update order status\");\n//         }\n//     };\n\n//     const handleBuyClick = async (order) => {\n//         setLoadingOrderId(order.id);\n//         try {\n//             const { data } = await axios.post(\"http://localhost:8085/api/payment/create-order\", {\n//                 amount: order.price,\n//                 orderId: order.id,\n//                 sellWasteId: order.id\n//             });\n\n//             if (!data.orderId) {\n//                 alert(\"Failed to create order. Order ID missing.\");\n//                 setLoadingOrderId(null);\n//                 return;\n//             }\n\n//             const options = {\n//                 key: \"rzp_test_nos2BlazNsLY8Y\",\n//                 amount: order.price * 100,\n//                 currency: \"INR\",\n//                 name: \"Your Company\",\n//                 description: `Payment for â‚¹${order.price}`,\n//                 order_id: data.orderId,\n\n//                 handler: async function (response) {\n//                     try {\n//                         const verificationData = {\n//                             orderId: response.razorpay_order_id,\n//                             paymentId: response.razorpay_payment_id,\n//                             amount: order.price,\n//                             sellWasteId: order.id\n//                         };\n\n//                         const verificationResponse = await axios.post(\"http://localhost:8085/api/payment/verify-payment\", verificationData);\n\n//                         if (verificationResponse.data.status === \"SUCCESS\") {\n//                             alert(\"Payment Successful!\");\n//                             setPaymentSuccess(true);\n//                             await updateOrderStatus(order.id);\n//                         } else {\n//                             alert(\"Payment verification failed.\");\n//                         }\n//                     } catch (verificationError) {\n//                         console.error(\"Payment verification error:\", verificationError);\n//                         alert(\"Payment verification failed.\");\n//                     } finally {\n//                         setLoadingOrderId(null);\n//                     }\n//                 },\n//                 prefill: {\n//                     name: \"Akshay Borate\",\n//                     email: \"akshayb@gmail.com\",\n//                     contact: \"9112959661\",\n//                 },\n//                 theme: { color: \"#3399cc\" },\n//             };\n\n//             const razorpayInstance = new window.Razorpay(options);\n//             razorpayInstance.open();\n//         } catch (error) {\n//             console.error(\"Payment failed:\", error);\n//             alert(\"Payment initiation failed\");\n//             setLoadingOrderId(null);\n//         }\n//     };\n\n//     return (\n//         <div>\n//             <div className=\"order-history\">\n//                 <h2>Waste Market Place</h2>\n//                 <div className=\"card-container\">\n//                     {orders.map(order => (\n//                         <div className=\"order-card\" key={order.id}>\n//                             <div className=\"d-flex justify-content-center align-items-center\">\n//                                 {order.imagePath ? (\n//                                     <img src={`http://localhost:8085/uploads/${order.imagePath}`} alt=\"Waste\" height=\"150px\" width=\"200px\" />\n//                                 ) : (\n//                                     <div>No Image Available</div>\n//                                 )}\n//                             </div>\n//                             <p><strong>Name:</strong> {order.name}</p>\n//                             <p><strong>Email:</strong> {order.email}</p>\n//                             <p><strong>Waste Type:</strong> {order.wasteType}</p>\n//                             <p><strong>Mobile No:</strong> {order.mobileNo}</p>\n//                             <p><strong>Address:</strong> {order.address}</p>\n//                             <p><strong>Price:</strong> {order.price}</p>\n//                             {order.isSold ? (\n//                                 <p style={{ color: \"green\" }}>Sold</p>\n//                             ) : (\n//                                 <button\n//                                     type=\"button\"\n//                                     className=\"btn btn-danger\"\n//                                     onClick={() => handleBuyClick(order)}\n//                                     disabled={loadingOrderId === order.id}\n//                                 >\n//                                     {loadingOrderId === order.id ? \"Processing...\" : \"Buy\"}\n//                                 </button>\n//                             )}\n//                         </div>\n//                     ))}\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default MarketplaceBuyWaste;\nvar _c;\n$RefreshReg$(_c, \"MarketplaceBuyWaste\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","MarketplaceBuyWaste","_s","loading","setLoading","paymentSuccess","setPaymentSuccess","orders","setOrders","error","setError","message","setMessage","fetchOrders","loadRazorpay","response","get","data","err","console","script","document","createElement","src","async","body","appendChild","onload","log","onerror","updateOrderStatus","orderId","put","isSold","alert","handleBuyClick","order","amount","price","post","options","key","currency","name","description","order_id","handler","verificationData","razorpay_order_id","paymentId","razorpay_payment_id","verificationResponse","status","id","verificationError","prefill","email","contact","theme","color","razorpayInstance","window","Razorpay","open","children","className","fileName","_jsxFileName","lineNumber","columnNumber","map","imagePath","alt","height","width","wasteType","mobileNo","address","style","type","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Lenovo/Desktop/New folder/project/src/components/customer/MarketplaceBuyWaste.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n\r\n// function MarketplaceBuyWaste() {\r\n//   const [orders, setOrders] = useState([]);\r\n//   const [error, setError] = useState(null);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [message, setMessage] = useState(null); // Add a message state\r\n\r\n//   useEffect(() => {\r\n//     const fetchOrders = async () => {\r\n//       setLoading(true);\r\n//       try {\r\n//         const response = await axios.get('http://localhost:8085/waste-details/orders');\r\n\r\n//         if (response.data && response.data.message === \"No orders found\") {\r\n//           setMessage(\"No orders found\"); // Set the message\r\n//           setOrders([]); // Clear any existing orders\r\n//         } else {\r\n//           setOrders(response.data);\r\n//         }\r\n\r\n//       } catch (err) {\r\n//         setError(err);\r\n//         console.error(\"Error fetching orders:\", err);\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     fetchOrders();\r\n//   }, []);\r\n\r\n//   if (loading) {\r\n//     return <div>Loading...</div>;\r\n//   }\r\n\r\n//   if (error) {\r\n//     return <div>Error: {error.message}</div>;\r\n//   }\r\n\r\n//   if (message) { // Display the message if it's set\r\n//     return (\r\n//       <div className=\"order-history\">\r\n//         <h2>Farmer Order History</h2>\r\n//         <p>{message}</p> {/* Display the no orders message */}\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   return (\r\n//     <div className=\"order-history\">\r\n//       <h2>Waste Market Place</h2>\r\n//       <div className=\"card-container\">\r\n//         {orders.map(order => (\r\n//           <div className=\"order-card\" key={order.farmerid}>\r\n//             <div className=\"d-flex justify-content-center align-items-center\">\r\n//               {order.imagePath ? (\r\n//                 <img src={`http://localhost:8085/uploads/${order.imagePath}`} alt=\"Waste Image\" height=\"150px\" width=\"200px\" />\r\n//               ) : (\r\n//                 <div>No Image Available</div>\r\n//               )}\r\n//             </div>\r\n//             <p><strong>Name:</strong> {order.name}</p>\r\n//             <p><strong>Email:</strong> {order.email}</p>\r\n//             <p><strong>Waste Type:</strong> {order.wasteType}</p>\r\n//             <p><strong>Mobile No:</strong> {order.mobileNo}</p>\r\n//             <p><strong>Address:</strong> {order.address}</p>\r\n//             <p><strong>Price:</strong> {order.price}</p>\r\n         \r\n//             <button type=\"button\" className=\"btn btn-danger\">Invoice</button>\r\n//           </div>\r\n//         ))}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default MarketplaceBuyWaste;\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n// import axios from \"axios\";\r\n\r\n// const MarketplaceBuyWaste = () => {\r\n//     const [loading, setLoading] = useState(false);\r\n//     const [paymentSuccess, setPaymentSuccess] = useState(false);\r\n//     const [orders, setOrders] = useState([]);\r\n//     const [error, setError] = useState(null);\r\n//     const [message, setMessage] = useState(null);\r\n\r\n//     useEffect(() => {\r\n//         const fetchOrders = async () => {\r\n//             setLoading(true);\r\n//             try {\r\n//                 const response = await axios.get('http://localhost:8085/marketplace/orders');\r\n\r\n//                 if (response.data && response.data.message === \"No orders found\") {\r\n//                     setMessage(\"No orders found\");\r\n//                     setOrders([]);\r\n//                 } else {\r\n//                     setOrders(response.data);\r\n//                 }\r\n\r\n//             } catch (err) {\r\n//                 setError(err);\r\n//                 console.error(\"Error fetching orders:\", err);\r\n//             } finally {\r\n//                 setLoading(false);\r\n//             }\r\n//         };\r\n\r\n//         fetchOrders();\r\n\r\n//         const loadRazorpay = async () => {\r\n//             const script = document.createElement(\"script\");\r\n//             script.src = \"https://checkout.razorpay.com/v1/checkout.js\";\r\n//             script.async = true;\r\n//             document.body.appendChild(script);\r\n\r\n//             script.onload = () => {\r\n//                 console.log(\"Razorpay loaded successfully\");\r\n//             };\r\n\r\n//             script.onerror = () => {\r\n//                 console.error(\"Failed to load Razorpay\");\r\n//             };\r\n//         };\r\n\r\n//         loadRazorpay();\r\n//     }, []);\r\n\r\n\r\n//     const handleBuyClick = async (order) => {\r\n//         const amount = order.price;\r\n\r\n//         setLoading(true);\r\n//         try {\r\n//             const { data } = await axios.post(\"http://localhost:8085/api/payment/create-order\", { amount });\r\n\r\n//             if (data.status === \"error\") {\r\n//                 alert(data.message || \"Failed to create order\");\r\n//                 setLoading(false);\r\n//                 return;\r\n//             }\r\n\r\n//             if (!data.orderId) {\r\n//                 alert(\"Failed to create order. Order ID missing.\");\r\n//                 setLoading(false);\r\n//                 return;\r\n//             }\r\n\r\n//             const options = {\r\n//                 key: \"rzp_test_nos2BlazNsLY8Y\", // Replace with your actual key\r\n//                 amount: amount * 100,\r\n//                 currency: \"INR\",\r\n//                 name: \"Your Company\",\r\n//                 description: `Payment for â‚¹${amount}`,\r\n//                 order_id: data.orderId,\r\n//                 handler: async function (response) {\r\n//                     try {\r\n//                         const verificationData = {\r\n//                             orderId: response.razorpay_order_id,\r\n//                             paymentId: response.razorpay_payment_id,\r\n//                             amount: amount,\r\n//                             //add farmer id here\r\n//                         };\r\n\r\n//                         const verificationResponse = await axios.post(\"http://localhost:8085/api/payment/verify-payment\", verificationData);\r\n\r\n//                         if (verificationResponse.data.status === \"success\") {\r\n//                             alert(\"Payment Successful!\");\r\n//                             setPaymentSuccess(true);\r\n//                         } else {\r\n//                             alert(\"Payment verification failed.\");\r\n//                         }\r\n//                     } catch (verificationError) {\r\n//                         console.error(\"Payment verification error:\", verificationError);\r\n//                         alert(\"Payment verification failed.\");\r\n//                     } finally {\r\n//                         setLoading(false);\r\n//                     }\r\n//                 },\r\n//                 prefill: {\r\n//                     name: \"John Doe\",\r\n//                     email: \"johndoe@example.com\",\r\n//                     contact: \"9876543210\",\r\n//                 },\r\n//                 theme: { color: \"#3399cc\" },\r\n//             };\r\n\r\n//             const razorpayInstance = new window.Razorpay(options);\r\n//             razorpayInstance.open();\r\n\r\n//         } catch (error) {\r\n//             console.error(\"Payment failed:\", error);\r\n//             alert(\"Payment initiation failed\");\r\n//             setLoading(false);\r\n//         }\r\n//     };\r\n\r\n\r\n//     return (\r\n//         <div>\r\n//             <div className=\"order-history\">\r\n//                 <h2>Waste Market Place</h2>\r\n//                 <div className=\"card-container\">\r\n//                     {orders.map(order => (\r\n//                         <div className=\"order-card\" key={order.farmerid}>\r\n//                             <div className=\"d-flex justify-content-center align-items-center\">\r\n//                                 {order.imagePath ? (\r\n//                                     <img src={`http://localhost:8085/uploads/${order.imagePath}`} alt=\"Waste Image\" height=\"150px\" width=\"200px\" />\r\n//                                 ) : (\r\n//                                     <div>No Image Available</div>\r\n//                                 )}\r\n//                             </div>\r\n//                             <p><strong>Name:</strong> {order.name}</p>\r\n//                             <p><strong>Email:</strong> {order.email}</p>\r\n//                             <p><strong>Waste Type:</strong> {order.wasteType}</p>\r\n//                             <p><strong>Mobile No:</strong> {order.mobileNo}</p>\r\n//                             <p><strong>Address:</strong> {order.address}</p>\r\n//                             <p><strong>Price:</strong> {order.price}</p>\r\n\r\n//                             <button\r\n//                                 type=\"button\"\r\n//                                 className=\"btn btn-danger\"\r\n//                                 onClick={() => handleBuyClick(order)}\r\n//                                 disabled={loading}\r\n//                             >\r\n//                                 {loading ? \"Processing...\" : \"Buy\"}\r\n//                             </button>\r\n//                         </div>\r\n//                     ))}\r\n//                 </div>\r\n//             </div>\r\n\r\n//             {paymentSuccess && <p style={{ color: \"green\" }}>Payment completed successfully!</p>}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default MarketplaceBuyWaste;\r\n\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n// import axios from \"axios\";\r\n\r\n// const MarketplaceBuyWaste = () => {\r\n//     const [loading, setLoading] = useState(false);\r\n//     const [paymentSuccess, setPaymentSuccess] = useState(false);\r\n//     const [orders, setOrders] = useState([]);\r\n//     const [error, setError] = useState(null);\r\n//     const [message, setMessage] = useState(null);\r\n\r\n//     useEffect(() => {\r\n//         const fetchOrders = async () => {\r\n//             setLoading(true);\r\n//             try {\r\n//                 const response = await axios.get('http://localhost:8085/marketplace/orders');\r\n//                 if (response.data && response.data.message === \"No orders found\") {\r\n//                     setMessage(\"No orders found\");\r\n//                     setOrders([]);\r\n//                 } else {\r\n//                     setOrders(response.data);\r\n//                 }\r\n//             } catch (err) {\r\n//                 setError(err);\r\n//                 console.error(\"Error fetching orders:\", err);\r\n//             } finally {\r\n//                 setLoading(false);\r\n//             }\r\n//         };\r\n\r\n//         fetchOrders();\r\n//         loadRazorpay();\r\n//     }, []);\r\n\r\n//     const loadRazorpay = () => {\r\n//         const script = document.createElement(\"script\");\r\n//         script.src = \"https://checkout.razorpay.com/v1/checkout.js\";\r\n//         script.async = true;\r\n//         document.body.appendChild(script);\r\n\r\n//         script.onload = () => console.log(\"Razorpay loaded successfully\");\r\n//         script.onerror = () => console.error(\"Failed to load Razorpay\");\r\n//     };\r\n\r\n//     const updateOrderStatus = async (orderId) => {\r\n//         try {\r\n//             await axios.put(`http://localhost:8085/marketplace/update/${orderId}`, { isSold: true });\r\n//             alert(\"Order status updated successfully!\");\r\n//             setOrders(prevOrders => prevOrders.map(order => order.id === orderId ? { ...order, isSold: true } : order));\r\n//         } catch (error) {\r\n//             console.error(\"Error updating order status:\", error);\r\n//             alert(\"Failed to update order status\");\r\n//         }\r\n//     };\r\n\r\n//     const handleBuyClick = async (order) => {\r\n//         const amount = order.price;\r\n//         setLoading(true);\r\n//         try {\r\n//             const { data } = await axios.post(\"http://localhost:8085/api/payment/create-order\", { amount });\r\n\r\n//             if (!data.orderId) {\r\n//                 alert(\"Failed to create order. Order ID missing.\");\r\n//                 setLoading(false);\r\n//                 return;\r\n//             }\r\n\r\n//             const options = {\r\n//                 key: \"rzp_test_nos2BlazNsLY8Y\",\r\n//                 amount: amount * 100,\r\n//                 currency: \"INR\",\r\n//                 name: \"Your Company\",\r\n//                 description: `Payment for â‚¹${amount}`,\r\n//                 order_id: data.orderId,\r\n//                 handler: async function (response) {\r\n//                     try {\r\n//                         const verificationData = {\r\n//                             orderId: response.razorpay_order_id,\r\n//                             paymentId: response.razorpay_payment_id,\r\n//                             amount: amount,\r\n//                         };\r\n\r\n//                         const verificationResponse = await axios.post(\"http://localhost:8085/api/payment/verify-payment\", verificationData);\r\n\r\n//                         if (verificationResponse.data.status === \"success\") {\r\n//                             alert(\"Payment Successful!\");\r\n//                             setPaymentSuccess(true);\r\n//                             await updateOrderStatus(order.id); // Update isSold after successful payment\r\n//                         } else {\r\n//                             alert(\"Payment verification failed.\");\r\n//                         }\r\n//                     } catch (verificationError) {\r\n//                         console.error(\"Payment verification error:\", verificationError);\r\n//                         alert(\"Payment verification failed.\");\r\n//                     } finally {\r\n//                         setLoading(false);\r\n//                     }\r\n//                 },\r\n//                 prefill: {\r\n//                     name: \"John Doe\",\r\n//                     email: \"johndoe@example.com\",\r\n//                     contact: \"9876543210\",\r\n//                 },\r\n//                 theme: { color: \"#3399cc\" },\r\n//             };\r\n\r\n//             const razorpayInstance = new window.Razorpay(options);\r\n//             razorpayInstance.open();\r\n//         } catch (error) {\r\n//             console.error(\"Payment failed:\", error);\r\n//             alert(\"Payment initiation failed\");\r\n//             setLoading(false);\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <div>\r\n//             <div className=\"order-history\">\r\n//                 <h2>Waste Market Place</h2>\r\n//                 <div className=\"card-container\">\r\n//                     {orders.map(order => (\r\n//                         <div className=\"order-card\" key={order.id}>\r\n//                             <div className=\"d-flex justify-content-center align-items-center\">\r\n//                                 {order.imagePath ? (\r\n//                                     <img src={`http://localhost:8085/uploads/${order.imagePath}`} alt=\"Waste\" height=\"150px\" width=\"200px\" />\r\n//                                 ) : (\r\n//                                     <div>No Image Available</div>\r\n//                                 )}\r\n//                             </div>\r\n//                             <p><strong>Name:</strong> {order.name}</p>\r\n//                             <p><strong>Email:</strong> {order.email}</p>\r\n//                             <p><strong>Waste Type:</strong> {order.wasteType}</p>\r\n//                             <p><strong>Mobile No:</strong> {order.mobileNo}</p>\r\n//                             <p><strong>Address:</strong> {order.address}</p>\r\n//                             <p><strong>Price:</strong> {order.price}</p>\r\n//                             {order.isSold ? (\r\n//                                 <p style={{ color: \"green\" }}>Sold</p>\r\n//                             ) : (\r\n//                                 <button\r\n//                                     type=\"button\"\r\n//                                     className=\"btn btn-danger\"\r\n//                                     onClick={() => handleBuyClick(order)}\r\n//                                     disabled={loading}\r\n//                                 >\r\n//                                     {loading ? \"Processing...\" : \"Buy\"}\r\n//                                 </button>\r\n//                             )}\r\n//                         </div>\r\n//                     ))}\r\n//                 </div>\r\n//             </div>\r\n\r\n//             {paymentSuccess && <p style={{ color: \"green\" }}>Payment completed successfully!</p>}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default MarketplaceBuyWaste;\r\n\r\n\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst MarketplaceBuyWaste = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [paymentSuccess, setPaymentSuccess] = useState(false);\r\n    const [orders, setOrders] = useState([]);\r\n    const [error, setError] = useState(null);\r\n    const [message, setMessage] = useState(null);\r\n\r\n    useEffect(() => {\r\n        fetchOrders();\r\n        loadRazorpay();\r\n    }, []);\r\n\r\n    const fetchOrders = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const response = await axios.get('http://localhost:8085/marketplace/orders');\r\n            if (response.data && response.data.message === \"No orders found\") {\r\n                setMessage(\"No orders found\");\r\n                setOrders([]);\r\n            } else {\r\n                setOrders(response.data);\r\n            }\r\n        } catch (err) {\r\n            setError(err);\r\n            console.error(\"Error fetching orders:\", err);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const loadRazorpay = () => {\r\n        const script = document.createElement(\"script\");\r\n        script.src = \"https://checkout.razorpay.com/v1/checkout.js\";\r\n        script.async = true;\r\n        document.body.appendChild(script);\r\n\r\n        script.onload = () => console.log(\"Razorpay loaded successfully\");\r\n        script.onerror = () => console.error(\"Failed to load Razorpay\");\r\n    };\r\n\r\n    const updateOrderStatus = async (orderId) => {\r\n        try {\r\n            await axios.put(`http://localhost:8085/marketplace/update/${orderId}`, { isSold: true });\r\n            alert(\"Order status updated successfully!\");\r\n            fetchOrders(); // Automatically refresh orders\r\n        } catch (error) {\r\n            console.error(\"Error updating order status:\", error);\r\n            alert(\"Failed to update order status\");\r\n        }\r\n    };\r\n\r\n    const handleBuyClick = async (order) => {\r\n        const amount = order.price;\r\n        setLoading(true);\r\n        try {\r\n            const { data } = await axios.post(\"http://localhost:8085/api/payment/create-order\", { amount });\r\n\r\n            if (!data.orderId) {\r\n                alert(\"Failed to create order. Order ID missing.\");\r\n                setLoading(false);\r\n                return;\r\n            }\r\n\r\n            const options = {\r\n                key: \"rzp_test_nos2BlazNsLY8Y\",\r\n                amount: amount * 100,\r\n                currency: \"INR\",\r\n                name: \"Your Company\",\r\n                description: `Payment for â‚¹${amount}`,\r\n                order_id: data.orderId,\r\n                handler: async function (response) {\r\n                    try {\r\n                        const verificationData = {\r\n                            orderId: response.razorpay_order_id,\r\n                            paymentId: response.razorpay_payment_id,\r\n                            amount: amount,\r\n                        };\r\n\r\n                        const verificationResponse = await axios.post(\"http://localhost:8085/api/payment/verify-payment\", verificationData);\r\n\r\n                        if (verificationResponse.data.status === \"success\") {\r\n                            alert(\"Payment Successful!\");\r\n                            setPaymentSuccess(true);\r\n                            await updateOrderStatus(order.id); // Update isSold after successful payment and refresh orders\r\n                        } else {\r\n                            alert(\"Payment verification failed.\");\r\n                        }\r\n                    } catch (verificationError) {\r\n                        console.error(\"Payment verification error:\", verificationError);\r\n                        alert(\"Payment verification failed.\");\r\n                    } finally {\r\n                        setLoading(false);\r\n                    }\r\n                },\r\n                prefill: {\r\n                    name: \"John Doe\",\r\n                    email: \"johndoe@example.com\",\r\n                    contact: \"9876543210\",\r\n                },\r\n                theme: { color: \"#3399cc\" },\r\n            };\r\n\r\n            const razorpayInstance = new window.Razorpay(options);\r\n            razorpayInstance.open();\r\n        } catch (error) {\r\n            console.error(\"Payment failed:\", error);\r\n            alert(\"Payment initiation failed\");\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"order-history\">\r\n                <h2>Waste Market Place</h2>\r\n                <div className=\"card-container\">\r\n                    {orders.map(order => (\r\n                        <div className=\"order-card\" key={order.id}>\r\n                            <div className=\"d-flex justify-content-center align-items-center\">\r\n                                {order.imagePath ? (\r\n                                    <img src={`http://localhost:8085/uploads/${order.imagePath}`} alt=\"Waste\" height=\"150px\" width=\"200px\" />\r\n                                ) : (\r\n                                    <div>No Image Available</div>\r\n                                )}\r\n                            </div>\r\n                            <p><strong>Name:</strong> {order.name}</p>\r\n                            <p><strong>Email:</strong> {order.email}</p>\r\n                            <p><strong>Waste Type:</strong> {order.wasteType}</p>\r\n                            <p><strong>Mobile No:</strong> {order.mobileNo}</p>\r\n                            <p><strong>Address:</strong> {order.address}</p>\r\n                            <p><strong>Price:</strong> {order.price}</p>\r\n                            {order.isSold ? (\r\n                                <p style={{ color: \"green\" }}>Sold</p>\r\n                            ) : (\r\n                                <button\r\n                                    type=\"button\"\r\n                                    className=\"btn btn-danger\"\r\n                                    onClick={() => handleBuyClick(order)}\r\n                                    disabled={loading}\r\n                                >\r\n                                    {loading ? \"Processing...\" : \"Buy\"}\r\n                                </button>\r\n                            )}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n\r\n            {paymentSuccess && <p style={{ color: \"green\" }}>Payment completed successfully!</p>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MarketplaceBuyWaste;\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n// import axios from \"axios\";\r\n\r\n// const MarketplaceBuyWaste = () => {\r\n//     const [loadingOrderId, setLoadingOrderId] = useState(null);\r\n//     const [paymentSuccess, setPaymentSuccess] = useState(false);\r\n//     const [orders, setOrders] = useState([]);\r\n//     const [error, setError] = useState(null);\r\n//     const [message, setMessage] = useState(null);\r\n\r\n//     useEffect(() => {\r\n//         fetchOrders();\r\n//         loadRazorpay();\r\n//     }, []);\r\n\r\n//     const fetchOrders = async () => {\r\n//         try {\r\n//             const response = await axios.get('http://localhost:8085/marketplace/orders');\r\n//             if (response.data && response.data.message === \"No orders found\") {\r\n//                 setMessage(\"No orders found\");\r\n//                 setOrders([]);\r\n//             } else {\r\n//                 setOrders(response.data);\r\n//             }\r\n//         } catch (err) {\r\n//             setError(err);\r\n//             console.error(\"Error fetching orders:\", err);\r\n//         }\r\n//     };\r\n\r\n//     const loadRazorpay = () => {\r\n//         const script = document.createElement(\"script\");\r\n//         script.src = \"https://checkout.razorpay.com/v1/checkout.js\";\r\n//         script.async = true;\r\n//         document.body.appendChild(script);\r\n//     };\r\n\r\n//     const updateOrderStatus = async (orderId) => {\r\n//         try {\r\n//             await axios.put(`http://localhost:8085/marketplace/update/${orderId}`, { isSold: true });\r\n//             alert(\"Order status updated successfully!\");\r\n//             fetchOrders();\r\n//         } catch (error) {\r\n//             console.error(\"Error updating order status:\", error);\r\n//             alert(\"Failed to update order status\");\r\n//         }\r\n//     };\r\n\r\n//     const handleBuyClick = async (order) => {\r\n//         setLoadingOrderId(order.id);\r\n//         try {\r\n//             const { data } = await axios.post(\"http://localhost:8085/api/payment/create-order\", { amount: order.price,\r\n//                 orderId: order.id \r\n\r\n//              });\r\n\r\n//             if (!data.orderId) {\r\n//                 alert(\"Failed to create order. Order ID missing.\");\r\n//                 setLoadingOrderId(null);\r\n//                 return;\r\n//             }\r\n\r\n//             const options = {\r\n//                 key: \"rzp_test_nos2BlazNsLY8Y\",\r\n//                 amount: order.price * 100,\r\n//                 currency: \"INR\",\r\n//                 name: \"Your Company\",\r\n//                 description: `Payment for â‚¹${order.price}`,\r\n//                 order_id: data.orderId,\r\n                \r\n//                 handler: async function (response) {\r\n//                     try {\r\n//                         const verificationData = {\r\n//                             orderId: response.razorpay_order_id,\r\n//                             paymentId: response.razorpay_payment_id,\r\n//                             amount: order.price,\r\n//                             sellWasteId: order.id \r\n//                         };\r\n\r\n//                         const verificationResponse = await axios.post(\"http://localhost:8085/api/payment/verify-payment\", verificationData);\r\n\r\n//                         if (verificationResponse.data.status === \"success\") {\r\n//                             alert(\"Payment Successful!\");\r\n//                             setPaymentSuccess(true);\r\n//                             await updateOrderStatus(order.id);\r\n//                         } else {\r\n//                             alert(\"Payment verification failed.\");\r\n//                         }\r\n//                     } catch (verificationError) {\r\n//                         console.error(\"Payment verification error:\", verificationError);\r\n//                         alert(\"Payment verification failed.\");\r\n//                     } finally {\r\n//                         setLoadingOrderId(null);\r\n//                     }\r\n//                 },\r\n//                 prefill: {\r\n//                     name: \"Akshay Borate\",\r\n//                     email: \"akshayb@gmail.com\",\r\n//                     contact: \"9112959661\",\r\n//                 },\r\n//                 theme: { color: \"#3399cc\" },\r\n//             };\r\n\r\n//             const razorpayInstance = new window.Razorpay(options);\r\n//             razorpayInstance.open();\r\n//         } catch (error) {\r\n//             console.error(\"Payment failed:\", error);\r\n//             alert(\"Payment initiation failed\");\r\n//             setLoadingOrderId(null);\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <div>\r\n//             <div className=\"order-history\">\r\n//                 <h2>Waste Market Place</h2>\r\n//                 <div className=\"card-container\">\r\n//                     {orders.map(order => (\r\n//                         <div className=\"order-card\" key={order.id}>\r\n//                             <div className=\"d-flex justify-content-center align-items-center\">\r\n//                                 {order.imagePath ? (\r\n//                                     <img src={`http://localhost:8085/uploads/${order.imagePath}`} alt=\"Waste\" height=\"150px\" width=\"200px\" />\r\n//                                 ) : (\r\n//                                     <div>No Image Available</div>\r\n//                                 )}\r\n//                             </div>\r\n//                             <p><strong>Name:</strong> {order.name}</p>\r\n//                             <p><strong>Email:</strong> {order.email}</p>\r\n//                             <p><strong>Waste Type:</strong> {order.wasteType}</p>\r\n//                             <p><strong>Mobile No:</strong> {order.mobileNo}</p>\r\n//                             <p><strong>Address:</strong> {order.address}</p>\r\n//                             <p><strong>Price:</strong> {order.price}</p>\r\n//                             {order.isSold ? (\r\n//                                 <p style={{ color: \"green\" }}>Sold</p>\r\n//                             ) : (\r\n//                                 <button\r\n//                                     type=\"button\"\r\n//                                     className=\"btn btn-danger\"\r\n//                                     onClick={() => handleBuyClick(order)}\r\n//                                     disabled={loadingOrderId === order.id}\r\n//                                 >\r\n//                                     {loadingOrderId === order.id ? \"Processing...\" : \"Buy\"}\r\n//                                 </button>\r\n//                             )}\r\n//                         </div>\r\n//                     ))}\r\n//                 </div>\r\n//             </div>\r\n\r\n            \r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default MarketplaceBuyWaste;\r\n\r\n\r\n\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n// import axios from \"axios\";\r\n\r\n// const MarketplaceBuyWaste = () => {\r\n//     const [loadingOrderId, setLoadingOrderId] = useState(null);\r\n//     const [paymentSuccess, setPaymentSuccess] = useState(false);\r\n//     const [orders, setOrders] = useState([]);\r\n//     const [error, setError] = useState(null);\r\n//     const [message, setMessage] = useState(null);\r\n\r\n//     useEffect(() => {\r\n//         fetchOrders();\r\n//         loadRazorpay();\r\n//     }, []);\r\n\r\n//     const fetchOrders = async () => {\r\n//         try {\r\n//             const response = await axios.get('http://localhost:8085/marketplace/orders');\r\n//             if (response.data && response.data.message === \"No orders found\") {\r\n//                 setMessage(\"No orders found\");\r\n//                 setOrders([]);\r\n//             } else {\r\n//                 setOrders(response.data);\r\n//             }\r\n//         } catch (err) {\r\n//             setError(err);\r\n//             console.error(\"Error fetching orders:\", err);\r\n//         }\r\n//     };\r\n\r\n//     const loadRazorpay = () => {\r\n//         const script = document.createElement(\"script\");\r\n//         script.src = \"https://checkout.razorpay.com/v1/checkout.js\";\r\n//         script.async = true;\r\n//         document.body.appendChild(script);\r\n//     };\r\n\r\n//     // const updateOrderStatus = async (orderId) => {\r\n//     //     try {\r\n//     //         await axios.put(`http://localhost:8085/marketplace/update/${orderId}`);\r\n//     //         alert(\"Order status updated successfully!\");\r\n//     //         fetchOrders();\r\n//     //     } catch (error) {\r\n//     //         console.error(\"Error updating order status:\", error);\r\n//     //         alert(\"Failed to update order status\");\r\n//     //     }\r\n//     // };\r\n\r\n//     const updateOrderStatus = async (orderId) => {\r\n//         try {\r\n//             const response = await axios.put(`http://localhost:8085/marketplace/update/${orderId}`);\r\n//             console.log(\"Update response:\", response.data);\r\n//             alert(\"Order status updated successfully!\");\r\n//             fetchOrders(); // Refresh orders\r\n//         } catch (error) {\r\n//             console.error(\"Error updating order status:\", error.response?.data || error.message);\r\n//             alert(\"Failed to update order status\");\r\n//         }\r\n//     };\r\n    \r\n\r\n//     const handleBuyClick = async (order) => {\r\n//         setLoadingOrderId(order.id);\r\n//         try {\r\n//             const { data } = await axios.post(\"http://localhost:8085/api/payment/create-order\", {\r\n//                 amount: order.price,\r\n//                 orderId: order.id,\r\n//                 sellWasteId: order.id\r\n//             });\r\n\r\n//             if (!data.orderId) {\r\n//                 alert(\"Failed to create order. Order ID missing.\");\r\n//                 setLoadingOrderId(null);\r\n//                 return;\r\n//             }\r\n\r\n//             const options = {\r\n//                 key: \"rzp_test_nos2BlazNsLY8Y\",\r\n//                 amount: order.price * 100,\r\n//                 currency: \"INR\",\r\n//                 name: \"Your Company\",\r\n//                 description: `Payment for â‚¹${order.price}`,\r\n//                 order_id: data.orderId,\r\n                \r\n//                 handler: async function (response) {\r\n//                     try {\r\n//                         const verificationData = {\r\n//                             orderId: response.razorpay_order_id,\r\n//                             paymentId: response.razorpay_payment_id,\r\n//                             amount: order.price,\r\n//                             sellWasteId: order.id\r\n//                         };\r\n\r\n//                         const verificationResponse = await axios.post(\"http://localhost:8085/api/payment/verify-payment\", verificationData);\r\n\r\n//                         if (verificationResponse.data.status === \"SUCCESS\") {\r\n//                             alert(\"Payment Successful!\");\r\n//                             setPaymentSuccess(true);\r\n//                             await updateOrderStatus(order.id);\r\n//                         } else {\r\n//                             alert(\"Payment verification failed.\");\r\n//                         }\r\n//                     } catch (verificationError) {\r\n//                         console.error(\"Payment verification error:\", verificationError);\r\n//                         alert(\"Payment verification failed.\");\r\n//                     } finally {\r\n//                         setLoadingOrderId(null);\r\n//                     }\r\n//                 },\r\n//                 prefill: {\r\n//                     name: \"Akshay Borate\",\r\n//                     email: \"akshayb@gmail.com\",\r\n//                     contact: \"9112959661\",\r\n//                 },\r\n//                 theme: { color: \"#3399cc\" },\r\n//             };\r\n\r\n//             const razorpayInstance = new window.Razorpay(options);\r\n//             razorpayInstance.open();\r\n//         } catch (error) {\r\n//             console.error(\"Payment failed:\", error);\r\n//             alert(\"Payment initiation failed\");\r\n//             setLoadingOrderId(null);\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <div>\r\n//             <div className=\"order-history\">\r\n//                 <h2>Waste Market Place</h2>\r\n//                 <div className=\"card-container\">\r\n//                     {orders.map(order => (\r\n//                         <div className=\"order-card\" key={order.id}>\r\n//                             <div className=\"d-flex justify-content-center align-items-center\">\r\n//                                 {order.imagePath ? (\r\n//                                     <img src={`http://localhost:8085/uploads/${order.imagePath}`} alt=\"Waste\" height=\"150px\" width=\"200px\" />\r\n//                                 ) : (\r\n//                                     <div>No Image Available</div>\r\n//                                 )}\r\n//                             </div>\r\n//                             <p><strong>Name:</strong> {order.name}</p>\r\n//                             <p><strong>Email:</strong> {order.email}</p>\r\n//                             <p><strong>Waste Type:</strong> {order.wasteType}</p>\r\n//                             <p><strong>Mobile No:</strong> {order.mobileNo}</p>\r\n//                             <p><strong>Address:</strong> {order.address}</p>\r\n//                             <p><strong>Price:</strong> {order.price}</p>\r\n//                             {order.isSold ? (\r\n//                                 <p style={{ color: \"green\" }}>Sold</p>\r\n//                             ) : (\r\n//                                 <button\r\n//                                     type=\"button\"\r\n//                                     className=\"btn btn-danger\"\r\n//                                     onClick={() => handleBuyClick(order)}\r\n//                                     disabled={loadingOrderId === order.id}\r\n//                                 >\r\n//                                     {loadingOrderId === order.id ? \"Processing...\" : \"Buy\"}\r\n//                                 </button>\r\n//                             )}\r\n//                         </div>\r\n//                     ))}\r\n//                 </div>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default MarketplaceBuyWaste;\r\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAOA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}