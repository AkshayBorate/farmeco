{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\New folder\\\\project\\\\src\\\\components\\\\admin\\\\EmployeeRegister.js\",\n  _s = $RefreshSig$();\n// import React, { useRef, useState } from \"react\";\n// import \"./EmployeeRegister.css\";\n\n// export default function EmployeeRegister() {\n//   const [errorMessage, setErrorMessage] = useState(\"\");\n//   const [successMessage, setSuccessMessage] = useState(\"\");\n//   const fullNameRef = useRef();\n//   const emailRef = useRef();\n//   const passwordRef = useRef();\n//   const mobileRef = useRef();\n//   const dateRef = useRef();\n//   const confirmPasswordRef = useRef();\n//   const salaryRef = useRef();\n\n//   const handleRegisterEmployee = (event) => {\n//     event.preventDefault();\n//     setErrorMessage(\"\");\n//     setSuccessMessage(\"\");\n\n//     const name = fullNameRef.current.value.trim();\n//     const email = emailRef.current.value.trim();\n//     const mobileNo = mobileRef.current.value.trim();\n//     const joiningDate = dateRef.current.value.trim();\n//     const password = passwordRef.current.value.trim();\n//     const confirmPassword = confirmPasswordRef.current.value.trim();\n//     const salary = parseFloat(salaryRef.current.value.trim());\n\n//     // Validations\n//     if (!name || !email || !mobileNo || !joiningDate || !password || !confirmPassword || !salary) {\n//       setErrorMessage(\"All fields are required!\");\n//       return;\n//     }\n//     if (!/^[a-zA-Z\\s]+$/.test(name)) {\n//       setErrorMessage(\"Please enter a valid full name!\");\n//       return;\n//     }\n//     if (!/^[6-9]\\d{9}$/.test(mobileNo)) {\n//       setErrorMessage(\"Please enter a valid mobile number!\");\n//       return;\n//     }\n//     if (!/^([a-zA-Z0-9._%+-]+)@([a-zA-Z0-9.-]+)\\.([a-zA-Z]{2,})$/.test(email)) {\n//       setErrorMessage(\"Please enter a valid email!\");\n//       return;\n//     }\n//     if (!/^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$])[A-Za-z0-9@#$]{6,12}$/.test(password)) {\n//       setErrorMessage(\"Password must be 6-12 characters, with at least one digit, one lowercase, one uppercase, and one special character (@, #, $)\");\n//       return;\n//     }\n//     if (password !== confirmPassword) {\n//       setErrorMessage(\"Passwords do not match!\");\n//       return;\n//     }\n\n//     const data = { name, email, mobileNo, joiningDate, salary, password };\n\n//     fetch(\"http://localhost:8085/api/employee/addUser\", {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify(data),\n//     })\n//       .then((response) => {\n//         if (response.status === 409) {\n//           return response.text().then((text) => {\n//             throw new Error(text || \"Employee already exists! Mobile number or Email is duplicated.\");\n//           });\n//         }\n//         if (!response.ok) {\n//           throw new Error(`Server error: ${response.status}`);\n//         }\n//         return response.json();\n//       })\n//       .then((data) => {\n//         setSuccessMessage(\"Employee registered successfully!\");\n//         alert(\"Employee registered successfully!\");\n//         fullNameRef.current.value = \"\";\n//         emailRef.current.value = \"\";\n//         mobileRef.current.value = \"\";\n//         dateRef.current.value = \"\";\n//         salaryRef.current.value = \"\";\n//         passwordRef.current.value = \"\";\n//         confirmPasswordRef.current.value = \"\";\n//       })\n//       .catch((error) => {\n//         setErrorMessage(error.message);\n//       });\n//   };\n\n//   return (\n//     <div className=\"employee-register-wrapper\">\n//       <div className=\"employee-register-card\">\n//         <h2 className=\"form-header\">Register Employee</h2>\n//         <form className=\"employee-register-form\" onSubmit={handleRegisterEmployee}>\n//           {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\n//           {successMessage && <p className=\"success-message\">{successMessage}</p>}\n//           <input className=\"input-field\" type=\"text\" placeholder=\"Full Name\" ref={fullNameRef} />\n//           <input className=\"input-field\" type=\"email\" placeholder=\"Email\" ref={emailRef} />\n//           <input className=\"input-field\" type=\"tel\" placeholder=\"Mobile Number\" ref={mobileRef} />\n//           <input className=\"input-field\" type=\"date\" placeholder=\"Joining Date\" ref={dateRef} />\n//           <input className=\"input-field\" type=\"number\" placeholder=\"Salary\" ref={salaryRef} min=\"0\" />\n//           <input className=\"input-field\" type=\"password\" placeholder=\"Password\" ref={passwordRef} />\n//           <input className=\"input-field\" type=\"password\" placeholder=\"Confirm Password\" ref={confirmPasswordRef} />\n//           <button type=\"submit\" className=\"submit-btn\">Register Employee</button>\n//         </form>\n//       </div>\n//     </div>\n//   );\n// }\n\n// import React, { useRef, useState } from \"react\";\n// import \"./EmployeeRegister.css\";\n\n// export default function EmployeeRegister() {\n//   const [errorMessage, setErrorMessage] = useState(\"\");\n//   const [successMessage, setSuccessMessage] = useState(\"\");\n//   const [role, setRole] = useState(\"employee\");\n//   const fullNameRef = useRef();\n//   const emailRef = useRef();\n//   const passwordRef = useRef();\n//   const mobileRef = useRef();\n//   const dateRef = useRef();\n//   const confirmPasswordRef = useRef();\n//   const salaryRef = useRef();\n\n//   const handleRegisterUser = (event) => {\n//     event.preventDefault();\n//     setErrorMessage(\"\");\n//     setSuccessMessage(\"\");\n\n//     const name = fullNameRef.current.value.trim();\n//     const email = emailRef.current.value.trim();\n//     const mobileNo = mobileRef.current.value.trim();\n//     const joiningDate = dateRef.current.value.trim();\n//     const password = passwordRef.current.value.trim();\n//     const confirmPassword = confirmPasswordRef.current.value.trim();\n//     const salary = role === \"employee\" ? parseFloat(salaryRef.current.value.trim()) : null;\n\n//     // Validations\n//     if (!name || !email || !mobileNo || !joiningDate || !password || !confirmPassword || (role === \"employee\" && salary === null)) {\n//       setErrorMessage(\"All fields are required!\");\n//       return;\n//     }\n//     if (!/^[a-zA-Z\\s]+$/.test(name)) {\n//       setErrorMessage(\"Please enter a valid full name!\");\n//       return;\n//     }\n//     if (!/^[6-9]\\d{9}$/.test(mobileNo)) {\n//       setErrorMessage(\"Please enter a valid mobile number!\");\n//       return;\n//     }\n//     if (!/^([a-zA-Z0-9._%+-]+)@([a-zA-Z0-9.-]+)\\.([a-zA-Z]{2,})$/.test(email)) {\n//       setErrorMessage(\"Please enter a valid email!\");\n//       return;\n//     }\n//     if (!/^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$])[A-Za-z0-9@#$]{6,12}$/.test(password)) {\n//       setErrorMessage(\"Password must be 6-12 characters, with at least one digit, one lowercase, one uppercase, and one special character (@, #, $)\");\n//       return;\n//     }\n//     if (password !== confirmPassword) {\n//       setErrorMessage(\"Passwords do not match!\");\n//       return;\n//     }\n\n//     const data = role === \"employee\" \n//       ? { name, email, mobileNo, joiningDate, salary, password, role }\n//       : { name, email, mobileNo, joiningDate, password, role };\n\n//     fetch(\"http://localhost:8085/api/employee/register\", {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify(data),\n//     })\n//       .then((response) => {\n//         if (response.status === 409) {\n//           return response.text().then((text) => {\n//             throw new Error(text || \"User already exists! Mobile number or Email is duplicated.\");\n//           });\n//         }\n//         if (!response.ok) {\n//           throw new Error(`Server error: ${response.status}`);\n//         }\n//         return response.json();\n//       })\n//       .then(() => {\n//         setSuccessMessage(`${role.charAt(0).toUpperCase() + role.slice(1)} registered successfully!`);\n//         alert(`${role.charAt(0).toUpperCase() + role.slice(1)} registered successfully!`);\n//         fullNameRef.current.value = \"\";\n//         emailRef.current.value = \"\";\n//         mobileRef.current.value = \"\";\n//         dateRef.current.value = \"\";\n//         if (role === \"employee\") salaryRef.current.value = \"\";\n//         passwordRef.current.value = \"\";\n//         confirmPasswordRef.current.value = \"\";\n//       })\n//       .catch((error) => {\n//         setErrorMessage(error.message);\n//       });\n//   };\n\n//   return (\n//     <div className=\"employee-register-wrapper\">\n//       <div className=\"employee-register-card\">\n//         <h2 className=\"form-header\">Register User</h2>\n//         <form className=\"employee-register-form\" onSubmit={handleRegisterUser}>\n//           {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\n//           {successMessage && <p className=\"success-message\">{successMessage}</p>}\n\n//           <select\n//             className=\"input-field\"\n//             value={role}\n//             onChange={(e) => setRole(e.target.value)}\n//           >\n//             <option value=\"employee\">Employee</option>\n//             <option value=\"admin\">Admin</option>\n//           </select>\n\n//           <input className=\"input-field\" type=\"text\" placeholder=\"Full Name\" ref={fullNameRef} />\n//           <input className=\"input-field\" type=\"email\" placeholder=\"Email\" ref={emailRef} />\n//           <input className=\"input-field\" type=\"tel\" placeholder=\"Mobile Number\" ref={mobileRef} />\n//           <input className=\"input-field\" type=\"date\" placeholder=\"Joining Date\" ref={dateRef} />\n//           {role === \"employee\" && <input className=\"input-field\" type=\"number\" placeholder=\"Salary\" ref={salaryRef} min=\"0\" />}\n//           <input className=\"input-field\" type=\"password\" placeholder=\"Password\" ref={passwordRef} />\n//           <input className=\"input-field\" type=\"password\" placeholder=\"Confirm Password\" ref={confirmPasswordRef} />\n//           <button type=\"submit\" className=\"submit-btn\">Register User</button>\n//         </form>\n//       </div>\n//     </div>\n//   );\n// }\n\n// import React, { useRef, useState } from \"react\";\n// import \"./EmployeeRegister.css\";\n\n// export default function EmployeeRegister() {\n//   const [errorMessage, setErrorMessage] = useState(\"\");\n//   const [successMessage, setSuccessMessage] = useState(\"\");\n//   const [role, setRole] = useState(\"employee\");\n//   const fullNameRef = useRef();\n//   const emailRef = useRef();\n//   const passwordRef = useRef();\n//   const mobileRef = useRef();\n//   const dateRef = useRef();\n//   const confirmPasswordRef = useRef();\n//   const salaryRef = useRef();\n\n//   const handleRegisterUser = (event) => {\n//     event.preventDefault();\n//     setErrorMessage(\"\");\n//     setSuccessMessage(\"\");\n\n//     const name = fullNameRef.current.value.trim();\n//     const email = emailRef.current.value.trim();\n//     const mobileNo = mobileRef.current.value.trim();\n//     const joiningDate = dateRef.current.value.trim();\n//     const password = passwordRef.current.value.trim();\n//     const confirmPassword = confirmPasswordRef.current.value.trim();\n//     const salary = role === \"employee\" ? parseFloat(salaryRef.current.value.trim()) : 0;\n\n//     // Validations\n//     if (!name || !email || !mobileNo || !joiningDate || !password || !confirmPassword || (role === \"employee\" && salary === 0)) {\n//       setErrorMessage(\"All fields are required!\");\n//       return;\n//     }\n//     if (!/^[a-zA-Z\\s]+$/.test(name)) {\n//       setErrorMessage(\"Please enter a valid full name!\");\n//       return;\n//     }\n//     if (!/^[6-9]\\d{9}$/.test(mobileNo)) {\n//       setErrorMessage(\"Please enter a valid mobile number!\");\n//       return;\n//     }\n//     if (!/^([a-zA-Z0-9._%+-]+)@([a-zA-Z0-9.-]+)\\.([a-zA-Z]{2,})$/.test(email)) {\n//       setErrorMessage(\"Please enter a valid email!\");\n//       return;\n//     }\n//     if (!/^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$])[A-Za-z0-9@#$]{6,12}$/.test(password)) {\n//       setErrorMessage(\"Password must be 6-12 characters, with at least one digit, one lowercase, one uppercase, and one special character (@, #, $)\");\n//       return;\n//     }\n//     if (password !== confirmPassword) {\n//       setErrorMessage(\"Passwords do not match!\");\n//       return;\n//     }\n\n//     const data =\n//       role === \"employee\"\n//         ? { name, email, mobileNo, joiningDate, salary, password, role: role.toUpperCase() }\n//         : { name, email, mobileNo, joiningDate, password, role: role.toUpperCase() };\n\n//     fetch(\"http://localhost:8085/api/employee/register\", {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify(data),\n//     })\n//       .then((response) => {\n//         if (response.status === 409) {\n//           return response.json().then((text) => {\n//             throw new Error(text.message || \"User already exists!\");\n//           });\n//         }\n//         if (!response.ok) {\n//           throw new Error(`Server error: ${response.status}`);\n//         }\n//         return response.json();\n//       })\n//       .then(() => {\n//         setSuccessMessage(`${role.charAt(0).toUpperCase() + role.slice(1)} registered successfully!`);\n//         fullNameRef.current.value = \"\";\n//         emailRef.current.value = \"\";\n//         mobileRef.current.value = \"\";\n//         dateRef.current.value = \"\";\n//         if (role === \"employee\") salaryRef.current.value = \"\";\n//         passwordRef.current.value = \"\";\n//         confirmPasswordRef.current.value = \"\";\n//       })\n//       .catch((error) => {\n//         setErrorMessage(error.message);\n//       });\n//   };\n\n//   return (\n//     <div className=\"employee-register-wrapper\">\n//       <div className=\"employee-register-card\">\n//         <h2 className=\"form-header\">Register User</h2>\n//         <form className=\"employee-register-form\" onSubmit={handleRegisterUser}>\n//           {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\n//           {successMessage && <p className=\"success-message\">{successMessage}</p>}\n\n//           <select\n//             className=\"input-field\"\n//             value={role}\n//             onChange={(e) => setRole(e.target.value)}\n//           >\n//             <option value=\"employee\">Employee</option>\n//             <option value=\"admin\">Admin</option>\n//           </select>\n\n//           <input className=\"input-field\" type=\"text\" placeholder=\"Full Name\" ref={fullNameRef} />\n//           <input className=\"input-field\" type=\"email\" placeholder=\"Email\" ref={emailRef} />\n//           <input className=\"input-field\" type=\"tel\" placeholder=\"Mobile Number\" ref={mobileRef} />\n//           <input className=\"input-field\" type=\"date\" placeholder=\"Joining Date\" ref={dateRef} />\n//           {role === \"employee\" && <input className=\"input-field\" type=\"number\" placeholder=\"Salary\" ref={salaryRef} min=\"0\" />}\n//           <input className=\"input-field\" type=\"password\" placeholder=\"Password\" ref={passwordRef} />\n//           <input className=\"input-field\" type=\"password\" placeholder=\"Confirm Password\" ref={confirmPasswordRef} />\n//           <button type=\"submit\" className=\"submit-btn\">Register User</button>\n//         </form>\n//       </div>\n//     </div>\n//   );\n// }\n\nimport React, { useRef, useState } from \"react\";\nimport \"./EmployeeRegister.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function EmployeeRegister() {\n  _s();\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [successMessage, setSuccessMessage] = useState(\"\");\n  const [role, setRole] = useState(\"employee\");\n  const fullNameRef = useRef();\n  const emailRef = useRef();\n  const passwordRef = useRef();\n  const mobileRef = useRef();\n  const dateRef = useRef();\n  const confirmPasswordRef = useRef();\n  const salaryRef = useRef();\n  const deleteEmailRef = useRef(); // Reference for the delete email input\n\n  const handleRegisterUser = event => {\n    event.preventDefault();\n    setErrorMessage(\"\");\n    setSuccessMessage(\"\");\n    const name = fullNameRef.current.value.trim();\n    const email = emailRef.current.value.trim();\n    const mobileNo = mobileRef.current.value.trim();\n    const joiningDate = dateRef.current.value.trim();\n    const password = passwordRef.current.value.trim();\n    const confirmPassword = confirmPasswordRef.current.value.trim();\n    const salary = role === \"employee\" ? parseFloat(salaryRef.current.value.trim()) : 0;\n\n    // Validations\n    if (!name || !email || !mobileNo || !joiningDate || !password || !confirmPassword || role === \"employee\" && salary === 0) {\n      setErrorMessage(\"All fields are required!\");\n      return;\n    }\n    if (!/^[a-zA-Z\\s]+$/.test(name)) {\n      setErrorMessage(\"Please enter a valid full name!\");\n      return;\n    }\n    if (!/^[6-9]\\d{9}$/.test(mobileNo)) {\n      setErrorMessage(\"Please enter a valid mobile number!\");\n      return;\n    }\n    if (!/^([a-zA-Z0-9._%+-]+)@([a-zA-Z0-9.-]+)\\.([a-zA-Z]{2,})$/.test(email)) {\n      setErrorMessage(\"Please enter a valid email!\");\n      return;\n    }\n    if (!/^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$])[A-Za-z0-9@#$]{6,12}$/.test(password)) {\n      setErrorMessage(\"Password must be 6-12 characters, with at least one digit, one lowercase, one uppercase, and one special character (@, #, $)\");\n      return;\n    }\n    if (password !== confirmPassword) {\n      setErrorMessage(\"Passwords do not match!\");\n      return;\n    }\n    const data = role === \"employee\" ? {\n      name,\n      email,\n      mobileNo,\n      joiningDate,\n      salary,\n      password,\n      role: role.toUpperCase()\n    } : {\n      name,\n      email,\n      mobileNo,\n      joiningDate,\n      password,\n      role: role.toUpperCase()\n    };\n    fetch(\"http://localhost:8085/api/employee/register\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    }).then(response => {\n      if (response.status === 409) {\n        return response.json().then(text => {\n          throw new Error(text.message || \"User already exists!\");\n        });\n      }\n      if (!response.ok) {\n        throw new Error(`Server error: ${response.status}`);\n      }\n      return response.json();\n    }).then(() => {\n      setSuccessMessage(`${role.charAt(0).toUpperCase() + role.slice(1)} registered successfully!`);\n      fullNameRef.current.value = \"\";\n      emailRef.current.value = \"\";\n      mobileRef.current.value = \"\";\n      dateRef.current.value = \"\";\n      if (role === \"employee\") salaryRef.current.value = \"\";\n      passwordRef.current.value = \"\";\n      confirmPasswordRef.current.value = \"\";\n    }).catch(error => {\n      setErrorMessage(error.message);\n    });\n  };\n  const handleDeleteUser = event => {\n    event.preventDefault();\n    setErrorMessage(\"\");\n    setSuccessMessage(\"\");\n    const emailToDelete = deleteEmailRef.current.value.trim();\n    if (!emailToDelete) {\n      setErrorMessage(\"Please provide an email to delete!\");\n      return;\n    }\n    fetch(`http://localhost:8085/api/employee/delete/${emailToDelete}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error(\"Failed to delete user!\");\n      }\n      return response.json();\n    }).then(() => {\n      setSuccessMessage(`User with email ${emailToDelete} has been deleted successfully!`);\n      deleteEmailRef.current.value = \"\";\n    }).catch(error => {\n      setErrorMessage(error.message);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"employee-register-wrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"employee-register-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"form-header\",\n        children: \"Register User\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"employee-register-form\",\n        onSubmit: handleRegisterUser,\n        children: [errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error-message\",\n          children: errorMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 493,\n          columnNumber: 28\n        }, this), successMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"success-message\",\n          children: successMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 494,\n          columnNumber: 30\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"input-field\",\n          value: role,\n          onChange: e => setRole(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"employee\",\n            children: \"Employee\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 501,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"admin\",\n            children: \"Admin\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 502,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 496,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"input-field\",\n          type: \"text\",\n          placeholder: \"Full Name\",\n          ref: fullNameRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 505,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"input-field\",\n          type: \"email\",\n          placeholder: \"Email\",\n          ref: emailRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 506,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"input-field\",\n          type: \"tel\",\n          placeholder: \"Mobile Number\",\n          ref: mobileRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 507,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"input-field\",\n          type: \"date\",\n          placeholder: \"Joining Date\",\n          ref: dateRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 508,\n          columnNumber: 11\n        }, this), role === \"employee\" && /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"input-field\",\n          type: \"number\",\n          placeholder: \"Salary\",\n          ref: salaryRef,\n          min: \"0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 509,\n          columnNumber: 35\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"input-field\",\n          type: \"password\",\n          placeholder: \"Password\",\n          ref: passwordRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 510,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"input-field\",\n          type: \"password\",\n          placeholder: \"Confirm Password\",\n          ref: confirmPasswordRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 511,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"submit-btn\",\n          children: \"Register User\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 512,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 492,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"form-header\",\n        children: \"Delete User\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 515,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"employee-register-form\",\n        onSubmit: handleDeleteUser,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"input-field\",\n          type: \"email\",\n          placeholder: \"Enter Email to Delete\",\n          ref: deleteEmailRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 517,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"submit-btn\",\n          children: \"Delete User\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 523,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 516,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 490,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 489,\n    columnNumber: 5\n  }, this);\n}\n_s(EmployeeRegister, \"pFdyExDH70ADeZ5SJJ8Ps0pRXi8=\");\n_c = EmployeeRegister;\nvar _c;\n$RefreshReg$(_c, \"EmployeeRegister\");","map":{"version":3,"names":["React","useRef","useState","jsxDEV","_jsxDEV","EmployeeRegister","_s","errorMessage","setErrorMessage","successMessage","setSuccessMessage","role","setRole","fullNameRef","emailRef","passwordRef","mobileRef","dateRef","confirmPasswordRef","salaryRef","deleteEmailRef","handleRegisterUser","event","preventDefault","name","current","value","trim","email","mobileNo","joiningDate","password","confirmPassword","salary","parseFloat","test","data","toUpperCase","fetch","method","headers","body","JSON","stringify","then","response","status","json","text","Error","message","ok","charAt","slice","catch","error","handleDeleteUser","emailToDelete","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","onChange","e","target","type","placeholder","ref","min","_c","$RefreshReg$"],"sources":["C:/Users/Lenovo/Desktop/New folder/project/src/components/admin/EmployeeRegister.js"],"sourcesContent":["// import React, { useRef, useState } from \"react\";\r\n// import \"./EmployeeRegister.css\";\r\n\r\n// export default function EmployeeRegister() {\r\n//   const [errorMessage, setErrorMessage] = useState(\"\");\r\n//   const [successMessage, setSuccessMessage] = useState(\"\");\r\n//   const fullNameRef = useRef();\r\n//   const emailRef = useRef();\r\n//   const passwordRef = useRef();\r\n//   const mobileRef = useRef();\r\n//   const dateRef = useRef();\r\n//   const confirmPasswordRef = useRef();\r\n//   const salaryRef = useRef();\r\n\r\n//   const handleRegisterEmployee = (event) => {\r\n//     event.preventDefault();\r\n//     setErrorMessage(\"\");\r\n//     setSuccessMessage(\"\");\r\n\r\n//     const name = fullNameRef.current.value.trim();\r\n//     const email = emailRef.current.value.trim();\r\n//     const mobileNo = mobileRef.current.value.trim();\r\n//     const joiningDate = dateRef.current.value.trim();\r\n//     const password = passwordRef.current.value.trim();\r\n//     const confirmPassword = confirmPasswordRef.current.value.trim();\r\n//     const salary = parseFloat(salaryRef.current.value.trim());\r\n\r\n//     // Validations\r\n//     if (!name || !email || !mobileNo || !joiningDate || !password || !confirmPassword || !salary) {\r\n//       setErrorMessage(\"All fields are required!\");\r\n//       return;\r\n//     }\r\n//     if (!/^[a-zA-Z\\s]+$/.test(name)) {\r\n//       setErrorMessage(\"Please enter a valid full name!\");\r\n//       return;\r\n//     }\r\n//     if (!/^[6-9]\\d{9}$/.test(mobileNo)) {\r\n//       setErrorMessage(\"Please enter a valid mobile number!\");\r\n//       return;\r\n//     }\r\n//     if (!/^([a-zA-Z0-9._%+-]+)@([a-zA-Z0-9.-]+)\\.([a-zA-Z]{2,})$/.test(email)) {\r\n//       setErrorMessage(\"Please enter a valid email!\");\r\n//       return;\r\n//     }\r\n//     if (!/^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$])[A-Za-z0-9@#$]{6,12}$/.test(password)) {\r\n//       setErrorMessage(\"Password must be 6-12 characters, with at least one digit, one lowercase, one uppercase, and one special character (@, #, $)\");\r\n//       return;\r\n//     }\r\n//     if (password !== confirmPassword) {\r\n//       setErrorMessage(\"Passwords do not match!\");\r\n//       return;\r\n//     }\r\n\r\n//     const data = { name, email, mobileNo, joiningDate, salary, password };\r\n\r\n//     fetch(\"http://localhost:8085/api/employee/addUser\", {\r\n//       method: \"POST\",\r\n//       headers: {\r\n//         \"Content-Type\": \"application/json\",\r\n//       },\r\n//       body: JSON.stringify(data),\r\n//     })\r\n//       .then((response) => {\r\n//         if (response.status === 409) {\r\n//           return response.text().then((text) => {\r\n//             throw new Error(text || \"Employee already exists! Mobile number or Email is duplicated.\");\r\n//           });\r\n//         }\r\n//         if (!response.ok) {\r\n//           throw new Error(`Server error: ${response.status}`);\r\n//         }\r\n//         return response.json();\r\n//       })\r\n//       .then((data) => {\r\n//         setSuccessMessage(\"Employee registered successfully!\");\r\n//         alert(\"Employee registered successfully!\");\r\n//         fullNameRef.current.value = \"\";\r\n//         emailRef.current.value = \"\";\r\n//         mobileRef.current.value = \"\";\r\n//         dateRef.current.value = \"\";\r\n//         salaryRef.current.value = \"\";\r\n//         passwordRef.current.value = \"\";\r\n//         confirmPasswordRef.current.value = \"\";\r\n//       })\r\n//       .catch((error) => {\r\n//         setErrorMessage(error.message);\r\n//       });\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"employee-register-wrapper\">\r\n//       <div className=\"employee-register-card\">\r\n//         <h2 className=\"form-header\">Register Employee</h2>\r\n//         <form className=\"employee-register-form\" onSubmit={handleRegisterEmployee}>\r\n//           {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\r\n//           {successMessage && <p className=\"success-message\">{successMessage}</p>}\r\n//           <input className=\"input-field\" type=\"text\" placeholder=\"Full Name\" ref={fullNameRef} />\r\n//           <input className=\"input-field\" type=\"email\" placeholder=\"Email\" ref={emailRef} />\r\n//           <input className=\"input-field\" type=\"tel\" placeholder=\"Mobile Number\" ref={mobileRef} />\r\n//           <input className=\"input-field\" type=\"date\" placeholder=\"Joining Date\" ref={dateRef} />\r\n//           <input className=\"input-field\" type=\"number\" placeholder=\"Salary\" ref={salaryRef} min=\"0\" />\r\n//           <input className=\"input-field\" type=\"password\" placeholder=\"Password\" ref={passwordRef} />\r\n//           <input className=\"input-field\" type=\"password\" placeholder=\"Confirm Password\" ref={confirmPasswordRef} />\r\n//           <button type=\"submit\" className=\"submit-btn\">Register Employee</button>\r\n//         </form>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n\r\n\r\n// import React, { useRef, useState } from \"react\";\r\n// import \"./EmployeeRegister.css\";\r\n\r\n// export default function EmployeeRegister() {\r\n//   const [errorMessage, setErrorMessage] = useState(\"\");\r\n//   const [successMessage, setSuccessMessage] = useState(\"\");\r\n//   const [role, setRole] = useState(\"employee\");\r\n//   const fullNameRef = useRef();\r\n//   const emailRef = useRef();\r\n//   const passwordRef = useRef();\r\n//   const mobileRef = useRef();\r\n//   const dateRef = useRef();\r\n//   const confirmPasswordRef = useRef();\r\n//   const salaryRef = useRef();\r\n\r\n//   const handleRegisterUser = (event) => {\r\n//     event.preventDefault();\r\n//     setErrorMessage(\"\");\r\n//     setSuccessMessage(\"\");\r\n\r\n//     const name = fullNameRef.current.value.trim();\r\n//     const email = emailRef.current.value.trim();\r\n//     const mobileNo = mobileRef.current.value.trim();\r\n//     const joiningDate = dateRef.current.value.trim();\r\n//     const password = passwordRef.current.value.trim();\r\n//     const confirmPassword = confirmPasswordRef.current.value.trim();\r\n//     const salary = role === \"employee\" ? parseFloat(salaryRef.current.value.trim()) : null;\r\n\r\n//     // Validations\r\n//     if (!name || !email || !mobileNo || !joiningDate || !password || !confirmPassword || (role === \"employee\" && salary === null)) {\r\n//       setErrorMessage(\"All fields are required!\");\r\n//       return;\r\n//     }\r\n//     if (!/^[a-zA-Z\\s]+$/.test(name)) {\r\n//       setErrorMessage(\"Please enter a valid full name!\");\r\n//       return;\r\n//     }\r\n//     if (!/^[6-9]\\d{9}$/.test(mobileNo)) {\r\n//       setErrorMessage(\"Please enter a valid mobile number!\");\r\n//       return;\r\n//     }\r\n//     if (!/^([a-zA-Z0-9._%+-]+)@([a-zA-Z0-9.-]+)\\.([a-zA-Z]{2,})$/.test(email)) {\r\n//       setErrorMessage(\"Please enter a valid email!\");\r\n//       return;\r\n//     }\r\n//     if (!/^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$])[A-Za-z0-9@#$]{6,12}$/.test(password)) {\r\n//       setErrorMessage(\"Password must be 6-12 characters, with at least one digit, one lowercase, one uppercase, and one special character (@, #, $)\");\r\n//       return;\r\n//     }\r\n//     if (password !== confirmPassword) {\r\n//       setErrorMessage(\"Passwords do not match!\");\r\n//       return;\r\n//     }\r\n\r\n//     const data = role === \"employee\" \r\n//       ? { name, email, mobileNo, joiningDate, salary, password, role }\r\n//       : { name, email, mobileNo, joiningDate, password, role };\r\n\r\n//     fetch(\"http://localhost:8085/api/employee/register\", {\r\n//       method: \"POST\",\r\n//       headers: {\r\n//         \"Content-Type\": \"application/json\",\r\n//       },\r\n//       body: JSON.stringify(data),\r\n//     })\r\n//       .then((response) => {\r\n//         if (response.status === 409) {\r\n//           return response.text().then((text) => {\r\n//             throw new Error(text || \"User already exists! Mobile number or Email is duplicated.\");\r\n//           });\r\n//         }\r\n//         if (!response.ok) {\r\n//           throw new Error(`Server error: ${response.status}`);\r\n//         }\r\n//         return response.json();\r\n//       })\r\n//       .then(() => {\r\n//         setSuccessMessage(`${role.charAt(0).toUpperCase() + role.slice(1)} registered successfully!`);\r\n//         alert(`${role.charAt(0).toUpperCase() + role.slice(1)} registered successfully!`);\r\n//         fullNameRef.current.value = \"\";\r\n//         emailRef.current.value = \"\";\r\n//         mobileRef.current.value = \"\";\r\n//         dateRef.current.value = \"\";\r\n//         if (role === \"employee\") salaryRef.current.value = \"\";\r\n//         passwordRef.current.value = \"\";\r\n//         confirmPasswordRef.current.value = \"\";\r\n//       })\r\n//       .catch((error) => {\r\n//         setErrorMessage(error.message);\r\n//       });\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"employee-register-wrapper\">\r\n//       <div className=\"employee-register-card\">\r\n//         <h2 className=\"form-header\">Register User</h2>\r\n//         <form className=\"employee-register-form\" onSubmit={handleRegisterUser}>\r\n//           {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\r\n//           {successMessage && <p className=\"success-message\">{successMessage}</p>}\r\n\r\n//           <select\r\n//             className=\"input-field\"\r\n//             value={role}\r\n//             onChange={(e) => setRole(e.target.value)}\r\n//           >\r\n//             <option value=\"employee\">Employee</option>\r\n//             <option value=\"admin\">Admin</option>\r\n//           </select>\r\n\r\n//           <input className=\"input-field\" type=\"text\" placeholder=\"Full Name\" ref={fullNameRef} />\r\n//           <input className=\"input-field\" type=\"email\" placeholder=\"Email\" ref={emailRef} />\r\n//           <input className=\"input-field\" type=\"tel\" placeholder=\"Mobile Number\" ref={mobileRef} />\r\n//           <input className=\"input-field\" type=\"date\" placeholder=\"Joining Date\" ref={dateRef} />\r\n//           {role === \"employee\" && <input className=\"input-field\" type=\"number\" placeholder=\"Salary\" ref={salaryRef} min=\"0\" />}\r\n//           <input className=\"input-field\" type=\"password\" placeholder=\"Password\" ref={passwordRef} />\r\n//           <input className=\"input-field\" type=\"password\" placeholder=\"Confirm Password\" ref={confirmPasswordRef} />\r\n//           <button type=\"submit\" className=\"submit-btn\">Register User</button>\r\n//         </form>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n\r\n// import React, { useRef, useState } from \"react\";\r\n// import \"./EmployeeRegister.css\";\r\n\r\n// export default function EmployeeRegister() {\r\n//   const [errorMessage, setErrorMessage] = useState(\"\");\r\n//   const [successMessage, setSuccessMessage] = useState(\"\");\r\n//   const [role, setRole] = useState(\"employee\");\r\n//   const fullNameRef = useRef();\r\n//   const emailRef = useRef();\r\n//   const passwordRef = useRef();\r\n//   const mobileRef = useRef();\r\n//   const dateRef = useRef();\r\n//   const confirmPasswordRef = useRef();\r\n//   const salaryRef = useRef();\r\n\r\n//   const handleRegisterUser = (event) => {\r\n//     event.preventDefault();\r\n//     setErrorMessage(\"\");\r\n//     setSuccessMessage(\"\");\r\n\r\n//     const name = fullNameRef.current.value.trim();\r\n//     const email = emailRef.current.value.trim();\r\n//     const mobileNo = mobileRef.current.value.trim();\r\n//     const joiningDate = dateRef.current.value.trim();\r\n//     const password = passwordRef.current.value.trim();\r\n//     const confirmPassword = confirmPasswordRef.current.value.trim();\r\n//     const salary = role === \"employee\" ? parseFloat(salaryRef.current.value.trim()) : 0;\r\n\r\n//     // Validations\r\n//     if (!name || !email || !mobileNo || !joiningDate || !password || !confirmPassword || (role === \"employee\" && salary === 0)) {\r\n//       setErrorMessage(\"All fields are required!\");\r\n//       return;\r\n//     }\r\n//     if (!/^[a-zA-Z\\s]+$/.test(name)) {\r\n//       setErrorMessage(\"Please enter a valid full name!\");\r\n//       return;\r\n//     }\r\n//     if (!/^[6-9]\\d{9}$/.test(mobileNo)) {\r\n//       setErrorMessage(\"Please enter a valid mobile number!\");\r\n//       return;\r\n//     }\r\n//     if (!/^([a-zA-Z0-9._%+-]+)@([a-zA-Z0-9.-]+)\\.([a-zA-Z]{2,})$/.test(email)) {\r\n//       setErrorMessage(\"Please enter a valid email!\");\r\n//       return;\r\n//     }\r\n//     if (!/^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$])[A-Za-z0-9@#$]{6,12}$/.test(password)) {\r\n//       setErrorMessage(\"Password must be 6-12 characters, with at least one digit, one lowercase, one uppercase, and one special character (@, #, $)\");\r\n//       return;\r\n//     }\r\n//     if (password !== confirmPassword) {\r\n//       setErrorMessage(\"Passwords do not match!\");\r\n//       return;\r\n//     }\r\n\r\n//     const data =\r\n//       role === \"employee\"\r\n//         ? { name, email, mobileNo, joiningDate, salary, password, role: role.toUpperCase() }\r\n//         : { name, email, mobileNo, joiningDate, password, role: role.toUpperCase() };\r\n\r\n//     fetch(\"http://localhost:8085/api/employee/register\", {\r\n//       method: \"POST\",\r\n//       headers: {\r\n//         \"Content-Type\": \"application/json\",\r\n//       },\r\n//       body: JSON.stringify(data),\r\n//     })\r\n//       .then((response) => {\r\n//         if (response.status === 409) {\r\n//           return response.json().then((text) => {\r\n//             throw new Error(text.message || \"User already exists!\");\r\n//           });\r\n//         }\r\n//         if (!response.ok) {\r\n//           throw new Error(`Server error: ${response.status}`);\r\n//         }\r\n//         return response.json();\r\n//       })\r\n//       .then(() => {\r\n//         setSuccessMessage(`${role.charAt(0).toUpperCase() + role.slice(1)} registered successfully!`);\r\n//         fullNameRef.current.value = \"\";\r\n//         emailRef.current.value = \"\";\r\n//         mobileRef.current.value = \"\";\r\n//         dateRef.current.value = \"\";\r\n//         if (role === \"employee\") salaryRef.current.value = \"\";\r\n//         passwordRef.current.value = \"\";\r\n//         confirmPasswordRef.current.value = \"\";\r\n//       })\r\n//       .catch((error) => {\r\n//         setErrorMessage(error.message);\r\n//       });\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"employee-register-wrapper\">\r\n//       <div className=\"employee-register-card\">\r\n//         <h2 className=\"form-header\">Register User</h2>\r\n//         <form className=\"employee-register-form\" onSubmit={handleRegisterUser}>\r\n//           {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\r\n//           {successMessage && <p className=\"success-message\">{successMessage}</p>}\r\n\r\n//           <select\r\n//             className=\"input-field\"\r\n//             value={role}\r\n//             onChange={(e) => setRole(e.target.value)}\r\n//           >\r\n//             <option value=\"employee\">Employee</option>\r\n//             <option value=\"admin\">Admin</option>\r\n//           </select>\r\n\r\n//           <input className=\"input-field\" type=\"text\" placeholder=\"Full Name\" ref={fullNameRef} />\r\n//           <input className=\"input-field\" type=\"email\" placeholder=\"Email\" ref={emailRef} />\r\n//           <input className=\"input-field\" type=\"tel\" placeholder=\"Mobile Number\" ref={mobileRef} />\r\n//           <input className=\"input-field\" type=\"date\" placeholder=\"Joining Date\" ref={dateRef} />\r\n//           {role === \"employee\" && <input className=\"input-field\" type=\"number\" placeholder=\"Salary\" ref={salaryRef} min=\"0\" />}\r\n//           <input className=\"input-field\" type=\"password\" placeholder=\"Password\" ref={passwordRef} />\r\n//           <input className=\"input-field\" type=\"password\" placeholder=\"Confirm Password\" ref={confirmPasswordRef} />\r\n//           <button type=\"submit\" className=\"submit-btn\">Register User</button>\r\n//         </form>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n\r\n\r\nimport React, { useRef, useState } from \"react\";\r\nimport \"./EmployeeRegister.css\";\r\n\r\nexport default function EmployeeRegister() {\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n  const [successMessage, setSuccessMessage] = useState(\"\");\r\n  const [role, setRole] = useState(\"employee\");\r\n  const fullNameRef = useRef();\r\n  const emailRef = useRef();\r\n  const passwordRef = useRef();\r\n  const mobileRef = useRef();\r\n  const dateRef = useRef();\r\n  const confirmPasswordRef = useRef();\r\n  const salaryRef = useRef();\r\n  const deleteEmailRef = useRef(); // Reference for the delete email input\r\n\r\n  const handleRegisterUser = (event) => {\r\n    event.preventDefault();\r\n    setErrorMessage(\"\");\r\n    setSuccessMessage(\"\");\r\n\r\n    const name = fullNameRef.current.value.trim();\r\n    const email = emailRef.current.value.trim();\r\n    const mobileNo = mobileRef.current.value.trim();\r\n    const joiningDate = dateRef.current.value.trim();\r\n    const password = passwordRef.current.value.trim();\r\n    const confirmPassword = confirmPasswordRef.current.value.trim();\r\n    const salary = role === \"employee\" ? parseFloat(salaryRef.current.value.trim()) : 0;\r\n\r\n    // Validations\r\n    if (!name || !email || !mobileNo || !joiningDate || !password || !confirmPassword || (role === \"employee\" && salary === 0)) {\r\n      setErrorMessage(\"All fields are required!\");\r\n      return;\r\n    }\r\n    if (!/^[a-zA-Z\\s]+$/.test(name)) {\r\n      setErrorMessage(\"Please enter a valid full name!\");\r\n      return;\r\n    }\r\n    if (!/^[6-9]\\d{9}$/.test(mobileNo)) {\r\n      setErrorMessage(\"Please enter a valid mobile number!\");\r\n      return;\r\n    }\r\n    if (!/^([a-zA-Z0-9._%+-]+)@([a-zA-Z0-9.-]+)\\.([a-zA-Z]{2,})$/.test(email)) {\r\n      setErrorMessage(\"Please enter a valid email!\");\r\n      return;\r\n    }\r\n    if (!/^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$])[A-Za-z0-9@#$]{6,12}$/.test(password)) {\r\n      setErrorMessage(\"Password must be 6-12 characters, with at least one digit, one lowercase, one uppercase, and one special character (@, #, $)\");\r\n      return;\r\n    }\r\n    if (password !== confirmPassword) {\r\n      setErrorMessage(\"Passwords do not match!\");\r\n      return;\r\n    }\r\n\r\n    const data =\r\n      role === \"employee\"\r\n        ? { name, email, mobileNo, joiningDate, salary, password, role: role.toUpperCase() }\r\n        : { name, email, mobileNo, joiningDate, password, role: role.toUpperCase() };\r\n\r\n    fetch(\"http://localhost:8085/api/employee/register\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(data),\r\n    })\r\n      .then((response) => {\r\n        if (response.status === 409) {\r\n          return response.json().then((text) => {\r\n            throw new Error(text.message || \"User already exists!\");\r\n          });\r\n        }\r\n        if (!response.ok) {\r\n          throw new Error(`Server error: ${response.status}`);\r\n        }\r\n        return response.json();\r\n      })\r\n      .then(() => {\r\n        setSuccessMessage(`${role.charAt(0).toUpperCase() + role.slice(1)} registered successfully!`);\r\n        fullNameRef.current.value = \"\";\r\n        emailRef.current.value = \"\";\r\n        mobileRef.current.value = \"\";\r\n        dateRef.current.value = \"\";\r\n        if (role === \"employee\") salaryRef.current.value = \"\";\r\n        passwordRef.current.value = \"\";\r\n        confirmPasswordRef.current.value = \"\";\r\n      })\r\n      .catch((error) => {\r\n        setErrorMessage(error.message);\r\n      });\r\n  };\r\n\r\n  const handleDeleteUser = (event) => {\r\n    event.preventDefault();\r\n    setErrorMessage(\"\");\r\n    setSuccessMessage(\"\");\r\n\r\n    const emailToDelete = deleteEmailRef.current.value.trim();\r\n\r\n    if (!emailToDelete) {\r\n      setErrorMessage(\"Please provide an email to delete!\");\r\n      return;\r\n    }\r\n\r\n    fetch(`http://localhost:8085/api/employee/delete/${emailToDelete}`, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to delete user!\");\r\n        }\r\n        return response.json();\r\n      })\r\n      .then(() => {\r\n        setSuccessMessage(`User with email ${emailToDelete} has been deleted successfully!`);\r\n        deleteEmailRef.current.value = \"\";\r\n      })\r\n      .catch((error) => {\r\n        setErrorMessage(error.message);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"employee-register-wrapper\">\r\n      <div className=\"employee-register-card\">\r\n        <h2 className=\"form-header\">Register User</h2>\r\n        <form className=\"employee-register-form\" onSubmit={handleRegisterUser}>\r\n          {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\r\n          {successMessage && <p className=\"success-message\">{successMessage}</p>}\r\n\r\n          <select\r\n            className=\"input-field\"\r\n            value={role}\r\n            onChange={(e) => setRole(e.target.value)}\r\n          >\r\n            <option value=\"employee\">Employee</option>\r\n            <option value=\"admin\">Admin</option>\r\n          </select>\r\n\r\n          <input className=\"input-field\" type=\"text\" placeholder=\"Full Name\" ref={fullNameRef} />\r\n          <input className=\"input-field\" type=\"email\" placeholder=\"Email\" ref={emailRef} />\r\n          <input className=\"input-field\" type=\"tel\" placeholder=\"Mobile Number\" ref={mobileRef} />\r\n          <input className=\"input-field\" type=\"date\" placeholder=\"Joining Date\" ref={dateRef} />\r\n          {role === \"employee\" && <input className=\"input-field\" type=\"number\" placeholder=\"Salary\" ref={salaryRef} min=\"0\" />}\r\n          <input className=\"input-field\" type=\"password\" placeholder=\"Password\" ref={passwordRef} />\r\n          <input className=\"input-field\" type=\"password\" placeholder=\"Confirm Password\" ref={confirmPasswordRef} />\r\n          <button type=\"submit\" className=\"submit-btn\">Register User</button>\r\n        </form>\r\n\r\n        <h2 className=\"form-header\">Delete User</h2>\r\n        <form className=\"employee-register-form\" onSubmit={handleDeleteUser}>\r\n          <input\r\n            className=\"input-field\"\r\n            type=\"email\"\r\n            placeholder=\"Enter Email to Delete\"\r\n            ref={deleteEmailRef}\r\n          />\r\n          <button type=\"submit\" className=\"submit-btn\">Delete User</button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}