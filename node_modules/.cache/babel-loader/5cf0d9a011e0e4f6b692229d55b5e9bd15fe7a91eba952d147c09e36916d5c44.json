{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\New folder\\\\project\\\\src\\\\components\\\\Employee\\\\ProcessingStatus.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import { Button, ListGroup, Form, Row, Col } from \"react-bootstrap\";\n// import axios from \"axios\";\n// import \"./ProcessingStatus.css\";\n\n// function ProcessingStatus() {\n//   const [requests, setRequests] = useState([]);\n//   const [pickupDate, setPickupDate] = useState(\"\");\n\n//   useEffect(() => {\n//     fetchRequests();\n//   }, []);\n\n//   const fetchRequests = async () => {\n//     try {\n//       const response = await axios.get(\"/api/waste-requests\");\n//       setRequests(response.data);\n//     } catch (error) {\n//       console.error(\"Error fetching requests:\", error);\n//     }\n//   };\n\n//   const handleConfirmRequest = async (requestId) => {\n//     try {\n//       await axios.put(`/api/confirm-request/${requestId}`, { status: \"confirmed\", pickupDate });\n//       fetchRequests();\n//     } catch (error) {\n//       console.error(\"Error confirming request:\", error);\n//     }\n//   };\n\n//   const handleRejectRequest = async (requestId) => {\n//     try {\n//       await axios.put(`/api/reject-request/${requestId}`, { status: \"rejected\" });\n//       fetchRequests();\n//     } catch (error) {\n//       console.error(\"Error rejecting request:\", error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"container\">\n//     <div className=\"processing-status-container\">\n//       <h1>Processing Status</h1>\n//       <p>Track the status of ongoing waste processing.</p>\n\n//       <h3>Waste Requests</h3>\n//       <ListGroup>\n//         {requests.length === 0 ? (\n//           <ListGroup.Item>No requests available</ListGroup.Item>\n//         ) : (\n//           requests.map((request) => (\n//             <ListGroup.Item key={request.id}>\n//               <Row>\n//                 <Col md={6}>\n//                   <p>Type: {request.type}</p>\n//                   <p>Volume: {request.volume} tons</p>\n//                   <p>Source: {request.source}</p>\n//                   <p>Date: {request.date}</p>\n//                 </Col>\n//                 <Col md={6}>\n//                   {request.status !== \"confirmed\" && (\n//                     <>\n//                       <Button\n//                         variant=\"success\"\n//                         onClick={() => handleConfirmRequest(request.id)}\n//                       >\n//                         Confirm\n//                       </Button>\n//                       <Button\n//                         variant=\"danger\"\n//                         onClick={() => handleRejectRequest(request.id)}\n//                       >\n//                         Reject\n//                       </Button>\n//                     </>\n//                   )}\n//                   {request.status === \"confirmed\" && (\n//                     <p>Pickup Scheduled for: {pickupDate}</p>\n//                   )}\n//                 </Col>\n//               </Row>\n//               {request.status === \"confirmed\" && (\n//                 <Row className=\"mt-3\">\n//                   <Col md={12}>\n//                     <Form.Control\n//                       type=\"date\"\n//                       value={pickupDate}\n//                       onChange={(e) => setPickupDate(e.target.value)}\n//                       placeholder=\"Schedule Pickup Date\"\n//                     />\n//                   </Col>\n//                 </Row>\n//               )}\n//             </ListGroup.Item>\n//           ))\n//         )}\n//       </ListGroup>\n//     </div>\n//     </div>\n//   );\n// }\n\n// export default ProcessingStatus;\n\n// import React, { useState, useEffect } from \"react\";\n// import { Button, ListGroup, Form, Row, Col, Modal, Card } from \"react-bootstrap\";\n// import axios from \"axios\";\n// import \"./ProcessingStatus.css\";\n\n// function ProcessingStatus() {\n//   const [requests, setRequests] = useState([]);\n//   const [pickupDate, setPickupDate] = useState(\"\");\n//   const [driverName, setDriverName] = useState(\"\");\n//   const [additionalInfo, setAdditionalInfo] = useState(\"\");\n//   const [showScheduleModal, setShowScheduleModal] = useState(false);\n//   const [selectedRequest, setSelectedRequest] = useState(null);\n//   const [rejectReason, setRejectReason] = useState(\"\");\n//   const [showRejectModal, setShowRejectModal] = useState(false);\n\n//   useEffect(() => {\n//     // Mocking API data for testing\n//     const mockRequests = [\n//       {\n//         id: 1,\n//         type: \"Plastic\",\n//         volume: 5,\n//         source: \"Farmer A\",\n//         date: \"2024-12-10\",\n//         status: \"pending\",\n//       },\n//       {\n//         id: 2,\n//         type: \"Organic\",\n//         volume: 3,\n//         source: \"Farmer B\",\n//         date: \"2024-12-12\",\n//         status: \"pending\",\n//       },\n//       {\n//         id: 3,\n//         type: \"Glass\",\n//         volume: 2,\n//         source: \"Farmer C\",\n//         date: \"2024-12-11\",\n//         status: \"confirmed\",\n//       },\n//     ];\n//     setRequests(mockRequests);\n//   }, []);\n\n//   const handleConfirmRequest = async (requestId) => {\n//     try {\n//       setRequests((prevRequests) =>\n//         prevRequests.map((request) =>\n//           request.id === requestId\n//             ? { ...request, status: \"confirmed\" }\n//             : request\n//         )\n//       );\n//     } catch (error) {\n//       console.error(\"Error confirming request:\", error);\n//     }\n//   };\n\n//   const handleRejectRequest = (requestId) => {\n//     setSelectedRequest(requestId);\n//     setShowRejectModal(true);\n//   };\n\n//   const handleRejectSubmit = async () => {\n//     try {\n//       setRequests((prevRequests) =>\n//         prevRequests.map((request) =>\n//           request.id === selectedRequest\n//             ? { ...request, status: \"rejected\", rejectReason }\n//             : request\n//         )\n//       );\n//       setShowRejectModal(false);\n//       setRejectReason(\"\");\n//     } catch (error) {\n//       console.error(\"Error rejecting request:\", error);\n//     }\n//   };\n\n//   const handleSchedulePickup = (requestId) => {\n//     setSelectedRequest(requestId);\n//     setShowScheduleModal(true);\n//   };\n\n//   const handleScheduleSubmit = async () => {\n//     try {\n//       setRequests((prevRequests) =>\n//         prevRequests.map((request) =>\n//           request.id === selectedRequest\n//             ? {\n//                 ...request,\n//                 status: \"pickupScheduled\",\n//                 pickupDate,\n//                 driverName,\n//                 additionalInfo,\n//               }\n//             : request\n//         )\n//       );\n//       setShowScheduleModal(false);\n//       setPickupDate(\"\");\n//       setDriverName(\"\");\n//       setAdditionalInfo(\"\");\n//     } catch (error) {\n//       console.error(\"Error scheduling pickup:\", error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"container\">\n//     <div className=\"processing-status-container\">\n//       <h1>Processing Status</h1>\n//       <p>Track the status of ongoing waste processing.</p>\n\n//       <h3>Waste Requests</h3>\n//       <div className=\"requests-list\">\n//         {requests.length === 0 ? (\n//           <p>No requests available</p>\n//         ) : (\n//           requests.map((request) => (\n//             <Card key={request.id} className=\"request-card mb-3\">\n//               <Card.Body>\n//                 <Row>\n//                   <Col md={6}>\n//                     <p><strong>Type:</strong> {request.type}</p>\n//                     <p><strong>Volume:</strong> {request.volume} tons</p>\n//                     <p><strong>Source:</strong> {request.source}</p>\n//                     <p><strong>Date:</strong> {request.date}</p>\n//                   </Col>\n//                   <Col md={6}>\n//                     {request.status === \"pending\" && (\n//                       <>\n//                         <Button\n//                           variant=\"success\"\n//                           onClick={() => handleConfirmRequest(request.id)}\n//                           className=\"mr-2\"\n//                         >\n//                           Confirm\n//                         </Button>\n//                         <Button\n//                           variant=\"danger\"\n//                           onClick={() => handleRejectRequest(request.id)}\n//                         >\n//                           Reject\n//                         </Button>\n//                       </>\n//                     )}\n//                     {request.status === \"confirmed\" && (\n//                       <>\n//                         <p>Pickup Scheduled for: {request.pickupDate}</p>\n//                         <Button\n//                           variant=\"primary\"\n//                           onClick={() => handleSchedulePickup(request.id)}\n//                           className=\"mt-2\"\n//                         >\n//                           Schedule Pickup\n//                         </Button>\n//                       </>\n//                     )}\n//                     {request.status === \"pickupScheduled\" && (\n//                       <p>\n//                         Pickup scheduled for: {request.pickupDate}<br />\n//                         <strong>Driver Name:</strong> {request.driverName}<br />\n//                         <strong>Additional Info:</strong> {request.additionalInfo}\n//                       </p>\n//                     )}\n//                     {request.status === \"rejected\" && (\n//                       <p><strong>Reason for Rejection:</strong> {request.rejectReason}</p>\n//                     )}\n//                   </Col>\n//                 </Row>\n//               </Card.Body>\n//             </Card>\n//           ))\n//         )}\n//       </div>\n//       </div>\n\n//       <Modal show={showRejectModal} onHide={() => setShowRejectModal(false)}>\n//         <Modal.Header closeButton>\n//           <Modal.Title>Reject Reason</Modal.Title>\n//         </Modal.Header>\n//         <Modal.Body>\n//           <Form.Group>\n//             <Form.Label>Provide a reason for rejection:</Form.Label>\n//             <Form.Control\n//               as=\"textarea\"\n//               rows={3}\n//               value={rejectReason}\n//               onChange={(e) => setRejectReason(e.target.value)}\n//             />\n//           </Form.Group>\n//         </Modal.Body>\n//         <Modal.Footer>\n//           <Button variant=\"secondary\" onClick={() => setShowRejectModal(false)}>\n//             Close\n//           </Button>\n//           <Button variant=\"danger\" onClick={handleRejectSubmit}>\n//             Submit Rejection\n//           </Button>\n//         </Modal.Footer>\n//       </Modal>\n\n//       {/* Schedule Pickup Modal */}\n//       <Modal show={showScheduleModal} onHide={() => setShowScheduleModal(false)}>\n//         <Modal.Header closeButton>\n//           <Modal.Title>Schedule Pickup</Modal.Title>\n//         </Modal.Header>\n//         <Modal.Body>\n//           <Form.Group>\n//             <Form.Label>Pickup Date:</Form.Label>\n//             <Form.Control\n//               type=\"date\"\n//               value={pickupDate}\n//               onChange={(e) => setPickupDate(e.target.value)}\n//             />\n//           </Form.Group>\n//           <Form.Group>\n//             <Form.Label>Driver Name:</Form.Label>\n//             <Form.Control\n//               type=\"text\"\n//               value={driverName}\n//               onChange={(e) => setDriverName(e.target.value)}\n//               placeholder=\"Enter driver's name\"\n//             />\n//           </Form.Group>\n//           <Form.Group>\n//             <Form.Label>Additional Information:</Form.Label>\n//             <Form.Control\n//               as=\"textarea\"\n//               rows={3}\n//               value={additionalInfo}\n//               onChange={(e) => setAdditionalInfo(e.target.value)}\n//               placeholder=\"Enter any additional info\"\n//             />\n//           </Form.Group>\n//         </Modal.Body>\n//         <Modal.Footer>\n//           <Button variant=\"secondary\" onClick={() => setShowScheduleModal(false)}>\n//             Close\n//           </Button>\n//           <Button variant=\"primary\" onClick={handleScheduleSubmit}>\n//             Schedule Pickup\n//           </Button>\n//         </Modal.Footer>\n//       </Modal>\n//     </div>\n//   );\n// }\n\n// export default ProcessingStatus;\n\nimport React, { useState, useEffect } from \"react\";\nimport { Button, Row, Col, Modal, Card, Form } from \"react-bootstrap\";\nimport \"./ProcessingStatus.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ProcessingStatus() {\n  _s();\n  const [requests, setRequests] = useState([]);\n  const [pickupDate, setPickupDate] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [rejectionMessage, setRejectionMessage] = useState(\"\");\n  const [showScheduleModal, setShowScheduleModal] = useState(false);\n  const [showRejectionModal, setShowRejectionModal] = useState(false);\n  const [selectedRequest, setSelectedRequest] = useState(null);\n  const [filter, setFilter] = useState(\"NEW\");\n\n  // Fetch data from API\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(\"http://localhost:8085/waste-details/orders\");\n        const data = await response.json();\n        if (Array.isArray(data)) {\n          setRequests(data);\n        } else {\n          console.error(\"Invalid data received from API\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n    fetchData();\n  }, []);\n\n  // Open Schedule Modal for Confirm Request\n  const handleConfirmRequest = requestId => {\n    setSelectedRequest(requestId);\n    setShowScheduleModal(true);\n  };\n\n  // Handle Schedule Pickup\n  const handleSchedulePickup = async () => {\n    const updatedData = {\n      status: \"ACCEPTED\",\n      pickupDate,\n      message\n    };\n    try {\n      const response = await fetch(`http://localhost:8085/waste-details/update/${selectedRequest}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(updatedData)\n      });\n      if (response.ok) {\n        setRequests(prevRequests => prevRequests.map(request => request.id === selectedRequest ? {\n          ...request,\n          ...updatedData\n        } : request));\n        setShowScheduleModal(false);\n      } else {\n        console.error(\"Error updating request\");\n      }\n    } catch (error) {\n      console.error(\"Error updating status:\", error);\n    }\n  };\n\n  // Handle Collect Request with Confirmation Alert\n  const handleCollectRequest = async requestId => {\n    const isConfirmed = window.confirm(\"Are you sure you want to mark this request as collected?\");\n    if (!isConfirmed) return;\n    const updatedData = {\n      status: \"COLLECTED\"\n    };\n    try {\n      const response = await fetch(`http://localhost:8085/waste-details/update/${requestId}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(updatedData)\n      });\n      if (response.ok) {\n        setRequests(prevRequests => prevRequests.map(request => request.id === requestId ? {\n          ...request,\n          ...updatedData\n        } : request));\n        alert(\"Request successfully marked as collected!\");\n      } else {\n        console.error(\"Error updating request to collected\");\n      }\n    } catch (error) {\n      console.error(\"Error updating status:\", error);\n    }\n  };\n\n  // Open Rejection Modal\n  const handleRejectRequest = requestId => {\n    setSelectedRequest(requestId);\n    setShowRejectionModal(true);\n  };\n\n  // Handle Reject with Message\n  const handleConfirmRejection = async () => {\n    const updatedData = {\n      status: \"REJECTED\",\n      message: rejectionMessage\n    };\n    try {\n      const response = await fetch(`http://localhost:8085/waste-details/update/${selectedRequest}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(updatedData)\n      });\n      if (response.ok) {\n        setRequests(prevRequests => prevRequests.map(request => request.id === selectedRequest ? {\n          ...request,\n          ...updatedData\n        } : request));\n        setShowRejectionModal(false);\n      } else {\n        console.error(\"Error rejecting request\");\n      }\n    } catch (error) {\n      console.error(\"Error rejecting request:\", error);\n    }\n  };\n\n  // Filter Requests\n  const filteredRequests = requests.filter(request => {\n    if (filter === \"ALL\") return true;\n    if (filter === \"NEW\") return !request.status || request.status === \"PENDING\";\n    if (filter === \"SCHEDULED\") return request.status === \"ACCEPTED\";\n    if (filter === \"REJECTED\") return request.status === \"REJECTED\";\n    if (filter === \"COLLECTED\") return request.status === \"COLLECTED\";\n    return true;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"processing-status-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Processing Status\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Track the status of ongoing waste processing.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filter-buttons mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"info\",\n          onClick: () => setFilter(\"NEW\"),\n          className: \"ms-2\",\n          children: \"New Requests\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 529,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"success\",\n          onClick: () => setFilter(\"SCHEDULED\"),\n          className: \"ms-2\",\n          children: \"Scheduled\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 530,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"danger\",\n          onClick: () => setFilter(\"REJECTED\"),\n          className: \"ms-2\",\n          children: \"Rejected\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 531,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          onClick: () => setFilter(\"COLLECTED\"),\n          className: \"ms-2\",\n          children: \"Collected\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 532,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 527,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Waste Status\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 535,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"requests-list\",\n        children: filteredRequests.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No requests available\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 538,\n          columnNumber: 13\n        }, this) : filteredRequests.map(request => /*#__PURE__*/_jsxDEV(Card, {\n          className: \"request-card mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(Card.Img, {\n            variant: \"top\",\n            src: request.imagePath,\n            alt: `${request.wasteType} image`,\n            className: \"card-image p-2 rounded-4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 542,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n            children: /*#__PURE__*/_jsxDEV(Row, {\n              children: [/*#__PURE__*/_jsxDEV(Col, {\n                md: 6,\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Name:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 551,\n                    columnNumber: 26\n                  }, this), \" \", request.name]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 551,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Waste Type:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 552,\n                    columnNumber: 26\n                  }, this), \" \", request.wasteType]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 552,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Address:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 553,\n                    columnNumber: 26\n                  }, this), \" \", request.address]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 553,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Date Created:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 554,\n                    columnNumber: 26\n                  }, this), \" \", new Date(request.createdAt).toLocaleDateString()]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 554,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 550,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: 6,\n                children: [request.status === \"COLLECTED\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: \"Waste ID:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 559,\n                      columnNumber: 30\n                    }, this), \" \", request.id]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 559,\n                    columnNumber: 27\n                  }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: \"Status:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 560,\n                      columnNumber: 30\n                    }, this), \" \", request.status]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 560,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true), request.status === \"ACCEPTED\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                        children: \"Waste ID:\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 566,\n                        columnNumber: 31\n                      }, this), \" \", request.id]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 566,\n                      columnNumber: 28\n                    }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: \"Pickup Date:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 568,\n                      columnNumber: 29\n                    }, this), \" \", request.pickupDate, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 568,\n                      columnNumber: 79\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 565,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(Button, {\n                    variant: \"primary\",\n                    onClick: () => handleCollectRequest(request.id),\n                    className: \"mt-2\",\n                    children: \"Mark as Collected\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 571,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true), request.status === \"REJECTED\" && /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Waste ID:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 582,\n                    columnNumber: 28\n                  }, this), \" \", request.id, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 582,\n                    columnNumber: 67\n                  }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 583,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Status:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 584,\n                    columnNumber: 27\n                  }, this), \" \", request.status, \" - \", request.message]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 582,\n                  columnNumber: 25\n                }, this), request.status !== \"ACCEPTED\" && request.status !== \"REJECTED\" && request.status !== \"COLLECTED\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(Button, {\n                    variant: \"success\",\n                    onClick: () => handleConfirmRequest(request.id),\n                    className: \"mt-2\",\n                    children: \"Confirm\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 590,\n                    columnNumber: 29\n                  }, this), /*#__PURE__*/_jsxDEV(Button, {\n                    variant: \"danger\",\n                    onClick: () => handleRejectRequest(request.id),\n                    className: \"mt-2 ms-2\",\n                    children: \"Reject\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 597,\n                    columnNumber: 29\n                  }, this)]\n                }, void 0, true)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 556,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 549,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 548,\n            columnNumber: 17\n          }, this)]\n        }, request.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 541,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 536,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 523,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      show: showScheduleModal,\n      onHide: () => setShowScheduleModal(false),\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: \"Schedule Pickup\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 618,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 617,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Pickup Date:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 622,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"date\",\n            value: pickupDate,\n            onChange: e => setPickupDate(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 623,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 621,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Additional Message:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 630,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            as: \"textarea\",\n            rows: 3,\n            value: message,\n            onChange: e => setMessage(e.target.value),\n            placeholder: \"Enter any additional message\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 631,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 629,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 620,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"secondary\",\n          onClick: () => setShowScheduleModal(false),\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 641,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          onClick: handleSchedulePickup,\n          children: \"Schedule Pickup\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 644,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 640,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 616,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      show: showRejectionModal,\n      onHide: () => setShowRejectionModal(false),\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: \"Rejection Reason\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 653,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 652,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: /*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Rejection Message:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 657,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            as: \"textarea\",\n            rows: 3,\n            value: rejectionMessage,\n            onChange: e => setRejectionMessage(e.target.value),\n            placeholder: \"Enter rejection reason\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 658,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 656,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 655,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"secondary\",\n          onClick: () => setShowRejectionModal(false),\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 668,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"danger\",\n          onClick: handleConfirmRejection,\n          children: \"Reject\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 671,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 667,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 651,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 522,\n    columnNumber: 5\n  }, this);\n}\n_s(ProcessingStatus, \"jY1amGYUo+d0jwpHYBTfCnbl1c0=\");\n_c = ProcessingStatus;\nexport default ProcessingStatus;\nvar _c;\n$RefreshReg$(_c, \"ProcessingStatus\");","map":{"version":3,"names":["React","useState","useEffect","Button","Row","Col","Modal","Card","Form","jsxDEV","_jsxDEV","Fragment","_Fragment","ProcessingStatus","_s","requests","setRequests","pickupDate","setPickupDate","message","setMessage","rejectionMessage","setRejectionMessage","showScheduleModal","setShowScheduleModal","showRejectionModal","setShowRejectionModal","selectedRequest","setSelectedRequest","filter","setFilter","fetchData","response","fetch","data","json","Array","isArray","console","error","handleConfirmRequest","requestId","handleSchedulePickup","updatedData","status","method","headers","body","JSON","stringify","ok","prevRequests","map","request","id","handleCollectRequest","isConfirmed","window","confirm","alert","handleRejectRequest","handleConfirmRejection","filteredRequests","className","children","fileName","_jsxFileName","lineNumber","columnNumber","variant","onClick","length","Img","src","imagePath","alt","wasteType","Body","md","name","address","Date","createdAt","toLocaleDateString","show","onHide","Header","closeButton","Title","Group","Label","Control","type","value","onChange","e","target","as","rows","placeholder","Footer","_c","$RefreshReg$"],"sources":["C:/Users/Lenovo/Desktop/New folder/project/src/components/Employee/ProcessingStatus.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import { Button, ListGroup, Form, Row, Col } from \"react-bootstrap\";\r\n// import axios from \"axios\";\r\n// import \"./ProcessingStatus.css\";\r\n\r\n// function ProcessingStatus() {\r\n//   const [requests, setRequests] = useState([]);\r\n//   const [pickupDate, setPickupDate] = useState(\"\");\r\n\r\n//   useEffect(() => {\r\n//     fetchRequests();\r\n//   }, []);\r\n\r\n//   const fetchRequests = async () => {\r\n//     try {\r\n//       const response = await axios.get(\"/api/waste-requests\");\r\n//       setRequests(response.data);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching requests:\", error);\r\n//     }\r\n//   };\r\n\r\n//   const handleConfirmRequest = async (requestId) => {\r\n//     try {\r\n//       await axios.put(`/api/confirm-request/${requestId}`, { status: \"confirmed\", pickupDate });\r\n//       fetchRequests();\r\n//     } catch (error) {\r\n//       console.error(\"Error confirming request:\", error);\r\n//     }\r\n//   };\r\n\r\n//   const handleRejectRequest = async (requestId) => {\r\n//     try {\r\n//       await axios.put(`/api/reject-request/${requestId}`, { status: \"rejected\" });\r\n//       fetchRequests();\r\n//     } catch (error) {\r\n//       console.error(\"Error rejecting request:\", error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"container\">\r\n//     <div className=\"processing-status-container\">\r\n//       <h1>Processing Status</h1>\r\n//       <p>Track the status of ongoing waste processing.</p>\r\n\r\n//       <h3>Waste Requests</h3>\r\n//       <ListGroup>\r\n//         {requests.length === 0 ? (\r\n//           <ListGroup.Item>No requests available</ListGroup.Item>\r\n//         ) : (\r\n//           requests.map((request) => (\r\n//             <ListGroup.Item key={request.id}>\r\n//               <Row>\r\n//                 <Col md={6}>\r\n//                   <p>Type: {request.type}</p>\r\n//                   <p>Volume: {request.volume} tons</p>\r\n//                   <p>Source: {request.source}</p>\r\n//                   <p>Date: {request.date}</p>\r\n//                 </Col>\r\n//                 <Col md={6}>\r\n//                   {request.status !== \"confirmed\" && (\r\n//                     <>\r\n//                       <Button\r\n//                         variant=\"success\"\r\n//                         onClick={() => handleConfirmRequest(request.id)}\r\n//                       >\r\n//                         Confirm\r\n//                       </Button>\r\n//                       <Button\r\n//                         variant=\"danger\"\r\n//                         onClick={() => handleRejectRequest(request.id)}\r\n//                       >\r\n//                         Reject\r\n//                       </Button>\r\n//                     </>\r\n//                   )}\r\n//                   {request.status === \"confirmed\" && (\r\n//                     <p>Pickup Scheduled for: {pickupDate}</p>\r\n//                   )}\r\n//                 </Col>\r\n//               </Row>\r\n//               {request.status === \"confirmed\" && (\r\n//                 <Row className=\"mt-3\">\r\n//                   <Col md={12}>\r\n//                     <Form.Control\r\n//                       type=\"date\"\r\n//                       value={pickupDate}\r\n//                       onChange={(e) => setPickupDate(e.target.value)}\r\n//                       placeholder=\"Schedule Pickup Date\"\r\n//                     />\r\n//                   </Col>\r\n//                 </Row>\r\n//               )}\r\n//             </ListGroup.Item>\r\n//           ))\r\n//         )}\r\n//       </ListGroup>\r\n//     </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default ProcessingStatus;\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { Button, ListGroup, Form, Row, Col, Modal, Card } from \"react-bootstrap\";\r\n// import axios from \"axios\";\r\n// import \"./ProcessingStatus.css\";\r\n\r\n// function ProcessingStatus() {\r\n//   const [requests, setRequests] = useState([]);\r\n//   const [pickupDate, setPickupDate] = useState(\"\");\r\n//   const [driverName, setDriverName] = useState(\"\");\r\n//   const [additionalInfo, setAdditionalInfo] = useState(\"\");\r\n//   const [showScheduleModal, setShowScheduleModal] = useState(false);\r\n//   const [selectedRequest, setSelectedRequest] = useState(null);\r\n//   const [rejectReason, setRejectReason] = useState(\"\");\r\n//   const [showRejectModal, setShowRejectModal] = useState(false);\r\n\r\n//   useEffect(() => {\r\n//     // Mocking API data for testing\r\n//     const mockRequests = [\r\n//       {\r\n//         id: 1,\r\n//         type: \"Plastic\",\r\n//         volume: 5,\r\n//         source: \"Farmer A\",\r\n//         date: \"2024-12-10\",\r\n//         status: \"pending\",\r\n//       },\r\n//       {\r\n//         id: 2,\r\n//         type: \"Organic\",\r\n//         volume: 3,\r\n//         source: \"Farmer B\",\r\n//         date: \"2024-12-12\",\r\n//         status: \"pending\",\r\n//       },\r\n//       {\r\n//         id: 3,\r\n//         type: \"Glass\",\r\n//         volume: 2,\r\n//         source: \"Farmer C\",\r\n//         date: \"2024-12-11\",\r\n//         status: \"confirmed\",\r\n//       },\r\n//     ];\r\n//     setRequests(mockRequests);\r\n//   }, []);\r\n\r\n//   const handleConfirmRequest = async (requestId) => {\r\n//     try {\r\n//       setRequests((prevRequests) =>\r\n//         prevRequests.map((request) =>\r\n//           request.id === requestId\r\n//             ? { ...request, status: \"confirmed\" }\r\n//             : request\r\n//         )\r\n//       );\r\n//     } catch (error) {\r\n//       console.error(\"Error confirming request:\", error);\r\n//     }\r\n//   };\r\n\r\n//   const handleRejectRequest = (requestId) => {\r\n//     setSelectedRequest(requestId);\r\n//     setShowRejectModal(true);\r\n//   };\r\n\r\n//   const handleRejectSubmit = async () => {\r\n//     try {\r\n//       setRequests((prevRequests) =>\r\n//         prevRequests.map((request) =>\r\n//           request.id === selectedRequest\r\n//             ? { ...request, status: \"rejected\", rejectReason }\r\n//             : request\r\n//         )\r\n//       );\r\n//       setShowRejectModal(false);\r\n//       setRejectReason(\"\");\r\n//     } catch (error) {\r\n//       console.error(\"Error rejecting request:\", error);\r\n//     }\r\n//   };\r\n\r\n//   const handleSchedulePickup = (requestId) => {\r\n//     setSelectedRequest(requestId);\r\n//     setShowScheduleModal(true);\r\n//   };\r\n\r\n//   const handleScheduleSubmit = async () => {\r\n//     try {\r\n//       setRequests((prevRequests) =>\r\n//         prevRequests.map((request) =>\r\n//           request.id === selectedRequest\r\n//             ? {\r\n//                 ...request,\r\n//                 status: \"pickupScheduled\",\r\n//                 pickupDate,\r\n//                 driverName,\r\n//                 additionalInfo,\r\n//               }\r\n//             : request\r\n//         )\r\n//       );\r\n//       setShowScheduleModal(false);\r\n//       setPickupDate(\"\");\r\n//       setDriverName(\"\");\r\n//       setAdditionalInfo(\"\");\r\n//     } catch (error) {\r\n//       console.error(\"Error scheduling pickup:\", error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"container\">\r\n//     <div className=\"processing-status-container\">\r\n//       <h1>Processing Status</h1>\r\n//       <p>Track the status of ongoing waste processing.</p>\r\n\r\n//       <h3>Waste Requests</h3>\r\n//       <div className=\"requests-list\">\r\n//         {requests.length === 0 ? (\r\n//           <p>No requests available</p>\r\n//         ) : (\r\n//           requests.map((request) => (\r\n//             <Card key={request.id} className=\"request-card mb-3\">\r\n//               <Card.Body>\r\n//                 <Row>\r\n//                   <Col md={6}>\r\n//                     <p><strong>Type:</strong> {request.type}</p>\r\n//                     <p><strong>Volume:</strong> {request.volume} tons</p>\r\n//                     <p><strong>Source:</strong> {request.source}</p>\r\n//                     <p><strong>Date:</strong> {request.date}</p>\r\n//                   </Col>\r\n//                   <Col md={6}>\r\n//                     {request.status === \"pending\" && (\r\n//                       <>\r\n//                         <Button\r\n//                           variant=\"success\"\r\n//                           onClick={() => handleConfirmRequest(request.id)}\r\n//                           className=\"mr-2\"\r\n//                         >\r\n//                           Confirm\r\n//                         </Button>\r\n//                         <Button\r\n//                           variant=\"danger\"\r\n//                           onClick={() => handleRejectRequest(request.id)}\r\n//                         >\r\n//                           Reject\r\n//                         </Button>\r\n//                       </>\r\n//                     )}\r\n//                     {request.status === \"confirmed\" && (\r\n//                       <>\r\n//                         <p>Pickup Scheduled for: {request.pickupDate}</p>\r\n//                         <Button\r\n//                           variant=\"primary\"\r\n//                           onClick={() => handleSchedulePickup(request.id)}\r\n//                           className=\"mt-2\"\r\n//                         >\r\n//                           Schedule Pickup\r\n//                         </Button>\r\n//                       </>\r\n//                     )}\r\n//                     {request.status === \"pickupScheduled\" && (\r\n//                       <p>\r\n//                         Pickup scheduled for: {request.pickupDate}<br />\r\n//                         <strong>Driver Name:</strong> {request.driverName}<br />\r\n//                         <strong>Additional Info:</strong> {request.additionalInfo}\r\n//                       </p>\r\n//                     )}\r\n//                     {request.status === \"rejected\" && (\r\n//                       <p><strong>Reason for Rejection:</strong> {request.rejectReason}</p>\r\n//                     )}\r\n//                   </Col>\r\n//                 </Row>\r\n//               </Card.Body>\r\n//             </Card>\r\n//           ))\r\n//         )}\r\n//       </div>\r\n//       </div>\r\n\r\n      \r\n//       <Modal show={showRejectModal} onHide={() => setShowRejectModal(false)}>\r\n//         <Modal.Header closeButton>\r\n//           <Modal.Title>Reject Reason</Modal.Title>\r\n//         </Modal.Header>\r\n//         <Modal.Body>\r\n//           <Form.Group>\r\n//             <Form.Label>Provide a reason for rejection:</Form.Label>\r\n//             <Form.Control\r\n//               as=\"textarea\"\r\n//               rows={3}\r\n//               value={rejectReason}\r\n//               onChange={(e) => setRejectReason(e.target.value)}\r\n//             />\r\n//           </Form.Group>\r\n//         </Modal.Body>\r\n//         <Modal.Footer>\r\n//           <Button variant=\"secondary\" onClick={() => setShowRejectModal(false)}>\r\n//             Close\r\n//           </Button>\r\n//           <Button variant=\"danger\" onClick={handleRejectSubmit}>\r\n//             Submit Rejection\r\n//           </Button>\r\n//         </Modal.Footer>\r\n//       </Modal>\r\n\r\n//       {/* Schedule Pickup Modal */}\r\n//       <Modal show={showScheduleModal} onHide={() => setShowScheduleModal(false)}>\r\n//         <Modal.Header closeButton>\r\n//           <Modal.Title>Schedule Pickup</Modal.Title>\r\n//         </Modal.Header>\r\n//         <Modal.Body>\r\n//           <Form.Group>\r\n//             <Form.Label>Pickup Date:</Form.Label>\r\n//             <Form.Control\r\n//               type=\"date\"\r\n//               value={pickupDate}\r\n//               onChange={(e) => setPickupDate(e.target.value)}\r\n//             />\r\n//           </Form.Group>\r\n//           <Form.Group>\r\n//             <Form.Label>Driver Name:</Form.Label>\r\n//             <Form.Control\r\n//               type=\"text\"\r\n//               value={driverName}\r\n//               onChange={(e) => setDriverName(e.target.value)}\r\n//               placeholder=\"Enter driver's name\"\r\n//             />\r\n//           </Form.Group>\r\n//           <Form.Group>\r\n//             <Form.Label>Additional Information:</Form.Label>\r\n//             <Form.Control\r\n//               as=\"textarea\"\r\n//               rows={3}\r\n//               value={additionalInfo}\r\n//               onChange={(e) => setAdditionalInfo(e.target.value)}\r\n//               placeholder=\"Enter any additional info\"\r\n//             />\r\n//           </Form.Group>\r\n//         </Modal.Body>\r\n//         <Modal.Footer>\r\n//           <Button variant=\"secondary\" onClick={() => setShowScheduleModal(false)}>\r\n//             Close\r\n//           </Button>\r\n//           <Button variant=\"primary\" onClick={handleScheduleSubmit}>\r\n//             Schedule Pickup\r\n//           </Button>\r\n//         </Modal.Footer>\r\n//       </Modal>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default ProcessingStatus;\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Button, Row, Col, Modal, Card, Form } from \"react-bootstrap\";\r\nimport \"./ProcessingStatus.css\";\r\n\r\nfunction ProcessingStatus() {\r\n  const [requests, setRequests] = useState([]);\r\n  const [pickupDate, setPickupDate] = useState(\"\");\r\n  const [message, setMessage] = useState(\"\");\r\n  const [rejectionMessage, setRejectionMessage] = useState(\"\");\r\n  const [showScheduleModal, setShowScheduleModal] = useState(false);\r\n  const [showRejectionModal, setShowRejectionModal] = useState(false);\r\n  const [selectedRequest, setSelectedRequest] = useState(null);\r\n  const [filter, setFilter] = useState(\"NEW\");\r\n\r\n  // Fetch data from API\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(\"http://localhost:8085/waste-details/orders\");\r\n        const data = await response.json();\r\n        if (Array.isArray(data)) {\r\n          setRequests(data);\r\n        } else {\r\n          console.error(\"Invalid data received from API\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching data:\", error);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  // Open Schedule Modal for Confirm Request\r\n  const handleConfirmRequest = (requestId) => {\r\n    setSelectedRequest(requestId);\r\n    setShowScheduleModal(true);\r\n  };\r\n\r\n  // Handle Schedule Pickup\r\n  const handleSchedulePickup = async () => {\r\n    const updatedData = {\r\n      status: \"ACCEPTED\",\r\n      pickupDate,\r\n      message,\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(\r\n        `http://localhost:8085/waste-details/update/${selectedRequest}`,\r\n        {\r\n          method: \"PUT\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify(updatedData),\r\n        }\r\n      );\r\n\r\n      if (response.ok) {\r\n        setRequests((prevRequests) =>\r\n          prevRequests.map((request) =>\r\n            request.id === selectedRequest\r\n              ? { ...request, ...updatedData }\r\n              : request\r\n          )\r\n        );\r\n        setShowScheduleModal(false);\r\n      } else {\r\n        console.error(\"Error updating request\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error updating status:\", error);\r\n    }\r\n  };\r\n\r\n  // Handle Collect Request with Confirmation Alert\r\n  const handleCollectRequest = async (requestId) => {\r\n    const isConfirmed = window.confirm(\"Are you sure you want to mark this request as collected?\");\r\n    if (!isConfirmed) return;\r\n\r\n    const updatedData = {\r\n      status: \"COLLECTED\",\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(\r\n        `http://localhost:8085/waste-details/update/${requestId}`,\r\n        {\r\n          method: \"PUT\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify(updatedData),\r\n        }\r\n      );\r\n\r\n      if (response.ok) {\r\n        setRequests((prevRequests) =>\r\n          prevRequests.map((request) =>\r\n            request.id === requestId ? { ...request, ...updatedData } : request\r\n          )\r\n        );\r\n        alert(\"Request successfully marked as collected!\");\r\n      } else {\r\n        console.error(\"Error updating request to collected\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error updating status:\", error);\r\n    }\r\n  };\r\n\r\n  // Open Rejection Modal\r\n  const handleRejectRequest = (requestId) => {\r\n    setSelectedRequest(requestId);\r\n    setShowRejectionModal(true);\r\n  };\r\n\r\n  // Handle Reject with Message\r\n  const handleConfirmRejection = async () => {\r\n    const updatedData = {\r\n      status: \"REJECTED\",\r\n      message: rejectionMessage,\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(\r\n        `http://localhost:8085/waste-details/update/${selectedRequest}`,\r\n        {\r\n          method: \"PUT\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify(updatedData),\r\n        }\r\n      );\r\n\r\n      if (response.ok) {\r\n        setRequests((prevRequests) =>\r\n          prevRequests.map((request) =>\r\n            request.id === selectedRequest ? { ...request, ...updatedData } : request\r\n          )\r\n        );\r\n        setShowRejectionModal(false);\r\n      } else {\r\n        console.error(\"Error rejecting request\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error rejecting request:\", error);\r\n    }\r\n  };\r\n\r\n  // Filter Requests\r\n  const filteredRequests = requests.filter((request) => {\r\n    if (filter === \"ALL\") return true;\r\n    if (filter === \"NEW\") return !request.status || request.status === \"PENDING\";\r\n    if (filter === \"SCHEDULED\") return request.status === \"ACCEPTED\";\r\n    if (filter === \"REJECTED\") return request.status === \"REJECTED\";\r\n    if (filter === \"COLLECTED\") return request.status === \"COLLECTED\";\r\n    return true;\r\n  });\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"processing-status-container\">\r\n        <h1>Processing Status</h1>\r\n        <p>Track the status of ongoing waste processing.</p>\r\n\r\n        <div className=\"filter-buttons mb-3\">\r\n          {/* <Button variant=\"secondary\" onClick={() => setFilter(\"ALL\")}>All</Button> */}\r\n          <Button variant=\"info\" onClick={() => setFilter(\"NEW\")} className=\"ms-2\">New Requests</Button>\r\n          <Button variant=\"success\" onClick={() => setFilter(\"SCHEDULED\")} className=\"ms-2\">Scheduled</Button>\r\n          <Button variant=\"danger\" onClick={() => setFilter(\"REJECTED\")} className=\"ms-2\">Rejected</Button>\r\n          <Button variant=\"primary\" onClick={() => setFilter(\"COLLECTED\")} className=\"ms-2\">Collected</Button>\r\n        </div>\r\n\r\n        <h3>Waste Status</h3>\r\n        <div className=\"requests-list\">\r\n          {filteredRequests.length === 0 ? (\r\n            <p>No requests available</p>\r\n          ) : (\r\n            filteredRequests.map((request) => (\r\n              <Card key={request.id} className=\"request-card mb-3\">\r\n                <Card.Img\r\n                  variant=\"top\"\r\n                  src={request.imagePath}\r\n                  alt={`${request.wasteType} image`}\r\n                  className=\"card-image p-2 rounded-4\"\r\n                />\r\n                <Card.Body>\r\n                  <Row>\r\n                    <Col md={6}>\r\n                      <p><strong>Name:</strong> {request.name}</p>\r\n                      <p><strong>Waste Type:</strong> {request.wasteType}</p>\r\n                      <p><strong>Address:</strong> {request.address}</p>\r\n                      <p><strong>Date Created:</strong> {new Date(request.createdAt).toLocaleDateString()}</p>\r\n                    </Col>\r\n                    <Col md={6}>\r\n                      {request.status === \"COLLECTED\" && (\r\n                        <>\r\n                          <p><strong>Waste ID:</strong> {request.id}</p> {/* Display Farmer ID */}\r\n                          <p><strong>Status:</strong> {request.status}</p>\r\n                        </>\r\n                      )}\r\n                      {request.status === \"ACCEPTED\" && (\r\n                        <>\r\n                          <p>\r\n                           <p><strong>Waste ID:</strong> {request.id}</p> \r\n                            {/* <strong>Status:</strong> {request.status}<br /> */}\r\n                            <strong>Pickup Date:</strong> {request.pickupDate}<br />\r\n                            {/* <strong>Message:</strong> {request.message} */}\r\n                          </p>\r\n                          <Button\r\n                            variant=\"primary\"\r\n                            onClick={() => handleCollectRequest(request.id)}\r\n                            className=\"mt-2\"\r\n                          >\r\n                            Mark as Collected\r\n                          </Button>\r\n                        </>\r\n                      )}\r\n                      {request.status === \"REJECTED\" && (\r\n\r\n                        <p><strong>Waste ID:</strong> {request.id}<br/>\r\n                        <br/>\r\n                          <strong>Status:</strong> {request.status} - {request.message}</p>\r\n                      )}\r\n                      {request.status !== \"ACCEPTED\" &&\r\n                        request.status !== \"REJECTED\" &&\r\n                        request.status !== \"COLLECTED\" && (\r\n                          <>\r\n                            <Button\r\n                              variant=\"success\"\r\n                              onClick={() => handleConfirmRequest(request.id)}\r\n                              className=\"mt-2\"\r\n                            >\r\n                              Confirm\r\n                            </Button>\r\n                            <Button\r\n                              variant=\"danger\"\r\n                              onClick={() => handleRejectRequest(request.id)}\r\n                              className=\"mt-2 ms-2\"\r\n                            >\r\n                              Reject\r\n                            </Button>\r\n                          </>\r\n                        )}\r\n                    </Col>\r\n                  </Row>\r\n                </Card.Body>\r\n              </Card>\r\n            ))\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Schedule Pickup Modal */}\r\n      <Modal show={showScheduleModal} onHide={() => setShowScheduleModal(false)}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Schedule Pickup</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form.Group>\r\n            <Form.Label>Pickup Date:</Form.Label>\r\n            <Form.Control\r\n              type=\"date\"\r\n              value={pickupDate}\r\n              onChange={(e) => setPickupDate(e.target.value)}\r\n            />\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label>Additional Message:</Form.Label>\r\n            <Form.Control\r\n              as=\"textarea\"\r\n              rows={3}\r\n              value={message}\r\n              onChange={(e) => setMessage(e.target.value)}\r\n              placeholder=\"Enter any additional message\"\r\n            />\r\n          </Form.Group>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={() => setShowScheduleModal(false)}>\r\n            Close\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={handleSchedulePickup}>\r\n            Schedule Pickup\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n\r\n      {/* Rejection Modal */}\r\n      <Modal show={showRejectionModal} onHide={() => setShowRejectionModal(false)}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Rejection Reason</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form.Group>\r\n            <Form.Label>Rejection Message:</Form.Label>\r\n            <Form.Control\r\n              as=\"textarea\"\r\n              rows={3}\r\n              value={rejectionMessage}\r\n              onChange={(e) => setRejectionMessage(e.target.value)}\r\n              placeholder=\"Enter rejection reason\"\r\n            />\r\n          </Form.Group>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={() => setShowRejectionModal(false)}>\r\n            Close\r\n          </Button>\r\n          <Button variant=\"danger\" onClick={handleConfirmRejection}>\r\n            Reject\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProcessingStatus;\r\n\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAKA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}